/*
 * Copyright (c) 2012 Jens von Pilgrim
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Jens von Pilgrim - initial API and implementation
 */
module de.jevopi.mitra2.GenerateMitra2

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/de/jevopi/mitra2/Mitra2.xtext"
var file.extensions = "mitra"
var projectName = "de.jevopi.mitra2"
var runtimeProject = "../${projectName}"

Workflow {
	bean = StandaloneSetup {
		platformUri = "${runtimeProject}/.."
		scanClassPath = true
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages 
			fragment = ecore.EcoreGeneratorFragment {
			// referencedGenModels = "uri to genmodel, uri to next genmodel"
			}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
			  options = {
					backtrack = true
					memoize = true
					// k = 2
				}
			}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"// registerForImportedPackages = true
			}

			// scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment {}
			// fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 
			// fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = scoping.ImportNamespacesScopingFragment {}

			fragment = exporting.SimpleNamesFragment {}
			// fragment = exporting.QualifiedNamesFragment {}

			fragment = builder.BuilderIntegrationFragment {}

			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			// Xtext 1.x
			//			fragment = outline.TransformerFragment {}
			//			fragment = outline.OutlineNodeAdapterFactoryFragment {}
			// Xtext 2.x:
			fragment = outline.OutlineTreeProviderFragment {}
			
			fragment = outline.QuickOutlineFragment {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}

			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist  
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {
				options = {
					backtrack = true
					memoize  = true
					// k = 4
				}
			}

			// project wizard (optional)
			// Wizard is NOT generated, as a standalone project wizard project is 
			// defined. This project wizard is defined seaprately in order to 
			// enabling installing the wizard in the original development 
			// instance, that is in the same instance where Refacola and the
			// templates are edited.
			/* 
			 fragment = projectWizard.SimpleProjectWizardFragment {
			 		generatorProjectName = "${projectName}.generator" 
					modelFileExtension = file.extensions
			 }
			 */
		}
	}
}
