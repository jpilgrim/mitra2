/*
* generated by Xtext
*/

package de.jevopi.mitra2.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MitraGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPackageNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPackageNameFQNParserRuleCall_0_1_0 = (RuleCall)cPackageNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImportKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImportsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImportsModuleReferenceParserRuleCall_4_1_0 = (RuleCall)cImportsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cMetamodelDeclarationsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cMetamodelDeclarationsMetamodelDeclarationParserRuleCall_5_0_0 = (RuleCall)cMetamodelDeclarationsAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cAnnotationDefinitionsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cAnnotationDefinitionsAnnotationsDefinitionParserRuleCall_6_0_0 = (RuleCall)cAnnotationDefinitionsAssignment_6_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRuleDeclarationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRuleDeclarationsRuleDeclarationParserRuleCall_7_0 = (RuleCall)cRuleDeclarationsAssignment_7.eContents().get(0);
		
		//// Rules and Types
		//Module:
		//	("package" packageName=FQN ";"?)? "module" name=ID ";" ("import" imports+=ModuleReference ";")*
		//	(metamodelDeclarations+=MetamodelDeclaration ";")* (annotationDefinitions+=AnnotationsDefinition ";")*
		//	ruleDeclarations+=RuleDeclaration*;
		public ParserRule getRule() { return rule; }

		//("package" packageName=FQN ";"?)? "module" name=ID ";" ("import" imports+=ModuleReference ";")*
		//(metamodelDeclarations+=MetamodelDeclaration ";")* (annotationDefinitions+=AnnotationsDefinition ";")*
		//ruleDeclarations+=RuleDeclaration*
		public Group getGroup() { return cGroup; }

		//("package" packageName=FQN ";"?)?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//packageName=FQN
		public Assignment getPackageNameAssignment_0_1() { return cPackageNameAssignment_0_1; }

		//FQN
		public RuleCall getPackageNameFQNParserRuleCall_0_1_0() { return cPackageNameFQNParserRuleCall_0_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//"module"
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//("import" imports+=ModuleReference ";")*
		public Group getGroup_4() { return cGroup_4; }

		//"import"
		public Keyword getImportKeyword_4_0() { return cImportKeyword_4_0; }

		//imports+=ModuleReference
		public Assignment getImportsAssignment_4_1() { return cImportsAssignment_4_1; }

		//ModuleReference
		public RuleCall getImportsModuleReferenceParserRuleCall_4_1_0() { return cImportsModuleReferenceParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//(metamodelDeclarations+=MetamodelDeclaration ";")*
		public Group getGroup_5() { return cGroup_5; }

		//metamodelDeclarations+=MetamodelDeclaration
		public Assignment getMetamodelDeclarationsAssignment_5_0() { return cMetamodelDeclarationsAssignment_5_0; }

		//MetamodelDeclaration
		public RuleCall getMetamodelDeclarationsMetamodelDeclarationParserRuleCall_5_0_0() { return cMetamodelDeclarationsMetamodelDeclarationParserRuleCall_5_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }

		//(annotationDefinitions+=AnnotationsDefinition ";")*
		public Group getGroup_6() { return cGroup_6; }

		//annotationDefinitions+=AnnotationsDefinition
		public Assignment getAnnotationDefinitionsAssignment_6_0() { return cAnnotationDefinitionsAssignment_6_0; }

		//AnnotationsDefinition
		public RuleCall getAnnotationDefinitionsAnnotationsDefinitionParserRuleCall_6_0_0() { return cAnnotationDefinitionsAnnotationsDefinitionParserRuleCall_6_0_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }

		//ruleDeclarations+=RuleDeclaration*
		public Assignment getRuleDeclarationsAssignment_7() { return cRuleDeclarationsAssignment_7; }

		//RuleDeclaration
		public RuleCall getRuleDeclarationsRuleDeclarationParserRuleCall_7_0() { return cRuleDeclarationsRuleDeclarationParserRuleCall_7_0; }
	}

	public class ModuleReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleReference");
		private final Assignment cModuleAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cModuleModuleCrossReference_0 = (CrossReference)cModuleAssignment.eContents().get(0);
		private final RuleCall cModuleModuleFQNParserRuleCall_0_1 = (RuleCall)cModuleModuleCrossReference_0.eContents().get(1);
		
		//ModuleReference:
		//	module=[Module|FQN];
		public ParserRule getRule() { return rule; }

		//module=[Module|FQN]
		public Assignment getModuleAssignment() { return cModuleAssignment; }

		//[Module|FQN]
		public CrossReference getModuleModuleCrossReference_0() { return cModuleModuleCrossReference_0; }

		//FQN
		public RuleCall getModuleModuleFQNParserRuleCall_0_1() { return cModuleModuleFQNParserRuleCall_0_1; }
	}

	public class MetamodelDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cPropertiesAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_1_0_0 = (RuleCall)cPropertiesAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_1_1_1_0 = (RuleCall)cPropertiesAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cReplacesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cReplacesAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cReplacesIDTerminalRuleCall_4_1_0_0 = (RuleCall)cReplacesAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cReplacesAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cReplacesIDTerminalRuleCall_4_1_1_1_0 = (RuleCall)cReplacesAssignment_4_1_1_1.eContents().get(0);
		
		/// ** 
		// * Fully qualified name for rules and return parameter mappings.
		// * The ":" is used insteaf "." to distinguish feature access from rule calls.
		// * A feature access must no start with a method call, thus 
		// * <code>foo()</code> must be a rule call. <code>a.foo()</code> is a feature 
		// * access, method <code>foo()</code> is called on object <code>a</code>.
		// * On the other hand, <code>a:foo()</code> is a rule invocation, rule 
		// * <code>foo()</code> is called in module <code>a</code>. 
		// *
		// * If both, feature access and rule calls, i.e. fully qualified names, were
		// * using the same separator char, <code>a.foo()</code> could eigther be a 
		// * feature access (method call on object a) or a rule invocation (rule foo in
		// * module a).
		// * / // FQN: parts+=ID (":" parts+=ID)*;			
		//MetamodelDeclaration:
		//	"metamodel" type=ID name=ID ("(" (properties+=Property ("," properties+=Property)*)? ")")? ("replaces" (replaces+=ID
		//	("," replaces+=ID)*))?;
		public ParserRule getRule() { return rule; }

		//"metamodel" type=ID name=ID ("(" (properties+=Property ("," properties+=Property)*)? ")")? ("replaces" (replaces+=ID
		//("," replaces+=ID)*))?
		public Group getGroup() { return cGroup; }

		//"metamodel"
		public Keyword getMetamodelKeyword_0() { return cMetamodelKeyword_0; }

		//type=ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("(" (properties+=Property ("," properties+=Property)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(properties+=Property ("," properties+=Property)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//properties+=Property
		public Assignment getPropertiesAssignment_3_1_0() { return cPropertiesAssignment_3_1_0; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_1_0_0() { return cPropertiesPropertyParserRuleCall_3_1_0_0; }

		//("," properties+=Property)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//properties+=Property
		public Assignment getPropertiesAssignment_3_1_1_1() { return cPropertiesAssignment_3_1_1_1; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_1_1_1_0() { return cPropertiesPropertyParserRuleCall_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//("replaces" (replaces+=ID ("," replaces+=ID)*))?
		public Group getGroup_4() { return cGroup_4; }

		//"replaces"
		public Keyword getReplacesKeyword_4_0() { return cReplacesKeyword_4_0; }

		//replaces+=ID ("," replaces+=ID)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//replaces+=ID
		public Assignment getReplacesAssignment_4_1_0() { return cReplacesAssignment_4_1_0; }

		//ID
		public RuleCall getReplacesIDTerminalRuleCall_4_1_0_0() { return cReplacesIDTerminalRuleCall_4_1_0_0; }

		//("," replaces+=ID)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//replaces+=ID
		public Assignment getReplacesAssignment_4_1_1_1() { return cReplacesAssignment_4_1_1_1; }

		//ID
		public RuleCall getReplacesIDTerminalRuleCall_4_1_1_1_0() { return cReplacesIDTerminalRuleCall_4_1_1_1_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Property:
		//	name=ID "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=STRING
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class RuleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityModifierEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cExecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExecExecutionModifierEnumRuleCall_2_0 = (RuleCall)cExecAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTracedAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cTracedTracedKeyword_3_0_0 = (Keyword)cTracedAssignment_3_0.eContents().get(0);
		private final Assignment cStealthAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cStealthStealthKeyword_3_1_0 = (Keyword)cStealthAssignment_3_1.eContents().get(0);
		private final Assignment cVirtualAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cVirtualVirtualKeyword_4_0 = (Keyword)cVirtualAssignment_4.eContents().get(0);
		private final Assignment cMultiAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cMultiMultiKeyword_5_0 = (Keyword)cMultiAssignment_5.eContents().get(0);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cFormalParametersAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cFormalParametersFormalParameterParserRuleCall_8_0_0 = (RuleCall)cFormalParametersAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cFormalParametersAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cFormalParametersFormalParameterParserRuleCall_8_1_1_0 = (RuleCall)cFormalParametersAssignment_8_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cColonKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cReturnParametersAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cReturnParametersReturnParameterParserRuleCall_10_2_0 = (RuleCall)cReturnParametersAssignment_10_2.eContents().get(0);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Keyword cCommaKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Assignment cReturnParametersAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final RuleCall cReturnParametersReturnParameterParserRuleCall_10_3_1_0 = (RuleCall)cReturnParametersAssignment_10_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cImplementsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cImplementedRulesAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cImplementedRulesSimpleRuleReferenceParserRuleCall_11_1_0 = (RuleCall)cImplementedRulesAssignment_11_1.eContents().get(0);
		private final Group cGroup_11_2 = (Group)cGroup_11.eContents().get(2);
		private final Keyword cCommaKeyword_11_2_0 = (Keyword)cGroup_11_2.eContents().get(0);
		private final Assignment cImplementedRulesAssignment_11_2_1 = (Assignment)cGroup_11_2.eContents().get(1);
		private final RuleCall cImplementedRulesSimpleRuleReferenceParserRuleCall_11_2_1_0 = (RuleCall)cImplementedRulesAssignment_11_2_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cOverridesKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cOverriddenRuleAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cOverriddenRuleSimpleRuleReferenceParserRuleCall_12_1_0 = (RuleCall)cOverriddenRuleAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cExcludedByKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cExcludingRulesAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cExcludingRulesSimpleRuleReferenceParserRuleCall_13_1_0 = (RuleCall)cExcludingRulesAssignment_13_1.eContents().get(0);
		private final Group cGroup_13_2 = (Group)cGroup_13.eContents().get(2);
		private final Keyword cCommaKeyword_13_2_0 = (Keyword)cGroup_13_2.eContents().get(0);
		private final Assignment cExcludingRulesAssignment_13_2_1 = (Assignment)cGroup_13_2.eContents().get(1);
		private final RuleCall cExcludingRulesSimpleRuleReferenceParserRuleCall_13_2_1_0 = (RuleCall)cExcludingRulesAssignment_13_2_1.eContents().get(0);
		private final Assignment cTriggerAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cTriggerTriggerParserRuleCall_14_0 = (RuleCall)cTriggerAssignment_14.eContents().get(0);
		private final Alternatives cAlternatives_15 = (Alternatives)cGroup.eContents().get(15);
		private final Keyword cSemicolonKeyword_15_0 = (Keyword)cAlternatives_15.eContents().get(0);
		private final Group cGroup_15_1 = (Group)cAlternatives_15.eContents().get(1);
		private final Assignment cJavaSpecAssignment_15_1_0 = (Assignment)cGroup_15_1.eContents().get(0);
		private final RuleCall cJavaSpecJavaSpecParserRuleCall_15_1_0_0 = (RuleCall)cJavaSpecAssignment_15_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_15_1_1 = (Keyword)cGroup_15_1.eContents().get(1);
		private final Assignment cBodyAssignment_15_2 = (Assignment)cAlternatives_15.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_15_2_0 = (RuleCall)cBodyAssignment_15_2.eContents().get(0);
		
		//RuleDeclaration:
		//	annotations+=Annotation* visibility=VisibilityModifier? exec=ExecutionModifier (traced?="traced" |
		//	stealth?="stealth")? virtual?="virtual"? multi?="multi"? name=ID "(" (formalParameters+=FormalParameter (","
		//	formalParameters+=FormalParameter)*)? ")" (":" "(" returnParameters+=ReturnParameter (","
		//	returnParameters+=ReturnParameter)* ")")? ("implements" implementedRules+=SimpleRuleReference (","
		//	implementedRules+=SimpleRuleReference)*)? ("overrides" overriddenRule=SimpleRuleReference)? // only one rule can be overridden (see super call)
		//	("excludedBy" excludingRules+=SimpleRuleReference ("," excludingRules+=SimpleRuleReference)*)? trigger=Trigger? (";" |
		//	javaSpec=JavaSpec ";" | body=Block);
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* visibility=VisibilityModifier? exec=ExecutionModifier (traced?="traced" | stealth?="stealth")?
		//virtual?="virtual"? multi?="multi"? name=ID "(" (formalParameters+=FormalParameter (","
		//formalParameters+=FormalParameter)*)? ")" (":" "(" returnParameters+=ReturnParameter (","
		//returnParameters+=ReturnParameter)* ")")? ("implements" implementedRules+=SimpleRuleReference (","
		//implementedRules+=SimpleRuleReference)*)? ("overrides" overriddenRule=SimpleRuleReference)? // only one rule can be overridden (see super call)
		//("excludedBy" excludingRules+=SimpleRuleReference ("," excludingRules+=SimpleRuleReference)*)? trigger=Trigger? (";" |
		//javaSpec=JavaSpec ";" | body=Block)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//visibility=VisibilityModifier?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }

		//VisibilityModifier
		public RuleCall getVisibilityVisibilityModifierEnumRuleCall_1_0() { return cVisibilityVisibilityModifierEnumRuleCall_1_0; }

		//exec=ExecutionModifier
		public Assignment getExecAssignment_2() { return cExecAssignment_2; }

		//ExecutionModifier
		public RuleCall getExecExecutionModifierEnumRuleCall_2_0() { return cExecExecutionModifierEnumRuleCall_2_0; }

		//(traced?="traced" | stealth?="stealth")?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//traced?="traced"
		public Assignment getTracedAssignment_3_0() { return cTracedAssignment_3_0; }

		//"traced"
		public Keyword getTracedTracedKeyword_3_0_0() { return cTracedTracedKeyword_3_0_0; }

		//stealth?="stealth"
		public Assignment getStealthAssignment_3_1() { return cStealthAssignment_3_1; }

		//"stealth"
		public Keyword getStealthStealthKeyword_3_1_0() { return cStealthStealthKeyword_3_1_0; }

		//virtual?="virtual"?
		public Assignment getVirtualAssignment_4() { return cVirtualAssignment_4; }

		//"virtual"
		public Keyword getVirtualVirtualKeyword_4_0() { return cVirtualVirtualKeyword_4_0; }

		//multi?="multi"?
		public Assignment getMultiAssignment_5() { return cMultiAssignment_5; }

		//"multi"
		public Keyword getMultiMultiKeyword_5_0() { return cMultiMultiKeyword_5_0; }

		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//(formalParameters+=FormalParameter ("," formalParameters+=FormalParameter)*)?
		public Group getGroup_8() { return cGroup_8; }

		//formalParameters+=FormalParameter
		public Assignment getFormalParametersAssignment_8_0() { return cFormalParametersAssignment_8_0; }

		//FormalParameter
		public RuleCall getFormalParametersFormalParameterParserRuleCall_8_0_0() { return cFormalParametersFormalParameterParserRuleCall_8_0_0; }

		//("," formalParameters+=FormalParameter)*
		public Group getGroup_8_1() { return cGroup_8_1; }

		//","
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }

		//formalParameters+=FormalParameter
		public Assignment getFormalParametersAssignment_8_1_1() { return cFormalParametersAssignment_8_1_1; }

		//FormalParameter
		public RuleCall getFormalParametersFormalParameterParserRuleCall_8_1_1_0() { return cFormalParametersFormalParameterParserRuleCall_8_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }

		//(":" "(" returnParameters+=ReturnParameter ("," returnParameters+=ReturnParameter)* ")")?
		public Group getGroup_10() { return cGroup_10; }

		//":"
		public Keyword getColonKeyword_10_0() { return cColonKeyword_10_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_1() { return cLeftParenthesisKeyword_10_1; }

		//returnParameters+=ReturnParameter
		public Assignment getReturnParametersAssignment_10_2() { return cReturnParametersAssignment_10_2; }

		//ReturnParameter
		public RuleCall getReturnParametersReturnParameterParserRuleCall_10_2_0() { return cReturnParametersReturnParameterParserRuleCall_10_2_0; }

		//("," returnParameters+=ReturnParameter)*
		public Group getGroup_10_3() { return cGroup_10_3; }

		//","
		public Keyword getCommaKeyword_10_3_0() { return cCommaKeyword_10_3_0; }

		//returnParameters+=ReturnParameter
		public Assignment getReturnParametersAssignment_10_3_1() { return cReturnParametersAssignment_10_3_1; }

		//ReturnParameter
		public RuleCall getReturnParametersReturnParameterParserRuleCall_10_3_1_0() { return cReturnParametersReturnParameterParserRuleCall_10_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_4() { return cRightParenthesisKeyword_10_4; }

		//("implements" implementedRules+=SimpleRuleReference ("," implementedRules+=SimpleRuleReference)*)?
		public Group getGroup_11() { return cGroup_11; }

		//"implements"
		public Keyword getImplementsKeyword_11_0() { return cImplementsKeyword_11_0; }

		//implementedRules+=SimpleRuleReference
		public Assignment getImplementedRulesAssignment_11_1() { return cImplementedRulesAssignment_11_1; }

		//SimpleRuleReference
		public RuleCall getImplementedRulesSimpleRuleReferenceParserRuleCall_11_1_0() { return cImplementedRulesSimpleRuleReferenceParserRuleCall_11_1_0; }

		//("," implementedRules+=SimpleRuleReference)*
		public Group getGroup_11_2() { return cGroup_11_2; }

		//","
		public Keyword getCommaKeyword_11_2_0() { return cCommaKeyword_11_2_0; }

		//implementedRules+=SimpleRuleReference
		public Assignment getImplementedRulesAssignment_11_2_1() { return cImplementedRulesAssignment_11_2_1; }

		//SimpleRuleReference
		public RuleCall getImplementedRulesSimpleRuleReferenceParserRuleCall_11_2_1_0() { return cImplementedRulesSimpleRuleReferenceParserRuleCall_11_2_1_0; }

		//("overrides" overriddenRule=SimpleRuleReference)?
		public Group getGroup_12() { return cGroup_12; }

		//"overrides"
		public Keyword getOverridesKeyword_12_0() { return cOverridesKeyword_12_0; }

		//overriddenRule=SimpleRuleReference
		public Assignment getOverriddenRuleAssignment_12_1() { return cOverriddenRuleAssignment_12_1; }

		//SimpleRuleReference
		public RuleCall getOverriddenRuleSimpleRuleReferenceParserRuleCall_12_1_0() { return cOverriddenRuleSimpleRuleReferenceParserRuleCall_12_1_0; }

		//("excludedBy" excludingRules+=SimpleRuleReference ("," excludingRules+=SimpleRuleReference)*)?
		public Group getGroup_13() { return cGroup_13; }

		//"excludedBy"
		public Keyword getExcludedByKeyword_13_0() { return cExcludedByKeyword_13_0; }

		//excludingRules+=SimpleRuleReference
		public Assignment getExcludingRulesAssignment_13_1() { return cExcludingRulesAssignment_13_1; }

		//SimpleRuleReference
		public RuleCall getExcludingRulesSimpleRuleReferenceParserRuleCall_13_1_0() { return cExcludingRulesSimpleRuleReferenceParserRuleCall_13_1_0; }

		//("," excludingRules+=SimpleRuleReference)*
		public Group getGroup_13_2() { return cGroup_13_2; }

		//","
		public Keyword getCommaKeyword_13_2_0() { return cCommaKeyword_13_2_0; }

		//excludingRules+=SimpleRuleReference
		public Assignment getExcludingRulesAssignment_13_2_1() { return cExcludingRulesAssignment_13_2_1; }

		//SimpleRuleReference
		public RuleCall getExcludingRulesSimpleRuleReferenceParserRuleCall_13_2_1_0() { return cExcludingRulesSimpleRuleReferenceParserRuleCall_13_2_1_0; }

		//trigger=Trigger?
		public Assignment getTriggerAssignment_14() { return cTriggerAssignment_14; }

		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_14_0() { return cTriggerTriggerParserRuleCall_14_0; }

		//";" | javaSpec=JavaSpec ";" | body=Block
		public Alternatives getAlternatives_15() { return cAlternatives_15; }

		//";"
		public Keyword getSemicolonKeyword_15_0() { return cSemicolonKeyword_15_0; }

		//javaSpec=JavaSpec ";"
		public Group getGroup_15_1() { return cGroup_15_1; }

		//javaSpec=JavaSpec
		public Assignment getJavaSpecAssignment_15_1_0() { return cJavaSpecAssignment_15_1_0; }

		//JavaSpec
		public RuleCall getJavaSpecJavaSpecParserRuleCall_15_1_0_0() { return cJavaSpecJavaSpecParserRuleCall_15_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_15_1_1() { return cSemicolonKeyword_15_1_1; }

		//body=Block
		public Assignment getBodyAssignment_15_2() { return cBodyAssignment_15_2; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_15_2_0() { return cBodyBlockParserRuleCall_15_2_0; }
	}

	public class RuleReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleRuleReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedRuleReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// added: overloadingRules
		//// added: triggeredRules
		//RuleReference:
		//	SimpleRuleReference | QualifiedRuleReference;
		public ParserRule getRule() { return rule; }

		//SimpleRuleReference | QualifiedRuleReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleRuleReference
		public RuleCall getSimpleRuleReferenceParserRuleCall_0() { return cSimpleRuleReferenceParserRuleCall_0; }

		//QualifiedRuleReference
		public RuleCall getQualifiedRuleReferenceParserRuleCall_1() { return cQualifiedRuleReferenceParserRuleCall_1; }
	}

	public class SimpleRuleReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleRuleReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRuleDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRuleDeclarationRuleDeclarationCrossReference_0_0 = (CrossReference)cRuleDeclarationAssignment_0.eContents().get(0);
		private final RuleCall cRuleDeclarationRuleDeclarationFQNParserRuleCall_0_0_1 = (RuleCall)cRuleDeclarationRuleDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterReferencesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterReferencesSimpleParameterReferenceParserRuleCall_2_0 = (RuleCall)cParameterReferencesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterReferencesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterReferencesSimpleParameterReferenceParserRuleCall_3_1_0 = (RuleCall)cParameterReferencesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cReturnReferencesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cReturnReferencesSimpleParameterReferenceParserRuleCall_5_2_0 = (RuleCall)cReturnReferencesAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cReturnReferencesAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cReturnReferencesSimpleParameterReferenceParserRuleCall_5_3_1_0 = (RuleCall)cReturnReferencesAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		
		//// added: ruleDeclaration=RuleDeclaration		
		//SimpleRuleReference:
		//	ruleDeclaration=[RuleDeclaration|FQN] "(" parameterReferences+=SimpleParameterReference (","
		//	parameterReferences+=SimpleParameterReference)* ")" (":" "(" returnReferences+=SimpleParameterReference (","
		//	returnReferences+=SimpleParameterReference)* ")")?;
		public ParserRule getRule() { return rule; }

		//ruleDeclaration=[RuleDeclaration|FQN] "(" parameterReferences+=SimpleParameterReference (","
		//parameterReferences+=SimpleParameterReference)* ")" (":" "(" returnReferences+=SimpleParameterReference (","
		//returnReferences+=SimpleParameterReference)* ")")?
		public Group getGroup() { return cGroup; }

		//ruleDeclaration=[RuleDeclaration|FQN]
		public Assignment getRuleDeclarationAssignment_0() { return cRuleDeclarationAssignment_0; }

		//[RuleDeclaration|FQN]
		public CrossReference getRuleDeclarationRuleDeclarationCrossReference_0_0() { return cRuleDeclarationRuleDeclarationCrossReference_0_0; }

		//FQN
		public RuleCall getRuleDeclarationRuleDeclarationFQNParserRuleCall_0_0_1() { return cRuleDeclarationRuleDeclarationFQNParserRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameterReferences+=SimpleParameterReference
		public Assignment getParameterReferencesAssignment_2() { return cParameterReferencesAssignment_2; }

		//SimpleParameterReference
		public RuleCall getParameterReferencesSimpleParameterReferenceParserRuleCall_2_0() { return cParameterReferencesSimpleParameterReferenceParserRuleCall_2_0; }

		//("," parameterReferences+=SimpleParameterReference)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//parameterReferences+=SimpleParameterReference
		public Assignment getParameterReferencesAssignment_3_1() { return cParameterReferencesAssignment_3_1; }

		//SimpleParameterReference
		public RuleCall getParameterReferencesSimpleParameterReferenceParserRuleCall_3_1_0() { return cParameterReferencesSimpleParameterReferenceParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(":" "(" returnReferences+=SimpleParameterReference ("," returnReferences+=SimpleParameterReference)* ")")?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//returnReferences+=SimpleParameterReference
		public Assignment getReturnReferencesAssignment_5_2() { return cReturnReferencesAssignment_5_2; }

		//SimpleParameterReference
		public RuleCall getReturnReferencesSimpleParameterReferenceParserRuleCall_5_2_0() { return cReturnReferencesSimpleParameterReferenceParserRuleCall_5_2_0; }

		//("," returnReferences+=SimpleParameterReference)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//returnReferences+=SimpleParameterReference
		public Assignment getReturnReferencesAssignment_5_3_1() { return cReturnReferencesAssignment_5_3_1; }

		//SimpleParameterReference
		public RuleCall getReturnReferencesSimpleParameterReferenceParserRuleCall_5_3_1_0() { return cReturnReferencesSimpleParameterReferenceParserRuleCall_5_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
	}

	public class QualifiedRuleReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedRuleReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRuleDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRuleDeclarationRuleDeclarationCrossReference_0_0 = (CrossReference)cRuleDeclarationAssignment_0.eContents().get(0);
		private final RuleCall cRuleDeclarationRuleDeclarationFQNParserRuleCall_0_0_1 = (RuleCall)cRuleDeclarationRuleDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterReferencesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterReferencesQualifiedParameterReferenceParserRuleCall_2_0 = (RuleCall)cParameterReferencesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterReferencesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterReferencesQualifiedParameterReferenceParserRuleCall_3_1_0 = (RuleCall)cParameterReferencesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cReturnReferencesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cReturnReferencesQualifiedParameterReferenceParserRuleCall_5_2_0 = (RuleCall)cReturnReferencesAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cReturnReferencesAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cReturnReferencesQualifiedParameterReferenceParserRuleCall_5_3_1_0 = (RuleCall)cReturnReferencesAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		
		//QualifiedRuleReference:
		//	ruleDeclaration=[RuleDeclaration|FQN] "(" parameterReferences+=QualifiedParameterReference (","
		//	parameterReferences+=QualifiedParameterReference)* ")" (":" "(" returnReferences+=QualifiedParameterReference (","
		//	returnReferences+=QualifiedParameterReference)* ")")?;
		public ParserRule getRule() { return rule; }

		//ruleDeclaration=[RuleDeclaration|FQN] "(" parameterReferences+=QualifiedParameterReference (","
		//parameterReferences+=QualifiedParameterReference)* ")" (":" "(" returnReferences+=QualifiedParameterReference (","
		//returnReferences+=QualifiedParameterReference)* ")")?
		public Group getGroup() { return cGroup; }

		//ruleDeclaration=[RuleDeclaration|FQN]
		public Assignment getRuleDeclarationAssignment_0() { return cRuleDeclarationAssignment_0; }

		//[RuleDeclaration|FQN]
		public CrossReference getRuleDeclarationRuleDeclarationCrossReference_0_0() { return cRuleDeclarationRuleDeclarationCrossReference_0_0; }

		//FQN
		public RuleCall getRuleDeclarationRuleDeclarationFQNParserRuleCall_0_0_1() { return cRuleDeclarationRuleDeclarationFQNParserRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameterReferences+=QualifiedParameterReference
		public Assignment getParameterReferencesAssignment_2() { return cParameterReferencesAssignment_2; }

		//QualifiedParameterReference
		public RuleCall getParameterReferencesQualifiedParameterReferenceParserRuleCall_2_0() { return cParameterReferencesQualifiedParameterReferenceParserRuleCall_2_0; }

		//("," parameterReferences+=QualifiedParameterReference)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//parameterReferences+=QualifiedParameterReference
		public Assignment getParameterReferencesAssignment_3_1() { return cParameterReferencesAssignment_3_1; }

		//QualifiedParameterReference
		public RuleCall getParameterReferencesQualifiedParameterReferenceParserRuleCall_3_1_0() { return cParameterReferencesQualifiedParameterReferenceParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(":" "(" returnReferences+=QualifiedParameterReference ("," returnReferences+=QualifiedParameterReference)* ")")?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//returnReferences+=QualifiedParameterReference
		public Assignment getReturnReferencesAssignment_5_2() { return cReturnReferencesAssignment_5_2; }

		//QualifiedParameterReference
		public RuleCall getReturnReferencesQualifiedParameterReferenceParserRuleCall_5_2_0() { return cReturnReferencesQualifiedParameterReferenceParserRuleCall_5_2_0; }

		//("," returnReferences+=QualifiedParameterReference)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//returnReferences+=QualifiedParameterReference
		public Assignment getReturnReferencesAssignment_5_3_1() { return cReturnReferencesAssignment_5_3_1; }

		//QualifiedParameterReference
		public RuleCall getReturnReferencesQualifiedParameterReferenceParserRuleCall_5_3_1_0() { return cReturnReferencesQualifiedParameterReferenceParserRuleCall_5_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
	}

	public class ParameterReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQualifiedParameterReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleParameterReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParameterReference:
		//	QualifiedParameterReference | SimpleParameterReference;
		public ParserRule getRule() { return rule; }

		//QualifiedParameterReference | SimpleParameterReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//QualifiedParameterReference
		public RuleCall getQualifiedParameterReferenceParserRuleCall_0() { return cQualifiedParameterReferenceParserRuleCall_0; }

		//SimpleParameterReference
		public RuleCall getSimpleParameterReferenceParserRuleCall_1() { return cSimpleParameterReferenceParserRuleCall_1; }
	}

	public class SimpleParameterReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleParameterReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SimpleParameterReference:
		//	type=Type name=ID?;
		public ParserRule getRule() { return rule; }

		//type=Type name=ID?
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class QualifiedParameterReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedParameterReference");
		private final Assignment cVardeclAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVardeclTypedVarDeclarationParserRuleCall_0 = (RuleCall)cVardeclAssignment.eContents().get(0);
		
		//QualifiedParameterReference:
		//	vardecl=TypedVarDeclaration;
		public ParserRule getRule() { return rule; }

		//vardecl=TypedVarDeclaration
		public Assignment getVardeclAssignment() { return cVardeclAssignment; }

		//TypedVarDeclaration
		public RuleCall getVardeclTypedVarDeclarationParserRuleCall_0() { return cVardeclTypedVarDeclarationParserRuleCall_0; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTriggerRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTriggerRulesQualifiedRuleReferenceParserRuleCall_2_0 = (RuleCall)cTriggerRulesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTriggerRulesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTriggerRulesQualifiedRuleReferenceParserRuleCall_3_1_0 = (RuleCall)cTriggerRulesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cWithAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cWithBlockParserRuleCall_5_1_0 = (RuleCall)cWithAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWhenKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cWhenAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cWhenExpressionParserRuleCall_6_2_0 = (RuleCall)cWhenAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//// Trigger
		//Trigger:
		//	"trigger" "(" triggerRules+=QualifiedRuleReference ("," triggerRules+=QualifiedRuleReference)* ")" ("with"
		//	^with=Block)? ("when" "(" when=Expression ")")?;
		public ParserRule getRule() { return rule; }

		//"trigger" "(" triggerRules+=QualifiedRuleReference ("," triggerRules+=QualifiedRuleReference)* ")" ("with" ^with=Block)?
		//("when" "(" when=Expression ")")?
		public Group getGroup() { return cGroup; }

		//"trigger"
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//triggerRules+=QualifiedRuleReference
		public Assignment getTriggerRulesAssignment_2() { return cTriggerRulesAssignment_2; }

		//QualifiedRuleReference
		public RuleCall getTriggerRulesQualifiedRuleReferenceParserRuleCall_2_0() { return cTriggerRulesQualifiedRuleReferenceParserRuleCall_2_0; }

		//("," triggerRules+=QualifiedRuleReference)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//triggerRules+=QualifiedRuleReference
		public Assignment getTriggerRulesAssignment_3_1() { return cTriggerRulesAssignment_3_1; }

		//QualifiedRuleReference
		public RuleCall getTriggerRulesQualifiedRuleReferenceParserRuleCall_3_1_0() { return cTriggerRulesQualifiedRuleReferenceParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("with" ^with=Block)?
		public Group getGroup_5() { return cGroup_5; }

		//"with"
		public Keyword getWithKeyword_5_0() { return cWithKeyword_5_0; }

		//^with=Block
		public Assignment getWithAssignment_5_1() { return cWithAssignment_5_1; }

		//Block
		public RuleCall getWithBlockParserRuleCall_5_1_0() { return cWithBlockParserRuleCall_5_1_0; }

		//("when" "(" when=Expression ")")?
		public Group getGroup_6() { return cGroup_6; }

		//"when"
		public Keyword getWhenKeyword_6_0() { return cWhenKeyword_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }

		//when=Expression
		public Assignment getWhenAssignment_6_2() { return cWhenAssignment_6_2; }

		//Expression
		public RuleCall getWhenExpressionParserRuleCall_6_2_0() { return cWhenExpressionParserRuleCall_6_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
	}

	public class JavaSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJavaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//JavaSpec:
		//	"java" "(" properties+=Property ("," properties+=Property)* ")";
		public ParserRule getRule() { return rule; }

		//"java" "(" properties+=Property ("," properties+=Property)* ")"
		public Group getGroup() { return cGroup; }

		//"java"
		public Keyword getJavaKeyword_0() { return cJavaKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//properties+=Property
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0() { return cPropertiesPropertyParserRuleCall_2_0; }

		//("," properties+=Property)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//properties+=Property
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_1_0() { return cPropertiesPropertyParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFormalParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReturnParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Parameter:
		//	FormalParameter | ReturnParameter;
		public ParserRule getRule() { return rule; }

		//FormalParameter | ReturnParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//FormalParameter
		public RuleCall getFormalParameterParserRuleCall_0() { return cFormalParameterParserRuleCall_0; }

		//ReturnParameter
		public RuleCall getReturnParameterParserRuleCall_1() { return cReturnParameterParserRuleCall_1; }
	}

	public class FormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierFormalParameterModifierEnumRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Assignment cVardeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVardeclTypedVarDeclarationParserRuleCall_2_0 = (RuleCall)cVardeclAssignment_2.eContents().get(0);
		
		//FormalParameter:
		//	annotations+=Annotation* modifier=FormalParameterModifier? vardecl=TypedVarDeclaration;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* modifier=FormalParameterModifier? vardecl=TypedVarDeclaration
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//modifier=FormalParameterModifier?
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//FormalParameterModifier
		public RuleCall getModifierFormalParameterModifierEnumRuleCall_1_0() { return cModifierFormalParameterModifierEnumRuleCall_1_0; }

		//vardecl=TypedVarDeclaration
		public Assignment getVardeclAssignment_2() { return cVardeclAssignment_2; }

		//TypedVarDeclaration
		public RuleCall getVardeclTypedVarDeclarationParserRuleCall_2_0() { return cVardeclTypedVarDeclarationParserRuleCall_2_0; }
	}

	public class ReturnParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierReturnParameterModifierEnumRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Assignment cVardeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVardeclTypedVarDeclarationParserRuleCall_2_0 = (RuleCall)cVardeclAssignment_2.eContents().get(0);
		
		//ReturnParameter:
		//	annotations+=Annotation* modifier=ReturnParameterModifier? vardecl=TypedVarDeclaration;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* modifier=ReturnParameterModifier? vardecl=TypedVarDeclaration
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//modifier=ReturnParameterModifier?
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//ReturnParameterModifier
		public RuleCall getModifierReturnParameterModifierEnumRuleCall_1_0() { return cModifierReturnParameterModifierEnumRuleCall_1_0; }

		//vardecl=TypedVarDeclaration
		public Assignment getVardeclAssignment_2() { return cVardeclAssignment_2; }

		//TypedVarDeclaration
		public RuleCall getVardeclTypedVarDeclarationParserRuleCall_2_0() { return cVardeclTypedVarDeclarationParserRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCollectionTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//	PrimitiveType | CollectionType | ReferenceType;
		public ParserRule getRule() { return rule; }

		//PrimitiveType | CollectionType | ReferenceType
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }

		//CollectionType
		public RuleCall getCollectionTypeParserRuleCall_1() { return cCollectionTypeParserRuleCall_1; }

		//ReferenceType
		public RuleCall getReferenceTypeParserRuleCall_2() { return cReferenceTypeParserRuleCall_2; }
	}

	public class ReferenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetamodelDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMetamodelDeclarationMetamodelDeclarationCrossReference_0_0 = (CrossReference)cMetamodelDeclarationAssignment_0.eContents().get(0);
		private final RuleCall cMetamodelDeclarationMetamodelDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cMetamodelDeclarationMetamodelDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEClassifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEClassifierEClassifierCrossReference_2_0 = (CrossReference)cEClassifierAssignment_2.eContents().get(0);
		private final RuleCall cEClassifierEClassifierIDTerminalRuleCall_2_0_1 = (RuleCall)cEClassifierEClassifierCrossReference_2_0.eContents().get(1);
		
		//ReferenceType:
		//	metamodelDeclaration=[MetamodelDeclaration] "::" eClassifier=[ecore::EClassifier];
		public ParserRule getRule() { return rule; }

		//metamodelDeclaration=[MetamodelDeclaration] "::" eClassifier=[ecore::EClassifier]
		public Group getGroup() { return cGroup; }

		//metamodelDeclaration=[MetamodelDeclaration]
		public Assignment getMetamodelDeclarationAssignment_0() { return cMetamodelDeclarationAssignment_0; }

		//[MetamodelDeclaration]
		public CrossReference getMetamodelDeclarationMetamodelDeclarationCrossReference_0_0() { return cMetamodelDeclarationMetamodelDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getMetamodelDeclarationMetamodelDeclarationIDTerminalRuleCall_0_0_1() { return cMetamodelDeclarationMetamodelDeclarationIDTerminalRuleCall_0_0_1; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//eClassifier=[ecore::EClassifier]
		public Assignment getEClassifierAssignment_2() { return cEClassifierAssignment_2; }

		//[ecore::EClassifier]
		public CrossReference getEClassifierEClassifierCrossReference_2_0() { return cEClassifierEClassifierCrossReference_2_0; }

		//ID
		public RuleCall getEClassifierEClassifierIDTerminalRuleCall_2_0_1() { return cEClassifierEClassifierIDTerminalRuleCall_2_0_1; }
	}

	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Assignment cPrimitiveTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypePrimitiveTypeSpecEnumRuleCall_0 = (RuleCall)cPrimitiveTypeAssignment.eContents().get(0);
		
		//PrimitiveType:
		//	primitiveType=PrimitiveTypeSpec;
		public ParserRule getRule() { return rule; }

		//primitiveType=PrimitiveTypeSpec
		public Assignment getPrimitiveTypeAssignment() { return cPrimitiveTypeAssignment; }

		//PrimitiveTypeSpec
		public RuleCall getPrimitiveTypePrimitiveTypeSpecEnumRuleCall_0() { return cPrimitiveTypePrimitiveTypeSpecEnumRuleCall_0; }
	}

	public class CollectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCollectionTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCollectionTypeCollectionTypeSpecEnumRuleCall_0_0 = (RuleCall)cCollectionTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeParAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeParTypeParserRuleCall_1_1_0 = (RuleCall)cTypeParAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//CollectionType:
		//	collectionType=CollectionTypeSpec ("(" typePar=Type ")")?;
		public ParserRule getRule() { return rule; }

		//collectionType=CollectionTypeSpec ("(" typePar=Type ")")?
		public Group getGroup() { return cGroup; }

		//collectionType=CollectionTypeSpec
		public Assignment getCollectionTypeAssignment_0() { return cCollectionTypeAssignment_0; }

		//CollectionTypeSpec
		public RuleCall getCollectionTypeCollectionTypeSpecEnumRuleCall_0_0() { return cCollectionTypeCollectionTypeSpecEnumRuleCall_0_0; }

		//("(" typePar=Type ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//typePar=Type
		public Assignment getTypeParAssignment_1_1() { return cTypeParAssignment_1_1; }

		//Type
		public RuleCall getTypeParTypeParserRuleCall_1_1_0() { return cTypeParTypeParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// -----------------------------------------------------------------------------
		//// Rule Body with Statements	
		//// -----------------------------------------------------------------------------
		//Block:
		//	{Block} "{" statements+=BlockStatement* "}";
		public ParserRule getRule() { return rule; }

		//{Block} "{" statements+=BlockStatement* "}"
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalVariableDeclarationStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BlockStatement:
		//	LocalVariableDeclarationStatement | Statement;
		public ParserRule getRule() { return rule; }

		//LocalVariableDeclarationStatement | Statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalVariableDeclarationStatement
		public RuleCall getLocalVariableDeclarationStatementParserRuleCall_0() { return cLocalVariableDeclarationStatementParserRuleCall_0; }

		//Statement
		public RuleCall getStatementParserRuleCall_1() { return cStatementParserRuleCall_1; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReturnStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDoStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBreakStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cThrowStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTryStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cExpressionStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEmptyStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cBlockParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Statement:
		//	IfStatement // ForEachStatement |
		//	| ReturnStatement | WhileStatement | DoStatement | ForStatement | BreakStatement | ThrowStatement | TryStatement |
		//	ExpressionStatement | EmptyStatement | Block;
		public ParserRule getRule() { return rule; }

		//IfStatement // ForEachStatement |
		//| ReturnStatement | WhileStatement | DoStatement | ForStatement | BreakStatement | ThrowStatement | TryStatement |
		//ExpressionStatement | EmptyStatement | Block
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }

		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_1() { return cReturnStatementParserRuleCall_1; }

		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_2() { return cWhileStatementParserRuleCall_2; }

		//DoStatement
		public RuleCall getDoStatementParserRuleCall_3() { return cDoStatementParserRuleCall_3; }

		//ForStatement
		public RuleCall getForStatementParserRuleCall_4() { return cForStatementParserRuleCall_4; }

		//BreakStatement
		public RuleCall getBreakStatementParserRuleCall_5() { return cBreakStatementParserRuleCall_5; }

		//ThrowStatement
		public RuleCall getThrowStatementParserRuleCall_6() { return cThrowStatementParserRuleCall_6; }

		//TryStatement
		public RuleCall getTryStatementParserRuleCall_7() { return cTryStatementParserRuleCall_7; }

		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_8() { return cExpressionStatementParserRuleCall_8; }

		//EmptyStatement
		public RuleCall getEmptyStatementParserRuleCall_9() { return cEmptyStatementParserRuleCall_9; }

		//Block
		public RuleCall getBlockParserRuleCall_10() { return cBlockParserRuleCall_10; }
	}

	public class LocalVariableDeclarationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVariableDeclarationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocalVariableDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocalVariableDeclarationLocalVariableDeclarationParserRuleCall_0_0 = (RuleCall)cLocalVariableDeclarationAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LocalVariableDeclarationStatement:
		//	localVariableDeclaration=LocalVariableDeclaration ";";
		public ParserRule getRule() { return rule; }

		//localVariableDeclaration=LocalVariableDeclaration ";"
		public Group getGroup() { return cGroup; }

		//localVariableDeclaration=LocalVariableDeclaration
		public Assignment getLocalVariableDeclarationAssignment_0() { return cLocalVariableDeclarationAssignment_0; }

		//LocalVariableDeclaration
		public RuleCall getLocalVariableDeclarationLocalVariableDeclarationParserRuleCall_0_0() { return cLocalVariableDeclarationLocalVariableDeclarationParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class LocalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVardeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVardeclTypedVarDeclarationParserRuleCall_0_0 = (RuleCall)cVardeclAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//LocalVariableDeclaration:
		//	vardecl=TypedVarDeclaration ("=" expression=Expression)?;
		public ParserRule getRule() { return rule; }

		//vardecl=TypedVarDeclaration ("=" expression=Expression)?
		public Group getGroup() { return cGroup; }

		//vardecl=TypedVarDeclaration
		public Assignment getVardeclAssignment_0() { return cVardeclAssignment_0; }

		//TypedVarDeclaration
		public RuleCall getVardeclTypedVarDeclarationParserRuleCall_0_0() { return cVardeclTypedVarDeclarationParserRuleCall_0_0; }

		//("=" expression=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}

	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypedVarDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInferredVarDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VarDeclaration:
		//	TypedVarDeclaration | InferredVarDeclaration;
		public ParserRule getRule() { return rule; }

		//TypedVarDeclaration | InferredVarDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypedVarDeclaration
		public RuleCall getTypedVarDeclarationParserRuleCall_0() { return cTypedVarDeclarationParserRuleCall_0; }

		//InferredVarDeclaration
		public RuleCall getInferredVarDeclarationParserRuleCall_1() { return cInferredVarDeclarationParserRuleCall_1; }
	}

	public class TypedVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TypedVarDeclaration:
		//	type=Type name=ID;
		public ParserRule getRule() { return rule; }

		//type=Type name=ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class InferredVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InferredVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//InferredVarDeclaration:
		//	type=Type? name=ID;
		public ParserRule getRule() { return rule; }

		//type=Type? name=ID
		public Group getGroup() { return cGroup; }

		//type=Type?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementExpressionStatementExpressionParserRuleCall_0_0 = (RuleCall)cStatementExpressionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExpressionStatement:
		//	statementExpression=StatementExpression ";";
		public ParserRule getRule() { return rule; }

		//statementExpression=StatementExpression ";"
		public Group getGroup() { return cGroup; }

		//statementExpression=StatementExpression
		public Assignment getStatementExpressionAssignment_0() { return cStatementExpressionAssignment_0; }

		//StatementExpression
		public RuleCall getStatementExpressionStatementExpressionParserRuleCall_0_0() { return cStatementExpressionStatementExpressionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class StatementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassInstanceCreationExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleInvocationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRuleInvocationSuperParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStaticAccessParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cVariableAccessParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Group cGroup_4_1_0 = (Group)cAlternatives_4_1.eContents().get(0);
		private final Action cAssignmentLhsAction_4_1_0_0 = (Action)cGroup_4_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_4_1_0_1 = (Assignment)cGroup_4_1_0.eContents().get(1);
		private final RuleCall cOperatorAssignmentOperatorEnumRuleCall_4_1_0_1_0 = (RuleCall)cOperatorAssignment_4_1_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1_0_2 = (Assignment)cGroup_4_1_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_4_1_0_2_0 = (RuleCall)cExpressionAssignment_4_1_0_2.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cAlternatives_4_1.eContents().get(1);
		private final Action cAssignmentLhsAction_4_1_1_0 = (Action)cGroup_4_1_1.eContents().get(0);
		private final Group cGroup_4_1_1_1 = (Group)cGroup_4_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_1_0 = (Keyword)cGroup_4_1_1_1.eContents().get(0);
		private final Assignment cLhsAssignment_4_1_1_1_1 = (Assignment)cGroup_4_1_1_1.eContents().get(1);
		private final RuleCall cLhsVariableAccessParserRuleCall_4_1_1_1_1_0 = (RuleCall)cLhsAssignment_4_1_1_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_4_1_1_2 = (Assignment)cGroup_4_1_1.eContents().get(2);
		private final RuleCall cOperatorAssignmentOperatorEnumRuleCall_4_1_1_2_0 = (RuleCall)cOperatorAssignment_4_1_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1_1_3 = (Assignment)cGroup_4_1_1.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_4_1_1_3_0 = (RuleCall)cExpressionAssignment_4_1_1_3.eContents().get(0);
		
		//StatementExpression:
		//	ClassInstanceCreationExpression | RuleInvocation | RuleInvocationSuper | StaticAccess | VariableAccess
		//	({Assignment.lhs+=current} operator=AssignmentOperator expression=Expression | {Assignment.lhs+=current} (","
		//	lhs+=VariableAccess)+ operator=AssignmentOperator expression=Expression)?;
		public ParserRule getRule() { return rule; }

		//ClassInstanceCreationExpression | RuleInvocation | RuleInvocationSuper | StaticAccess | VariableAccess
		//({Assignment.lhs+=current} operator=AssignmentOperator expression=Expression | {Assignment.lhs+=current} (","
		//lhs+=VariableAccess)+ operator=AssignmentOperator expression=Expression)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassInstanceCreationExpression
		public RuleCall getClassInstanceCreationExpressionParserRuleCall_0() { return cClassInstanceCreationExpressionParserRuleCall_0; }

		//RuleInvocation
		public RuleCall getRuleInvocationParserRuleCall_1() { return cRuleInvocationParserRuleCall_1; }

		//RuleInvocationSuper
		public RuleCall getRuleInvocationSuperParserRuleCall_2() { return cRuleInvocationSuperParserRuleCall_2; }

		//StaticAccess
		public RuleCall getStaticAccessParserRuleCall_3() { return cStaticAccessParserRuleCall_3; }

		//VariableAccess ({Assignment.lhs+=current} operator=AssignmentOperator expression=Expression | {Assignment.lhs+=current}
		//("," lhs+=VariableAccess)+ operator=AssignmentOperator expression=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//VariableAccess
		public RuleCall getVariableAccessParserRuleCall_4_0() { return cVariableAccessParserRuleCall_4_0; }

		//({Assignment.lhs+=current} operator=AssignmentOperator expression=Expression | {Assignment.lhs+=current} (","
		//lhs+=VariableAccess)+ operator=AssignmentOperator expression=Expression)?
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//{Assignment.lhs+=current} operator=AssignmentOperator expression=Expression
		public Group getGroup_4_1_0() { return cGroup_4_1_0; }

		//{Assignment.lhs+=current}
		public Action getAssignmentLhsAction_4_1_0_0() { return cAssignmentLhsAction_4_1_0_0; }

		//operator=AssignmentOperator
		public Assignment getOperatorAssignment_4_1_0_1() { return cOperatorAssignment_4_1_0_1; }

		//AssignmentOperator
		public RuleCall getOperatorAssignmentOperatorEnumRuleCall_4_1_0_1_0() { return cOperatorAssignmentOperatorEnumRuleCall_4_1_0_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_4_1_0_2() { return cExpressionAssignment_4_1_0_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_1_0_2_0() { return cExpressionExpressionParserRuleCall_4_1_0_2_0; }

		//{Assignment.lhs+=current} ("," lhs+=VariableAccess)+ operator=AssignmentOperator expression=Expression
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//{Assignment.lhs+=current}
		public Action getAssignmentLhsAction_4_1_1_0() { return cAssignmentLhsAction_4_1_1_0; }

		//("," lhs+=VariableAccess)+
		public Group getGroup_4_1_1_1() { return cGroup_4_1_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_1_0() { return cCommaKeyword_4_1_1_1_0; }

		//lhs+=VariableAccess
		public Assignment getLhsAssignment_4_1_1_1_1() { return cLhsAssignment_4_1_1_1_1; }

		//VariableAccess
		public RuleCall getLhsVariableAccessParserRuleCall_4_1_1_1_1_0() { return cLhsVariableAccessParserRuleCall_4_1_1_1_1_0; }

		//operator=AssignmentOperator
		public Assignment getOperatorAssignment_4_1_1_2() { return cOperatorAssignment_4_1_1_2; }

		//AssignmentOperator
		public RuleCall getOperatorAssignmentOperatorEnumRuleCall_4_1_1_2_0() { return cOperatorAssignmentOperatorEnumRuleCall_4_1_1_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_4_1_1_3() { return cExpressionAssignment_4_1_1_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_1_1_3_0() { return cExpressionExpressionParserRuleCall_4_1_1_3_0; }
	}

	public class EmptyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmptyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EmptyStatement:
		//	{EmptyStatement} ";";
		public ParserRule getRule() { return rule; }

		//{EmptyStatement} ";"
		public Group getGroup() { return cGroup; }

		//{EmptyStatement}
		public Action getEmptyStatementAction_0() { return cEmptyStatementAction_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnStatement:
		//	{ReturnStatement} "return" expression=Expression? ";";
		public ParserRule getRule() { return rule; }

		//{ReturnStatement} "return" expression=Expression? ";"
		public Group getGroup() { return cGroup; }

		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTrueStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTrueStatementStatementParserRuleCall_4_0 = (RuleCall)cTrueStatementAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementStatementParserRuleCall_5_1_0 = (RuleCall)cElseStatementAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//	"if" "(" expression=Expression ")" trueStatement=Statement ("else" elseStatement=Statement)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" expression=Expression ")" trueStatement=Statement ("else" elseStatement=Statement)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//trueStatement=Statement
		public Assignment getTrueStatementAssignment_4() { return cTrueStatementAssignment_4; }

		//Statement
		public RuleCall getTrueStatementStatementParserRuleCall_4_0() { return cTrueStatementStatementParserRuleCall_4_0; }

		//("else" elseStatement=Statement)?
		public Group getGroup_5() { return cGroup_5; }

		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseStatement=Statement
		public Assignment getElseStatementAssignment_5_1() { return cElseStatementAssignment_5_1; }

		//Statement
		public RuleCall getElseStatementStatementParserRuleCall_5_1_0() { return cElseStatementStatementParserRuleCall_5_1_0; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//WhileStatement:
		//	"while" "(" expression=Expression ")" statement=Statement;
		public ParserRule getRule() { return rule; }

		//"while" "(" expression=Expression ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
	}

	public class DoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DoStatement:
		//	"do" statement=Statement "while" "(" expression=Expression ")" ";";
		public ParserRule getRule() { return rule; }

		//"do" statement=Statement "while" "(" expression=Expression ")" ";"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }

		//"while"
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ForInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForInitAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStatementExpressionsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cStatementExpressionsStatementExpressionParserRuleCall_1_0_0 = (RuleCall)cStatementExpressionsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cVarDeclarationsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cVarDeclarationsLocalVariableDeclarationParserRuleCall_1_1_0_0 = (RuleCall)cVarDeclarationsAssignment_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1_0_0 = (Keyword)cGroup_1_1_1_0.eContents().get(0);
		private final Assignment cStatementExpressionsAssignment_1_1_1_0_1 = (Assignment)cGroup_1_1_1_0.eContents().get(1);
		private final RuleCall cStatementExpressionsStatementExpressionParserRuleCall_1_1_1_0_1_0 = (RuleCall)cStatementExpressionsAssignment_1_1_1_0_1.eContents().get(0);
		private final Assignment cVarDeclarationsAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cVarDeclarationsLocalVariableDeclarationParserRuleCall_1_1_1_1_0 = (RuleCall)cVarDeclarationsAssignment_1_1_1_1.eContents().get(0);
		
		//ForInit:
		//	{ForInit} (statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration (","
		//	statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration)*)?;
		public ParserRule getRule() { return rule; }

		//{ForInit} (statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration (","
		//statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration)*)?
		public Group getGroup() { return cGroup; }

		//{ForInit}
		public Action getForInitAction_0() { return cForInitAction_0; }

		//(statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration (","
		//statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration)*)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//statementExpressions+=StatementExpression
		public Assignment getStatementExpressionsAssignment_1_0() { return cStatementExpressionsAssignment_1_0; }

		//StatementExpression
		public RuleCall getStatementExpressionsStatementExpressionParserRuleCall_1_0_0() { return cStatementExpressionsStatementExpressionParserRuleCall_1_0_0; }

		//varDeclarations+=LocalVariableDeclaration ("," statementExpressions+=StatementExpression |
		//varDeclarations+=LocalVariableDeclaration)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//varDeclarations+=LocalVariableDeclaration
		public Assignment getVarDeclarationsAssignment_1_1_0() { return cVarDeclarationsAssignment_1_1_0; }

		//LocalVariableDeclaration
		public RuleCall getVarDeclarationsLocalVariableDeclarationParserRuleCall_1_1_0_0() { return cVarDeclarationsLocalVariableDeclarationParserRuleCall_1_1_0_0; }

		//("," statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration)*
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//"," statementExpressions+=StatementExpression
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }

		//","
		public Keyword getCommaKeyword_1_1_1_0_0() { return cCommaKeyword_1_1_1_0_0; }

		//statementExpressions+=StatementExpression
		public Assignment getStatementExpressionsAssignment_1_1_1_0_1() { return cStatementExpressionsAssignment_1_1_1_0_1; }

		//StatementExpression
		public RuleCall getStatementExpressionsStatementExpressionParserRuleCall_1_1_1_0_1_0() { return cStatementExpressionsStatementExpressionParserRuleCall_1_1_1_0_1_0; }

		//varDeclarations+=LocalVariableDeclaration
		public Assignment getVarDeclarationsAssignment_1_1_1_1() { return cVarDeclarationsAssignment_1_1_1_1; }

		//LocalVariableDeclaration
		public RuleCall getVarDeclarationsLocalVariableDeclarationParserRuleCall_1_1_1_1_0() { return cVarDeclarationsLocalVariableDeclarationParserRuleCall_1_1_1_1_0; }
	}

	public class ForUpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForUpdate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementExpressionStatementExpressionParserRuleCall_0_0 = (RuleCall)cStatementExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatementExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementExpressionStatementExpressionParserRuleCall_1_1_0 = (RuleCall)cStatementExpressionAssignment_1_1.eContents().get(0);
		
		//ForUpdate:
		//	statementExpression+=StatementExpression ("," statementExpression+=StatementExpression)*;
		public ParserRule getRule() { return rule; }

		//statementExpression+=StatementExpression ("," statementExpression+=StatementExpression)*
		public Group getGroup() { return cGroup; }

		//statementExpression+=StatementExpression
		public Assignment getStatementExpressionAssignment_0() { return cStatementExpressionAssignment_0; }

		//StatementExpression
		public RuleCall getStatementExpressionStatementExpressionParserRuleCall_0_0() { return cStatementExpressionStatementExpressionParserRuleCall_0_0; }

		//("," statementExpression+=StatementExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//statementExpression+=StatementExpression
		public Assignment getStatementExpressionAssignment_1_1() { return cStatementExpressionAssignment_1_1; }

		//StatementExpression
		public RuleCall getStatementExpressionStatementExpressionParserRuleCall_1_1_0() { return cStatementExpressionStatementExpressionParserRuleCall_1_1_0; }
	}

	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cLoopVariableAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cLoopVariableLoopVariableParserRuleCall_2_0_0_0 = (RuleCall)cLoopVariableAssignment_2_0_0.eContents().get(0);
		private final Keyword cColonKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cExpressionAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0_2_0 = (RuleCall)cExpressionAssignment_2_0_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cForInitAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cForInitForInitParserRuleCall_2_1_0_0 = (RuleCall)cForInitAssignment_2_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cExpressionAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_2_0 = (RuleCall)cExpressionAssignment_2_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Assignment cForUpdateAssignment_2_1_4 = (Assignment)cGroup_2_1.eContents().get(4);
		private final RuleCall cForUpdateForUpdateParserRuleCall_2_1_4_0 = (RuleCall)cForUpdateAssignment_2_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//ForStatement:
		//	"for" "(" (loopVariable=LoopVariable ":" expression=Expression | forInit=ForInit? ";" expression=Expression? ";"
		//	forUpdate=ForUpdate?) ")" statement=Statement;
		public ParserRule getRule() { return rule; }

		//"for" "(" (loopVariable=LoopVariable ":" expression=Expression | forInit=ForInit? ";" expression=Expression? ";"
		//forUpdate=ForUpdate?) ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//loopVariable=LoopVariable ":" expression=Expression | forInit=ForInit? ";" expression=Expression? ";"
		//forUpdate=ForUpdate?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//loopVariable=LoopVariable ":" expression=Expression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//loopVariable=LoopVariable
		public Assignment getLoopVariableAssignment_2_0_0() { return cLoopVariableAssignment_2_0_0; }

		//LoopVariable
		public RuleCall getLoopVariableLoopVariableParserRuleCall_2_0_0_0() { return cLoopVariableLoopVariableParserRuleCall_2_0_0_0; }

		//":"
		public Keyword getColonKeyword_2_0_1() { return cColonKeyword_2_0_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_0_2() { return cExpressionAssignment_2_0_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0_2_0() { return cExpressionExpressionParserRuleCall_2_0_2_0; }

		//forInit=ForInit? ";" expression=Expression? ";" forUpdate=ForUpdate?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//forInit=ForInit?
		public Assignment getForInitAssignment_2_1_0() { return cForInitAssignment_2_1_0; }

		//ForInit
		public RuleCall getForInitForInitParserRuleCall_2_1_0_0() { return cForInitForInitParserRuleCall_2_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1() { return cSemicolonKeyword_2_1_1; }

		//expression=Expression?
		public Assignment getExpressionAssignment_2_1_2() { return cExpressionAssignment_2_1_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_2_0() { return cExpressionExpressionParserRuleCall_2_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_3() { return cSemicolonKeyword_2_1_3; }

		//forUpdate=ForUpdate?
		public Assignment getForUpdateAssignment_2_1_4() { return cForUpdateAssignment_2_1_4; }

		//ForUpdate
		public RuleCall getForUpdateForUpdateParserRuleCall_2_1_4_0() { return cForUpdateForUpdateParserRuleCall_2_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
	}

	public class LoopVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoopVariable");
		private final Assignment cVardeclAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVardeclVarDeclarationParserRuleCall_0 = (RuleCall)cVardeclAssignment.eContents().get(0);
		
		//LoopVariable:
		//	vardecl=VarDeclaration;
		public ParserRule getRule() { return rule; }

		//vardecl=VarDeclaration
		public Assignment getVardeclAssignment() { return cVardeclAssignment; }

		//VarDeclaration
		public RuleCall getVardeclVarDeclarationParserRuleCall_0() { return cVardeclVarDeclarationParserRuleCall_0; }
	}

	public class BreakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BreakStatement:
		//	{BreakStatement} "break" ";";
		public ParserRule getRule() { return rule; }

		//{BreakStatement} "break" ";"
		public Group getGroup() { return cGroup; }

		//{BreakStatement}
		public Action getBreakStatementAction_0() { return cBreakStatementAction_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ThrowStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThrowStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThrowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ThrowStatement:
		//	"throw" expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//"throw" expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//"throw"
		public Keyword getThrowKeyword_0() { return cThrowKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TryStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TryStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTryBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTryBlockBlockParserRuleCall_1_0 = (RuleCall)cTryBlockAssignment_1.eContents().get(0);
		private final Assignment cCatchesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCatchesCatchParserRuleCall_2_0 = (RuleCall)cCatchesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFinallyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFinallyBlockAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFinallyBlockBlockParserRuleCall_3_1_0 = (RuleCall)cFinallyBlockAssignment_3_1.eContents().get(0);
		
		//TryStatement:
		//	"try" tryBlock=Block catches+=Catch* ("finally" finallyBlock=Block)?;
		public ParserRule getRule() { return rule; }

		//"try" tryBlock=Block catches+=Catch* ("finally" finallyBlock=Block)?
		public Group getGroup() { return cGroup; }

		//"try"
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }

		//tryBlock=Block
		public Assignment getTryBlockAssignment_1() { return cTryBlockAssignment_1; }

		//Block
		public RuleCall getTryBlockBlockParserRuleCall_1_0() { return cTryBlockBlockParserRuleCall_1_0; }

		//catches+=Catch*
		public Assignment getCatchesAssignment_2() { return cCatchesAssignment_2; }

		//Catch
		public RuleCall getCatchesCatchParserRuleCall_2_0() { return cCatchesCatchParserRuleCall_2_0; }

		//("finally" finallyBlock=Block)?
		public Group getGroup_3() { return cGroup_3; }

		//"finally"
		public Keyword getFinallyKeyword_3_0() { return cFinallyKeyword_3_0; }

		//finallyBlock=Block
		public Assignment getFinallyBlockAssignment_3_1() { return cFinallyBlockAssignment_3_1; }

		//Block
		public RuleCall getFinallyBlockBlockParserRuleCall_3_1_0() { return cFinallyBlockBlockParserRuleCall_3_1_0; }
	}

	public class CatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Catch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormalParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalParameterFormalParameterParserRuleCall_2_0 = (RuleCall)cFormalParameterAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//Catch:
		//	"catch" "(" formalParameter=FormalParameter ")" block=Block;
		public ParserRule getRule() { return rule; }

		//"catch" "(" formalParameter=FormalParameter ")" block=Block
		public Group getGroup() { return cGroup; }

		//"catch"
		public Keyword getCatchKeyword_0() { return cCatchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//formalParameter=FormalParameter
		public Assignment getFormalParameterAssignment_2() { return cFormalParameterAssignment_2; }

		//FormalParameter
		public RuleCall getFormalParameterFormalParameterParserRuleCall_2_0() { return cFormalParameterFormalParameterParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//block=Block
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cExpression_10ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// -----------------------------------------------------------------------------
		//// Expressions	
		//// -----------------------------------------------------------------------------
		//Expression:
		//	Expression_10;
		public ParserRule getRule() { return rule; }

		//Expression_10
		public RuleCall getExpression_10ParserRuleCall() { return cExpression_10ParserRuleCall; }
	}

	public class Expression_10Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_10");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIteratorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVariableLoopVariableParserRuleCall_0_1_0 = (RuleCall)cVariableAssignment_0_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExpressionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpressionExpression_1ParserRuleCall_0_3_0 = (RuleCall)cExpressionAssignment_0_3.eContents().get(0);
		private final RuleCall cExpression_1ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Iterator Expression, e.g., as in "collect(e|e.name)"
		//Expression_10 returns Expression:
		//	{IteratorExpression} variable=LoopVariable "|" expression=Expression_1 | Expression_1;
		public ParserRule getRule() { return rule; }

		//{IteratorExpression} variable=LoopVariable "|" expression=Expression_1 | Expression_1
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IteratorExpression} variable=LoopVariable "|" expression=Expression_1
		public Group getGroup_0() { return cGroup_0; }

		//{IteratorExpression}
		public Action getIteratorExpressionAction_0_0() { return cIteratorExpressionAction_0_0; }

		//variable=LoopVariable
		public Assignment getVariableAssignment_0_1() { return cVariableAssignment_0_1; }

		//LoopVariable
		public RuleCall getVariableLoopVariableParserRuleCall_0_1_0() { return cVariableLoopVariableParserRuleCall_0_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_0_2() { return cVerticalLineKeyword_0_2; }

		//expression=Expression_1
		public Assignment getExpressionAssignment_0_3() { return cExpressionAssignment_0_3; }

		//Expression_1
		public RuleCall getExpressionExpression_1ParserRuleCall_0_3_0() { return cExpressionExpression_1ParserRuleCall_0_3_0; }

		//Expression_1
		public RuleCall getExpression_1ParserRuleCall_1() { return cExpression_1ParserRuleCall_1; }
	}

	public class Expression_1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBooleanExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpBooleanOperatorEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsExpression_2ParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		/// * *************
		// * Infix expression:
		// *************** * / // Boolean operations	
		//Expression_1 returns Expression:
		//	Expression_2 ({BooleanExpression.lhs=current} op=BooleanOperator rhs=Expression_2)*;
		public ParserRule getRule() { return rule; }

		//Expression_2 ({BooleanExpression.lhs=current} op=BooleanOperator rhs=Expression_2)*
		public Group getGroup() { return cGroup; }

		//Expression_2
		public RuleCall getExpression_2ParserRuleCall_0() { return cExpression_2ParserRuleCall_0; }

		//({BooleanExpression.lhs=current} op=BooleanOperator rhs=Expression_2)*
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanExpression.lhs=current}
		public Action getBooleanExpressionLhsAction_1_0() { return cBooleanExpressionLhsAction_1_0; }

		//op=BooleanOperator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//BooleanOperator
		public RuleCall getOpBooleanOperatorEnumRuleCall_1_1_0() { return cOpBooleanOperatorEnumRuleCall_1_1_0; }

		//rhs=Expression_2
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//Expression_2
		public RuleCall getRhsExpression_2ParserRuleCall_1_2_0() { return cRhsExpression_2ParserRuleCall_1_2_0; }
	}

	public class Expression_2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpEqualityOperatorEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsExpression_3ParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//// Equality Expression
		//Expression_2 returns Expression:
		//	Expression_3 ({EqualityExpression.lhs=current} op=EqualityOperator rhs=Expression_3)*;
		public ParserRule getRule() { return rule; }

		//Expression_3 ({EqualityExpression.lhs=current} op=EqualityOperator rhs=Expression_3)*
		public Group getGroup() { return cGroup; }

		//Expression_3
		public RuleCall getExpression_3ParserRuleCall_0() { return cExpression_3ParserRuleCall_0; }

		//({EqualityExpression.lhs=current} op=EqualityOperator rhs=Expression_3)*
		public Group getGroup_1() { return cGroup_1; }

		//{EqualityExpression.lhs=current}
		public Action getEqualityExpressionLhsAction_1_0() { return cEqualityExpressionLhsAction_1_0; }

		//op=EqualityOperator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//EqualityOperator
		public RuleCall getOpEqualityOperatorEnumRuleCall_1_1_0() { return cOpEqualityOperatorEnumRuleCall_1_1_0; }

		//rhs=Expression_3
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//Expression_3
		public RuleCall getRhsExpression_3ParserRuleCall_1_2_0() { return cRhsExpression_3ParserRuleCall_1_2_0; }
	}

	public class Expression_3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_5ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpRelationalOperatorEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsExpression_5ParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//// Relational
		//Expression_3 returns Expression:
		//	Expression_5 ({RelationalExpression.lhs=current} op=RelationalOperator rhs=Expression_5)*;
		public ParserRule getRule() { return rule; }

		//Expression_5 ({RelationalExpression.lhs=current} op=RelationalOperator rhs=Expression_5)*
		public Group getGroup() { return cGroup; }

		//Expression_5
		public RuleCall getExpression_5ParserRuleCall_0() { return cExpression_5ParserRuleCall_0; }

		//({RelationalExpression.lhs=current} op=RelationalOperator rhs=Expression_5)*
		public Group getGroup_1() { return cGroup_1; }

		//{RelationalExpression.lhs=current}
		public Action getRelationalExpressionLhsAction_1_0() { return cRelationalExpressionLhsAction_1_0; }

		//op=RelationalOperator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//RelationalOperator
		public RuleCall getOpRelationalOperatorEnumRuleCall_1_1_0() { return cOpRelationalOperatorEnumRuleCall_1_1_0; }

		//rhs=Expression_5
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//Expression_5
		public RuleCall getRhsExpression_5ParserRuleCall_1_2_0() { return cRhsExpression_5ParserRuleCall_1_2_0; }
	}

	public class Expression_5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_6ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMathExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpMathOperatorEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsExpression_6ParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//// In-Expression
		////Expression_4 returns Expression:
		////	Expression_5
		////	({InExpression.lhs=current} "in" rhs=Expression_5)*;
		//// Math-Expression
		//Expression_5 returns Expression:
		//	Expression_6 ({MathExpression.lhs=current} op=MathOperator rhs=Expression_6)*;
		public ParserRule getRule() { return rule; }

		//Expression_6 ({MathExpression.lhs=current} op=MathOperator rhs=Expression_6)*
		public Group getGroup() { return cGroup; }

		//Expression_6
		public RuleCall getExpression_6ParserRuleCall_0() { return cExpression_6ParserRuleCall_0; }

		//({MathExpression.lhs=current} op=MathOperator rhs=Expression_6)*
		public Group getGroup_1() { return cGroup_1; }

		//{MathExpression.lhs=current}
		public Action getMathExpressionLhsAction_1_0() { return cMathExpressionLhsAction_1_0; }

		//op=MathOperator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//MathOperator
		public RuleCall getOpMathOperatorEnumRuleCall_1_1_0() { return cOpMathOperatorEnumRuleCall_1_1_0; }

		//rhs=Expression_6
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//Expression_6
		public RuleCall getRhsExpression_6ParserRuleCall_1_2_0() { return cRhsExpression_6ParserRuleCall_1_2_0; }
	}

	public class Expression_6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_6");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryCastExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_0_2_0 = (RuleCall)cTypeAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cExpressionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cExpressionExpression_7ParserRuleCall_0_4_0 = (RuleCall)cExpressionAssignment_0_4.eContents().get(0);
		private final RuleCall cExpression_7ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Unary expression:
		//Expression_6 returns Expression:
		//	{UnaryCastExpression} "(" type=Type ")" expression=Expression_7 | Expression_7;
		public ParserRule getRule() { return rule; }

		//{UnaryCastExpression} "(" type=Type ")" expression=Expression_7 | Expression_7
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryCastExpression} "(" type=Type ")" expression=Expression_7
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryCastExpression}
		public Action getUnaryCastExpressionAction_0_0() { return cUnaryCastExpressionAction_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//type=Type
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_2_0() { return cTypeTypeParserRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//expression=Expression_7
		public Assignment getExpressionAssignment_0_4() { return cExpressionAssignment_0_4; }

		//Expression_7
		public RuleCall getExpressionExpression_7ParserRuleCall_0_4_0() { return cExpressionExpression_7ParserRuleCall_0_4_0; }

		//Expression_7
		public RuleCall getExpression_7ParserRuleCall_1() { return cExpression_7ParserRuleCall_1; }
	}

	public class Expression_7Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_7");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpression_8ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryBooleanExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpression_8ParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//Expression_7 returns Expression:
		//	Expression_8 | {UnaryBooleanExpression} "!" expression=Expression_8;
		public ParserRule getRule() { return rule; }

		//Expression_8 | {UnaryBooleanExpression} "!" expression=Expression_8
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression_8
		public RuleCall getExpression_8ParserRuleCall_0() { return cExpression_8ParserRuleCall_0; }

		//{UnaryBooleanExpression} "!" expression=Expression_8
		public Group getGroup_1() { return cGroup_1; }

		//{UnaryBooleanExpression}
		public Action getUnaryBooleanExpressionAction_1_0() { return cUnaryBooleanExpressionAction_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//expression=Expression_8
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Expression_8
		public RuleCall getExpressionExpression_8ParserRuleCall_1_2_0() { return cExpressionExpression_8ParserRuleCall_1_2_0; }
	}

	public class Expression_8Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_8");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpression_9ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryMathExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpUnaryMathOperatorEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpression_9ParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//Expression_8 returns Expression:
		//	Expression_9 | {UnaryMathExpression} op=UnaryMathOperator expression=Expression_9;
		public ParserRule getRule() { return rule; }

		//Expression_9 | {UnaryMathExpression} op=UnaryMathOperator expression=Expression_9
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression_9
		public RuleCall getExpression_9ParserRuleCall_0() { return cExpression_9ParserRuleCall_0; }

		//{UnaryMathExpression} op=UnaryMathOperator expression=Expression_9
		public Group getGroup_1() { return cGroup_1; }

		//{UnaryMathExpression}
		public Action getUnaryMathExpressionAction_1_0() { return cUnaryMathExpressionAction_1_0; }

		//op=UnaryMathOperator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//UnaryMathOperator
		public RuleCall getOpUnaryMathOperatorEnumRuleCall_1_1_0() { return cOpUnaryMathOperatorEnumRuleCall_1_1_0; }

		//expression=Expression_9
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Expression_9
		public RuleCall getExpressionExpression_9ParserRuleCall_1_2_0() { return cExpressionExpression_9ParserRuleCall_1_2_0; }
	}

	public class Expression_9Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_9");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_11ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cInstanceOfExpressionExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		
		//// Instance of
		//Expression_9 returns Expression:
		//	Expression_11 ({InstanceOfExpression.expression=current} "instanceof" type=Type)?;
		public ParserRule getRule() { return rule; }

		//Expression_11 ({InstanceOfExpression.expression=current} "instanceof" type=Type)?
		public Group getGroup() { return cGroup; }

		//Expression_11
		public RuleCall getExpression_11ParserRuleCall_0() { return cExpression_11ParserRuleCall_0; }

		//({InstanceOfExpression.expression=current} "instanceof" type=Type)?
		public Group getGroup_1() { return cGroup_1; }

		//{InstanceOfExpression.expression=current}
		public Action getInstanceOfExpressionExpressionAction_1_0() { return cInstanceOfExpressionExpressionAction_1_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_1() { return cInstanceofKeyword_1_1; }

		//type=Type
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_2_0() { return cTypeTypeParserRuleCall_1_2_0; }
	}

	public class Expression_11Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_11");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cTerminalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression_11 returns Expression:
		//	"(" Expression ")" | TerminalExpression;
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | TerminalExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_1() { return cTerminalExpressionParserRuleCall_1; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassInstanceCreationExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRuleInvocationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRuleInvocationSuperParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStaticAccessParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVariableAccessParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TerminalExpression:
		//	Literal | ClassInstanceCreationExpression | RuleInvocation | RuleInvocationSuper | StaticAccess | VariableAccess;
		public ParserRule getRule() { return rule; }

		//Literal | ClassInstanceCreationExpression | RuleInvocation | RuleInvocationSuper | StaticAccess | VariableAccess
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//ClassInstanceCreationExpression
		public RuleCall getClassInstanceCreationExpressionParserRuleCall_1() { return cClassInstanceCreationExpressionParserRuleCall_1; }

		//RuleInvocation
		public RuleCall getRuleInvocationParserRuleCall_2() { return cRuleInvocationParserRuleCall_2; }

		//RuleInvocationSuper
		public RuleCall getRuleInvocationSuperParserRuleCall_3() { return cRuleInvocationSuperParserRuleCall_3; }

		//StaticAccess
		public RuleCall getStaticAccessParserRuleCall_4() { return cStaticAccessParserRuleCall_4; }

		//VariableAccess
		public RuleCall getVariableAccessParserRuleCall_5() { return cVariableAccessParserRuleCall_5; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNullLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Literal:
		//	IntLiteral | RealLiteral | BooleanLiteral | StringLiteral | NullLiteral;
		public ParserRule getRule() { return rule; }

		//IntLiteral | RealLiteral | BooleanLiteral | StringLiteral | NullLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }

		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_1() { return cRealLiteralParserRuleCall_1; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_2() { return cBooleanLiteralParserRuleCall_2; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_3() { return cStringLiteralParserRuleCall_3; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_4() { return cNullLiteralParserRuleCall_4; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cStringValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_0 = (RuleCall)cStringValueAssignment.eContents().get(0);
		
		//// intValue=UINT | stringValue=STRING| booleanValue="false" | booleanValue="true";
		//StringLiteral:
		//	stringValue=STRING;
		public ParserRule getRule() { return rule; }

		//stringValue=STRING
		public Assignment getStringValueAssignment() { return cStringValueAssignment; }

		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_0() { return cStringValueSTRINGTerminalRuleCall_0; }
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLiteral");
		private final Assignment cIntValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntValueINTTerminalRuleCall_0 = (RuleCall)cIntValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//	intValue=INT;
		public ParserRule getRule() { return rule; }

		//intValue=INT
		public Assignment getIntValueAssignment() { return cIntValueAssignment; }

		//INT
		public RuleCall getIntValueINTTerminalRuleCall_0() { return cIntValueINTTerminalRuleCall_0; }
	}

	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLiteral");
		private final Assignment cFloatValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFloatValueFLOATTerminalRuleCall_0 = (RuleCall)cFloatValueAssignment.eContents().get(0);
		
		//RealLiteral:
		//	floatValue=FLOAT;
		public ParserRule getRule() { return rule; }

		//floatValue=FLOAT
		public Assignment getFloatValueAssignment() { return cFloatValueAssignment; }

		//FLOAT
		public RuleCall getFloatValueFLOATTerminalRuleCall_0() { return cFloatValueFLOATTerminalRuleCall_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cBooleanValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cBooleanValueTrueKeyword_1_0_0 = (Keyword)cBooleanValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BooleanLiteral:
		//	{BooleanLiteral} (booleanValue?="true" | "false");
		public ParserRule getRule() { return rule; }

		//{BooleanLiteral} (booleanValue?="true" | "false")
		public Group getGroup() { return cGroup; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }

		//booleanValue?="true" | "false"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//booleanValue?="true"
		public Assignment getBooleanValueAssignment_1_0() { return cBooleanValueAssignment_1_0; }

		//"true"
		public Keyword getBooleanValueTrueKeyword_1_0_0() { return cBooleanValueTrueKeyword_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteral:
		//	{NullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{NullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class ClassInstanceCreationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassInstanceCreationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClassInstanceCreationExpression:
		//	"new" type=Type "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//"new" type=Type "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_0_0() { return cArgumentsExpressionParserRuleCall_3_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_1_1_0() { return cArgumentsExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class RuleInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRuleDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRuleDeclarationRuleDeclarationCrossReference_0_0 = (CrossReference)cRuleDeclarationAssignment_0.eContents().get(0);
		private final RuleCall cRuleDeclarationRuleDeclarationFQNParserRuleCall_0_0_1 = (RuleCall)cRuleDeclarationRuleDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// RuleInvocation
		//RuleInvocation:
		//	ruleDeclaration=[RuleDeclaration|FQN] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//ruleDeclaration=[RuleDeclaration|FQN] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//ruleDeclaration=[RuleDeclaration|FQN]
		public Assignment getRuleDeclarationAssignment_0() { return cRuleDeclarationAssignment_0; }

		//[RuleDeclaration|FQN]
		public CrossReference getRuleDeclarationRuleDeclarationCrossReference_0_0() { return cRuleDeclarationRuleDeclarationCrossReference_0_0; }

		//FQN
		public RuleCall getRuleDeclarationRuleDeclarationFQNParserRuleCall_0_0_1() { return cRuleDeclarationRuleDeclarationFQNParserRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_0_0() { return cArgumentsExpressionParserRuleCall_2_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_1_0() { return cArgumentsExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class RuleInvocationSuperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleInvocationSuper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleInvocationSuperAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RuleInvocationSuper:
		//	{RuleInvocationSuper} "super";
		public ParserRule getRule() { return rule; }

		//{RuleInvocationSuper} "super"
		public Group getGroup() { return cGroup; }

		//{RuleInvocationSuper}
		public Action getRuleInvocationSuperAction_0() { return cRuleInvocationSuperAction_0; }

		//"super"
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodInvocationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Feature:
		//	MethodInvocation | FeatureField;
		public ParserRule getRule() { return rule; }

		//MethodInvocation | FeatureField
		public Alternatives getAlternatives() { return cAlternatives; }

		//MethodInvocation
		public RuleCall getMethodInvocationParserRuleCall_0() { return cMethodInvocationParserRuleCall_0; }

		//FeatureField
		public RuleCall getFeatureFieldParserRuleCall_1() { return cFeatureFieldParserRuleCall_1; }
	}

	public class MethodInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodInvocation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureMethodInvocationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNativeOperationInvocationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MethodInvocation:
		//	FeatureMethodInvocation | NativeOperationInvocation;
		public ParserRule getRule() { return rule; }

		//FeatureMethodInvocation | NativeOperationInvocation
		public Alternatives getAlternatives() { return cAlternatives; }

		//FeatureMethodInvocation
		public RuleCall getFeatureMethodInvocationParserRuleCall_0() { return cFeatureMethodInvocationParserRuleCall_0; }

		//NativeOperationInvocation
		public RuleCall getNativeOperationInvocationParserRuleCall_1() { return cNativeOperationInvocationParserRuleCall_1; }
	}

	public class FeatureMethodInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureMethodInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExpressionAssignment_1_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FeatureMethodInvocation:
		//	"." ("<<" expression=Expression ">>" | name=ID) "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//"." ("<<" expression=Expression ">>" | name=ID) "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//"<<" expression=Expression ">>" | name=ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"<<" expression=Expression ">>"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1_0_0() { return cLessThanSignLessThanSignKeyword_1_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_0_1() { return cExpressionAssignment_1_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_1_0() { return cExpressionExpressionParserRuleCall_1_0_1_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1_0_2() { return cGreaterThanSignGreaterThanSignKeyword_1_0_2; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_0_0() { return cArgumentsExpressionParserRuleCall_3_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_1_1_0() { return cArgumentsExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class NativeOperationInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NativeOperationInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NativeOperationInvocation:
		//	"->" name=ID "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//"->" name=ID "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_0_0() { return cArgumentsExpressionParserRuleCall_3_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_1_1_0() { return cArgumentsExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MetamodelFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureMethodInvocationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MetamodelFeature:
		//	FeatureMethodInvocation | FeatureField;
		public ParserRule getRule() { return rule; }

		//FeatureMethodInvocation | FeatureField
		public Alternatives getAlternatives() { return cAlternatives; }

		//FeatureMethodInvocation
		public RuleCall getFeatureMethodInvocationParserRuleCall_0() { return cFeatureMethodInvocationParserRuleCall_0; }

		//FeatureField
		public RuleCall getFeatureFieldParserRuleCall_1() { return cFeatureFieldParserRuleCall_1; }
	}

	public class FeatureFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExpressionAssignment_1_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//FeatureField:
		//	"." ("<<" expression=Expression ">>" | name=ID);
		public ParserRule getRule() { return rule; }

		//"." ("<<" expression=Expression ">>" | name=ID)
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//"<<" expression=Expression ">>" | name=ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"<<" expression=Expression ">>"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1_0_0() { return cLessThanSignLessThanSignKeyword_1_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_0_1() { return cExpressionAssignment_1_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_1_0() { return cExpressionExpressionParserRuleCall_1_0_1_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1_0_2() { return cGreaterThanSignGreaterThanSignKeyword_1_0_2; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}

	public class VariableAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAccess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPrefixOperatorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPrefixOperatorPPOperatorEnumRuleCall_0_0_0 = (RuleCall)cPrefixOperatorAssignment_0_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cVariableVarDeclarationCrossReference_0_1_0 = (CrossReference)cVariableAssignment_0_1.eContents().get(0);
		private final RuleCall cVariableVarDeclarationIDTerminalRuleCall_0_1_0_1 = (RuleCall)cVariableVarDeclarationCrossReference_0_1_0.eContents().get(1);
		private final Assignment cFeaturesAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFeaturesFeatureParserRuleCall_0_2_0 = (RuleCall)cFeaturesAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVariableAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cVariableVarDeclarationCrossReference_1_0_0 = (CrossReference)cVariableAssignment_1_0.eContents().get(0);
		private final RuleCall cVariableVarDeclarationIDTerminalRuleCall_1_0_0_1 = (RuleCall)cVariableVarDeclarationCrossReference_1_0_0.eContents().get(1);
		private final Assignment cFeaturesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_1_1_0 = (RuleCall)cFeaturesAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cAlternatives_1_2.eContents().get(0);
		private final Keyword cDefaultKeyword_1_2_0_0 = (Keyword)cGroup_1_2_0.eContents().get(0);
		private final Assignment cDefaultAssignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final RuleCall cDefaultExpressionParserRuleCall_1_2_0_1_0 = (RuleCall)cDefaultAssignment_1_2_0_1.eContents().get(0);
		private final Assignment cPostfixOperatorAssignment_1_2_1 = (Assignment)cAlternatives_1_2.eContents().get(1);
		private final RuleCall cPostfixOperatorPPOperatorEnumRuleCall_1_2_1_0 = (RuleCall)cPostfixOperatorAssignment_1_2_1.eContents().get(0);
		
		//VariableAccess:
		//	prefixOperator=PPOperator variable=[VarDeclaration] features+=Feature* | variable=[VarDeclaration] features+=Feature*
		//	("default" default=Expression | postfixOperator=PPOperator)?;
		public ParserRule getRule() { return rule; }

		//prefixOperator=PPOperator variable=[VarDeclaration] features+=Feature* | variable=[VarDeclaration] features+=Feature*
		//("default" default=Expression | postfixOperator=PPOperator)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//prefixOperator=PPOperator variable=[VarDeclaration] features+=Feature*
		public Group getGroup_0() { return cGroup_0; }

		//prefixOperator=PPOperator
		public Assignment getPrefixOperatorAssignment_0_0() { return cPrefixOperatorAssignment_0_0; }

		//PPOperator
		public RuleCall getPrefixOperatorPPOperatorEnumRuleCall_0_0_0() { return cPrefixOperatorPPOperatorEnumRuleCall_0_0_0; }

		//variable=[VarDeclaration]
		public Assignment getVariableAssignment_0_1() { return cVariableAssignment_0_1; }

		//[VarDeclaration]
		public CrossReference getVariableVarDeclarationCrossReference_0_1_0() { return cVariableVarDeclarationCrossReference_0_1_0; }

		//ID
		public RuleCall getVariableVarDeclarationIDTerminalRuleCall_0_1_0_1() { return cVariableVarDeclarationIDTerminalRuleCall_0_1_0_1; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_0_2() { return cFeaturesAssignment_0_2; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_0_2_0() { return cFeaturesFeatureParserRuleCall_0_2_0; }

		//variable=[VarDeclaration] features+=Feature* ("default" default=Expression | postfixOperator=PPOperator)?
		public Group getGroup_1() { return cGroup_1; }

		//variable=[VarDeclaration]
		public Assignment getVariableAssignment_1_0() { return cVariableAssignment_1_0; }

		//[VarDeclaration]
		public CrossReference getVariableVarDeclarationCrossReference_1_0_0() { return cVariableVarDeclarationCrossReference_1_0_0; }

		//ID
		public RuleCall getVariableVarDeclarationIDTerminalRuleCall_1_0_0_1() { return cVariableVarDeclarationIDTerminalRuleCall_1_0_0_1; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_1_1() { return cFeaturesAssignment_1_1; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_1_1_0() { return cFeaturesFeatureParserRuleCall_1_1_0; }

		//("default" default=Expression | postfixOperator=PPOperator)?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//"default" default=Expression
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//"default"
		public Keyword getDefaultKeyword_1_2_0_0() { return cDefaultKeyword_1_2_0_0; }

		//default=Expression
		public Assignment getDefaultAssignment_1_2_0_1() { return cDefaultAssignment_1_2_0_1; }

		//Expression
		public RuleCall getDefaultExpressionParserRuleCall_1_2_0_1_0() { return cDefaultExpressionParserRuleCall_1_2_0_1_0; }

		//postfixOperator=PPOperator
		public Assignment getPostfixOperatorAssignment_1_2_1() { return cPostfixOperatorAssignment_1_2_1; }

		//PPOperator
		public RuleCall getPostfixOperatorPPOperatorEnumRuleCall_1_2_1_0() { return cPostfixOperatorPPOperatorEnumRuleCall_1_2_1_0; }
	}

	public class StaticAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExpressionAssignment_1_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesFeatureParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		
		//StaticAccess:
		//	"$" ("<<" expression=Expression ">>" | type=Type) features+=Feature*;
		public ParserRule getRule() { return rule; }

		//"$" ("<<" expression=Expression ">>" | type=Type) features+=Feature*
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//"<<" expression=Expression ">>" | type=Type
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"<<" expression=Expression ">>"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1_0_0() { return cLessThanSignLessThanSignKeyword_1_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_0_1() { return cExpressionAssignment_1_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_1_0() { return cExpressionExpressionParserRuleCall_1_0_1_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1_0_2() { return cGreaterThanSignGreaterThanSignKeyword_1_0_2; }

		//type=Type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_2_0() { return cFeaturesFeatureParserRuleCall_2_0; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// ** 
		// * Fully qualified name for rules and return parameter mappings.
		// * The ":" is used instead "." to distinguish feature access from rule calls.
		// * A feature access must no start with a method call, thus 
		// * <code>foo()</code> must be a rule call. <code>a.foo()</code> is a feature 
		// * access, method <code>foo()</code> is called on object <code>a</code>.
		// * On the other hand, <code>a:foo()</code> is a rule invocation, rule 
		// * <code>foo()</code> is called in module <code>a</code>. 
		// *
		// * If both, feature access and rule calls, i.e. fully qualified names, were
		// * using the same separator char, <code>a.foo()</code> could eigther be a 
		// * feature access (method call on object a) or a rule invocation (rule foo in
		// * module a).
		// * / FQN:
		//	ID (":" ID)*;
		public ParserRule getRule() { return rule; }

		//ID (":" ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(":" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class AnnotationsDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationsDefinition");
		private final Assignment cAnnotationDeclsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAnnotationDeclsAnnotationDeclParserRuleCall_0 = (RuleCall)cAnnotationDeclsAssignment.eContents().get(0);
		
		//// -----------------------------------------------------------------------------
		//// Annotations
		//// -----------------------------------------------------------------------------
		//AnnotationsDefinition:
		//	annotationDecls+=AnnotationDecl+;
		public ParserRule getRule() { return rule; }

		//annotationDecls+=AnnotationDecl+
		public Assignment getAnnotationDeclsAssignment() { return cAnnotationDeclsAssignment; }

		//AnnotationDecl
		public RuleCall getAnnotationDeclsAnnotationDeclParserRuleCall_0() { return cAnnotationDeclsAnnotationDeclParserRuleCall_0; }
	}

	public class AnnotationDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTargetsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTargetsAnnotationTargetSpecEnumRuleCall_2_1_0 = (RuleCall)cTargetsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTargetsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTargetsAnnotationTargetSpecEnumRuleCall_2_2_1_0 = (RuleCall)cTargetsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Group cGroup_4_0_0 = (Group)cAlternatives_4_0.eContents().get(0);
		private final Keyword cSelfKeyword_4_0_0_0 = (Keyword)cGroup_4_0_0.eContents().get(0);
		private final Assignment cValuetypeAssignment_4_0_0_1 = (Assignment)cGroup_4_0_0.eContents().get(1);
		private final RuleCall cValuetypePrimitiveTypeParserRuleCall_4_0_0_1_0 = (RuleCall)cValuetypeAssignment_4_0_0_1.eContents().get(0);
		private final Assignment cManyAssignment_4_0_0_2 = (Assignment)cGroup_4_0_0.eContents().get(2);
		private final Keyword cManyAsteriskKeyword_4_0_0_2_0 = (Keyword)cManyAssignment_4_0_0_2.eContents().get(0);
		private final Alternatives cAlternatives_4_0_0_3 = (Alternatives)cGroup_4_0_0.eContents().get(3);
		private final Assignment cRequiredAssignment_4_0_0_3_0 = (Assignment)cAlternatives_4_0_0_3.eContents().get(0);
		private final Keyword cRequiredRequiredKeyword_4_0_0_3_0_0 = (Keyword)cRequiredAssignment_4_0_0_3_0.eContents().get(0);
		private final Group cGroup_4_0_0_3_1 = (Group)cAlternatives_4_0_0_3.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4_0_0_3_1_0 = (Keyword)cGroup_4_0_0_3_1.eContents().get(0);
		private final Assignment cDefaultAssignment_4_0_0_3_1_1 = (Assignment)cGroup_4_0_0_3_1.eContents().get(1);
		private final RuleCall cDefaultLiteralParserRuleCall_4_0_0_3_1_1_0 = (RuleCall)cDefaultAssignment_4_0_0_3_1_1.eContents().get(0);
		private final Assignment cPropertyDeclsAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cPropertyDeclsAnnotationPropertyDeclParserRuleCall_4_0_1_0 = (RuleCall)cPropertyDeclsAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cPropertyDeclsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cPropertyDeclsAnnotationPropertyDeclParserRuleCall_4_1_1_0 = (RuleCall)cPropertyDeclsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// **
		// * Annotation Declaration
		// * / AnnotationDecl:
		//	"annotation" name=ID ("(" targets+=AnnotationTargetSpec ("," targets+=AnnotationTargetSpec)* ")")? "{" (("self"
		//	valuetype=PrimitiveType many?="*"? (required?="required" | "=" default=Literal) |
		//	propertyDecls+=AnnotationPropertyDecl) ("," propertyDecls+=AnnotationPropertyDecl)*)? "}";
		public ParserRule getRule() { return rule; }

		//"annotation" name=ID ("(" targets+=AnnotationTargetSpec ("," targets+=AnnotationTargetSpec)* ")")? "{" (("self"
		//valuetype=PrimitiveType many?="*"? (required?="required" | "=" default=Literal) |
		//propertyDecls+=AnnotationPropertyDecl) ("," propertyDecls+=AnnotationPropertyDecl)*)? "}"
		public Group getGroup() { return cGroup; }

		//"annotation"
		public Keyword getAnnotationKeyword_0() { return cAnnotationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" targets+=AnnotationTargetSpec ("," targets+=AnnotationTargetSpec)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//targets+=AnnotationTargetSpec
		public Assignment getTargetsAssignment_2_1() { return cTargetsAssignment_2_1; }

		//AnnotationTargetSpec
		public RuleCall getTargetsAnnotationTargetSpecEnumRuleCall_2_1_0() { return cTargetsAnnotationTargetSpecEnumRuleCall_2_1_0; }

		//("," targets+=AnnotationTargetSpec)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//targets+=AnnotationTargetSpec
		public Assignment getTargetsAssignment_2_2_1() { return cTargetsAssignment_2_2_1; }

		//AnnotationTargetSpec
		public RuleCall getTargetsAnnotationTargetSpecEnumRuleCall_2_2_1_0() { return cTargetsAnnotationTargetSpecEnumRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(("self" valuetype=PrimitiveType many?="*"? (required?="required" | "=" default=Literal) |
		//propertyDecls+=AnnotationPropertyDecl) ("," propertyDecls+=AnnotationPropertyDecl)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"self" valuetype=PrimitiveType many?="*"? (required?="required" | "=" default=Literal) |
		//propertyDecls+=AnnotationPropertyDecl
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"self" valuetype=PrimitiveType many?="*"? (required?="required" | "=" default=Literal)
		public Group getGroup_4_0_0() { return cGroup_4_0_0; }

		//"self"
		public Keyword getSelfKeyword_4_0_0_0() { return cSelfKeyword_4_0_0_0; }

		//valuetype=PrimitiveType
		public Assignment getValuetypeAssignment_4_0_0_1() { return cValuetypeAssignment_4_0_0_1; }

		//PrimitiveType
		public RuleCall getValuetypePrimitiveTypeParserRuleCall_4_0_0_1_0() { return cValuetypePrimitiveTypeParserRuleCall_4_0_0_1_0; }

		//many?="*"?
		public Assignment getManyAssignment_4_0_0_2() { return cManyAssignment_4_0_0_2; }

		//"*"
		public Keyword getManyAsteriskKeyword_4_0_0_2_0() { return cManyAsteriskKeyword_4_0_0_2_0; }

		//required?="required" | "=" default=Literal
		public Alternatives getAlternatives_4_0_0_3() { return cAlternatives_4_0_0_3; }

		//required?="required"
		public Assignment getRequiredAssignment_4_0_0_3_0() { return cRequiredAssignment_4_0_0_3_0; }

		//"required"
		public Keyword getRequiredRequiredKeyword_4_0_0_3_0_0() { return cRequiredRequiredKeyword_4_0_0_3_0_0; }

		//"=" default=Literal
		public Group getGroup_4_0_0_3_1() { return cGroup_4_0_0_3_1; }

		//"="
		public Keyword getEqualsSignKeyword_4_0_0_3_1_0() { return cEqualsSignKeyword_4_0_0_3_1_0; }

		//default=Literal
		public Assignment getDefaultAssignment_4_0_0_3_1_1() { return cDefaultAssignment_4_0_0_3_1_1; }

		//Literal
		public RuleCall getDefaultLiteralParserRuleCall_4_0_0_3_1_1_0() { return cDefaultLiteralParserRuleCall_4_0_0_3_1_1_0; }

		//propertyDecls+=AnnotationPropertyDecl
		public Assignment getPropertyDeclsAssignment_4_0_1() { return cPropertyDeclsAssignment_4_0_1; }

		//AnnotationPropertyDecl
		public RuleCall getPropertyDeclsAnnotationPropertyDeclParserRuleCall_4_0_1_0() { return cPropertyDeclsAnnotationPropertyDeclParserRuleCall_4_0_1_0; }

		//("," propertyDecls+=AnnotationPropertyDecl)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//propertyDecls+=AnnotationPropertyDecl
		public Assignment getPropertyDeclsAssignment_4_1_1() { return cPropertyDeclsAssignment_4_1_1; }

		//AnnotationPropertyDecl
		public RuleCall getPropertyDeclsAnnotationPropertyDeclParserRuleCall_4_1_1_0() { return cPropertyDeclsAnnotationPropertyDeclParserRuleCall_4_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AnnotationPropertyDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationPropertyDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePrimitiveTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRequiredAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cRequiredRequiredKeyword_2_0_0 = (Keyword)cRequiredAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cDefaultAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDefaultLiteralParserRuleCall_2_1_1_0 = (RuleCall)cDefaultAssignment_2_1_1.eContents().get(0);
		
		//AnnotationPropertyDecl:
		//	type=PrimitiveType name=ID (required?="required" | "=" default=Literal);
		public ParserRule getRule() { return rule; }

		//type=PrimitiveType name=ID (required?="required" | "=" default=Literal)
		public Group getGroup() { return cGroup; }

		//type=PrimitiveType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//PrimitiveType
		public RuleCall getTypePrimitiveTypeParserRuleCall_0_0() { return cTypePrimitiveTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//required?="required" | "=" default=Literal
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//required?="required"
		public Assignment getRequiredAssignment_2_0() { return cRequiredAssignment_2_0; }

		//"required"
		public Keyword getRequiredRequiredKeyword_2_0_0() { return cRequiredRequiredKeyword_2_0_0; }

		//"=" default=Literal
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_0() { return cEqualsSignKeyword_2_1_0; }

		//default=Literal
		public Assignment getDefaultAssignment_2_1_1() { return cDefaultAssignment_2_1_1; }

		//Literal
		public RuleCall getDefaultLiteralParserRuleCall_2_1_1_0() { return cDefaultLiteralParserRuleCall_2_1_1_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeclAnnotationDeclCrossReference_1_0 = (CrossReference)cDeclAssignment_1.eContents().get(0);
		private final RuleCall cDeclAnnotationDeclIDTerminalRuleCall_1_0_1 = (RuleCall)cDeclAnnotationDeclCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cValuesAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cValuesLiteralParserRuleCall_2_1_0_0 = (RuleCall)cValuesAssignment_2_1_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cPropertiesAnnotationPropertyParserRuleCall_2_1_1_0 = (RuleCall)cPropertiesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Alternatives cAlternatives_2_2_1 = (Alternatives)cGroup_2_2.eContents().get(1);
		private final Assignment cValuesAssignment_2_2_1_0 = (Assignment)cAlternatives_2_2_1.eContents().get(0);
		private final RuleCall cValuesLiteralParserRuleCall_2_2_1_0_0 = (RuleCall)cValuesAssignment_2_2_1_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_2_1_1 = (Assignment)cAlternatives_2_2_1.eContents().get(1);
		private final RuleCall cPropertiesAnnotationPropertyParserRuleCall_2_2_1_1_0 = (RuleCall)cPropertiesAssignment_2_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		/// **
		// * Annotation
		// * / Annotation:
		//	"@" decl=[AnnotationDecl] ("(" (values+=Literal | properties+=AnnotationProperty) ("," (values+=Literal |
		//	properties+=AnnotationProperty))* ")")?;
		public ParserRule getRule() { return rule; }

		//"@" decl=[AnnotationDecl] ("(" (values+=Literal | properties+=AnnotationProperty) ("," (values+=Literal |
		//properties+=AnnotationProperty))* ")")?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//decl=[AnnotationDecl]
		public Assignment getDeclAssignment_1() { return cDeclAssignment_1; }

		//[AnnotationDecl]
		public CrossReference getDeclAnnotationDeclCrossReference_1_0() { return cDeclAnnotationDeclCrossReference_1_0; }

		//ID
		public RuleCall getDeclAnnotationDeclIDTerminalRuleCall_1_0_1() { return cDeclAnnotationDeclIDTerminalRuleCall_1_0_1; }

		//("(" (values+=Literal | properties+=AnnotationProperty) ("," (values+=Literal | properties+=AnnotationProperty))* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//values+=Literal | properties+=AnnotationProperty
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//values+=Literal
		public Assignment getValuesAssignment_2_1_0() { return cValuesAssignment_2_1_0; }

		//Literal
		public RuleCall getValuesLiteralParserRuleCall_2_1_0_0() { return cValuesLiteralParserRuleCall_2_1_0_0; }

		//properties+=AnnotationProperty
		public Assignment getPropertiesAssignment_2_1_1() { return cPropertiesAssignment_2_1_1; }

		//AnnotationProperty
		public RuleCall getPropertiesAnnotationPropertyParserRuleCall_2_1_1_0() { return cPropertiesAnnotationPropertyParserRuleCall_2_1_1_0; }

		//("," (values+=Literal | properties+=AnnotationProperty))*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//values+=Literal | properties+=AnnotationProperty
		public Alternatives getAlternatives_2_2_1() { return cAlternatives_2_2_1; }

		//values+=Literal
		public Assignment getValuesAssignment_2_2_1_0() { return cValuesAssignment_2_2_1_0; }

		//Literal
		public RuleCall getValuesLiteralParserRuleCall_2_2_1_0_0() { return cValuesLiteralParserRuleCall_2_2_1_0_0; }

		//properties+=AnnotationProperty
		public Assignment getPropertiesAssignment_2_2_1_1() { return cPropertiesAssignment_2_2_1_1; }

		//AnnotationProperty
		public RuleCall getPropertiesAnnotationPropertyParserRuleCall_2_2_1_1_0() { return cPropertiesAnnotationPropertyParserRuleCall_2_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class AnnotationPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDeclAnnotationPropertyDeclCrossReference_0_0 = (CrossReference)cDeclAssignment_0.eContents().get(0);
		private final RuleCall cDeclAnnotationPropertyDeclIDTerminalRuleCall_0_0_1 = (RuleCall)cDeclAnnotationPropertyDeclCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AnnotationProperty:
		//	decl=[AnnotationPropertyDecl] "=" value=Literal;
		public ParserRule getRule() { return rule; }

		//decl=[AnnotationPropertyDecl] "=" value=Literal
		public Group getGroup() { return cGroup; }

		//decl=[AnnotationPropertyDecl]
		public Assignment getDeclAssignment_0() { return cDeclAssignment_0; }

		//[AnnotationPropertyDecl]
		public CrossReference getDeclAnnotationPropertyDeclCrossReference_0_0() { return cDeclAnnotationPropertyDeclCrossReference_0_0; }

		//ID
		public RuleCall getDeclAnnotationPropertyDeclIDTerminalRuleCall_0_0_1() { return cDeclAnnotationPropertyDeclIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Literal
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_2_0() { return cValueLiteralParserRuleCall_2_0; }
	}
	
	
	public class VisibilityModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VisibilityModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum VisibilityModifier:
		//	public | private;
		public EnumRule getRule() { return rule; }

		//public | private
		public Alternatives getAlternatives() { return cAlternatives; }

		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }

		//"public"
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }

		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }

		//"private"
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
	}

	public class ExecutionModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ExecutionModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCalledEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCalledCalledKeyword_0_0 = (Keyword)cCalledEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAbstractEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cManualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cManualManualKeyword_2_0 = (Keyword)cManualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAutoEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAutoAutoKeyword_3_0 = (Keyword)cAutoEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cConfirmEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cConfirmConfirmKeyword_4_0 = (Keyword)cConfirmEnumLiteralDeclaration_4.eContents().get(0);
		
		/// **
		//called is the default modifier is no modifier is sepcified
		// * / enum ExecutionModifier:
		//	called | abstract | manual | auto | confirm;
		public EnumRule getRule() { return rule; }

		//called | abstract | manual | auto | confirm
		public Alternatives getAlternatives() { return cAlternatives; }

		//called
		public EnumLiteralDeclaration getCalledEnumLiteralDeclaration_0() { return cCalledEnumLiteralDeclaration_0; }

		//"called"
		public Keyword getCalledCalledKeyword_0_0() { return cCalledCalledKeyword_0_0; }

		//abstract
		public EnumLiteralDeclaration getAbstractEnumLiteralDeclaration_1() { return cAbstractEnumLiteralDeclaration_1; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }

		//manual
		public EnumLiteralDeclaration getManualEnumLiteralDeclaration_2() { return cManualEnumLiteralDeclaration_2; }

		//"manual"
		public Keyword getManualManualKeyword_2_0() { return cManualManualKeyword_2_0; }

		//auto
		public EnumLiteralDeclaration getAutoEnumLiteralDeclaration_3() { return cAutoEnumLiteralDeclaration_3; }

		//"auto"
		public Keyword getAutoAutoKeyword_3_0() { return cAutoAutoKeyword_3_0; }

		//confirm
		public EnumLiteralDeclaration getConfirmEnumLiteralDeclaration_4() { return cConfirmEnumLiteralDeclaration_4; }

		//"confirm"
		public Keyword getConfirmConfirmKeyword_4_0() { return cConfirmConfirmKeyword_4_0; }
	}

	public class FormalParameterModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParameterModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUseEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUseUseKeyword_0_0 = (Keyword)cUseEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFromEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFromFromKeyword_1_0 = (Keyword)cFromEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntoEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntoIntoKeyword_2_0 = (Keyword)cIntoEnumLiteralDeclaration_2.eContents().get(0);
		
		/// **
		//use is the default value if nothing is specified
		// * / enum FormalParameterModifier returns ParameterModifier:
		//	use | from | into;
		public EnumRule getRule() { return rule; }

		//use | from | into
		public Alternatives getAlternatives() { return cAlternatives; }

		//use
		public EnumLiteralDeclaration getUseEnumLiteralDeclaration_0() { return cUseEnumLiteralDeclaration_0; }

		//"use"
		public Keyword getUseUseKeyword_0_0() { return cUseUseKeyword_0_0; }

		//from
		public EnumLiteralDeclaration getFromEnumLiteralDeclaration_1() { return cFromEnumLiteralDeclaration_1; }

		//"from"
		public Keyword getFromFromKeyword_1_0() { return cFromFromKeyword_1_0; }

		//into
		public EnumLiteralDeclaration getIntoEnumLiteralDeclaration_2() { return cIntoEnumLiteralDeclaration_2; }

		//"into"
		public Keyword getIntoIntoKeyword_2_0() { return cIntoIntoKeyword_2_0; }
	}

	public class ReturnParameterModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnParameterModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cReturnEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cReturnReturnKeyword_0_0 = (Keyword)cReturnEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCreateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCreateCreateKeyword_1_0 = (Keyword)cCreateEnumLiteralDeclaration_1.eContents().get(0);
		
		/// **
		//return is the default value if nothing is specified
		// * / enum ReturnParameterModifier returns ParameterModifier:
		//	return | create;
		public EnumRule getRule() { return rule; }

		//return | create
		public Alternatives getAlternatives() { return cAlternatives; }

		//return
		public EnumLiteralDeclaration getReturnEnumLiteralDeclaration_0() { return cReturnEnumLiteralDeclaration_0; }

		//"return"
		public Keyword getReturnReturnKeyword_0_0() { return cReturnReturnKeyword_0_0; }

		//create
		public EnumLiteralDeclaration getCreateEnumLiteralDeclaration_1() { return cCreateEnumLiteralDeclaration_1; }

		//"create"
		public Keyword getCreateCreateKeyword_1_0() { return cCreateCreateKeyword_1_0; }
	}

	public class PrimitiveTypeSpecElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveTypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVoidEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVoidVoidKeyword_0_0 = (Keyword)cVoidEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnyAnyKeyword_1_0 = (Keyword)cAnyEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStringStringKeyword_2_0 = (Keyword)cStringEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cIntIntKeyword_3_0 = (Keyword)cIntEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBooleanBooleanKeyword_4_0 = (Keyword)cBooleanEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cRealEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cRealRealKeyword_5_0 = (Keyword)cRealEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTypeEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTypeTypeKeyword_6_0 = (Keyword)cTypeEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum PrimitiveTypeSpec:
		//	void | any | string="String" | int | boolean | real | type="Type";
		public EnumRule getRule() { return rule; }

		//void | any | string="String" | int | boolean | real | type="Type"
		public Alternatives getAlternatives() { return cAlternatives; }

		//void
		public EnumLiteralDeclaration getVoidEnumLiteralDeclaration_0() { return cVoidEnumLiteralDeclaration_0; }

		//"void"
		public Keyword getVoidVoidKeyword_0_0() { return cVoidVoidKeyword_0_0; }

		//any
		public EnumLiteralDeclaration getAnyEnumLiteralDeclaration_1() { return cAnyEnumLiteralDeclaration_1; }

		//"any"
		public Keyword getAnyAnyKeyword_1_0() { return cAnyAnyKeyword_1_0; }

		//string="String"
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_2() { return cStringEnumLiteralDeclaration_2; }

		//"String"
		public Keyword getStringStringKeyword_2_0() { return cStringStringKeyword_2_0; }

		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_3() { return cIntEnumLiteralDeclaration_3; }

		//"int"
		public Keyword getIntIntKeyword_3_0() { return cIntIntKeyword_3_0; }

		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_4() { return cBooleanEnumLiteralDeclaration_4; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_4_0() { return cBooleanBooleanKeyword_4_0; }

		//real
		public EnumLiteralDeclaration getRealEnumLiteralDeclaration_5() { return cRealEnumLiteralDeclaration_5; }

		//"real"
		public Keyword getRealRealKeyword_5_0() { return cRealRealKeyword_5_0; }

		//type="Type"
		public EnumLiteralDeclaration getTypeEnumLiteralDeclaration_6() { return cTypeEnumLiteralDeclaration_6; }

		//"Type"
		public Keyword getTypeTypeKeyword_6_0() { return cTypeTypeKeyword_6_0; }
	}

	public class CollectionTypeSpecElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionTypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCollectionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCollectionCollectionKeyword_0_0 = (Keyword)cCollectionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSetEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSetSetKeyword_1_0 = (Keyword)cSetEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOrderedSetEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOrderedSetOrderedSetKeyword_2_0 = (Keyword)cOrderedSetEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBagEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBagBagKeyword_3_0 = (Keyword)cBagEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSequenceEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSequenceSequenceKeyword_4_0 = (Keyword)cSequenceEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum CollectionTypeSpec:
		//	Collection | Set | OrderedSet | Bag | Sequence;
		public EnumRule getRule() { return rule; }

		//Collection | Set | OrderedSet | Bag | Sequence
		public Alternatives getAlternatives() { return cAlternatives; }

		//Collection
		public EnumLiteralDeclaration getCollectionEnumLiteralDeclaration_0() { return cCollectionEnumLiteralDeclaration_0; }

		//"Collection"
		public Keyword getCollectionCollectionKeyword_0_0() { return cCollectionCollectionKeyword_0_0; }

		//Set
		public EnumLiteralDeclaration getSetEnumLiteralDeclaration_1() { return cSetEnumLiteralDeclaration_1; }

		//"Set"
		public Keyword getSetSetKeyword_1_0() { return cSetSetKeyword_1_0; }

		//OrderedSet
		public EnumLiteralDeclaration getOrderedSetEnumLiteralDeclaration_2() { return cOrderedSetEnumLiteralDeclaration_2; }

		//"OrderedSet"
		public Keyword getOrderedSetOrderedSetKeyword_2_0() { return cOrderedSetOrderedSetKeyword_2_0; }

		//Bag
		public EnumLiteralDeclaration getBagEnumLiteralDeclaration_3() { return cBagEnumLiteralDeclaration_3; }

		//"Bag"
		public Keyword getBagBagKeyword_3_0() { return cBagBagKeyword_3_0; }

		//Sequence
		public EnumLiteralDeclaration getSequenceEnumLiteralDeclaration_4() { return cSequenceEnumLiteralDeclaration_4; }

		//"Sequence"
		public Keyword getSequenceSequenceKeyword_4_0() { return cSequenceSequenceKeyword_4_0; }
	}

	public class BooleanOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAmpersandKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrVerticalLineKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAndscEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAndscAmpersandAmpersandKeyword_2_0 = (Keyword)cAndscEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOrscEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOrscVerticalLineVerticalLineKeyword_3_0 = (Keyword)cOrscEnumLiteralDeclaration_3.eContents().get(0);
		
		//// short circuited and standard operators
		//enum BooleanOperator:
		//	and="&" | or="|" | andsc="&&" | orsc="||";
		public EnumRule getRule() { return rule; }

		//and="&" | or="|" | andsc="&&" | orsc="||"
		public Alternatives getAlternatives() { return cAlternatives; }

		//and="&"
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }

		//"&"
		public Keyword getAndAmpersandKeyword_0_0() { return cAndAmpersandKeyword_0_0; }

		//or="|"
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }

		//"|"
		public Keyword getOrVerticalLineKeyword_1_0() { return cOrVerticalLineKeyword_1_0; }

		//andsc="&&"
		public EnumLiteralDeclaration getAndscEnumLiteralDeclaration_2() { return cAndscEnumLiteralDeclaration_2; }

		//"&&"
		public Keyword getAndscAmpersandAmpersandKeyword_2_0() { return cAndscAmpersandAmpersandKeyword_2_0; }

		//orsc="||"
		public EnumLiteralDeclaration getOrscEnumLiteralDeclaration_3() { return cOrscEnumLiteralDeclaration_3; }

		//"||"
		public Keyword getOrscVerticalLineVerticalLineKeyword_3_0() { return cOrscVerticalLineVerticalLineKeyword_3_0; }
	}

	public class EqualityOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNeqEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNeqExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNeqEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqualityOperator:
		//	eq="==" | neq="!=";
		public EnumRule getRule() { return rule; }

		//eq="==" | neq="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//eq="=="
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_0() { return cEqEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEqEqualsSignEqualsSignKeyword_0_0() { return cEqEqualsSignEqualsSignKeyword_0_0; }

		//neq="!="
		public EnumLiteralDeclaration getNeqEnumLiteralDeclaration_1() { return cNeqEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNeqExclamationMarkEqualsSignKeyword_1_0() { return cNeqExclamationMarkEqualsSignKeyword_1_0; }
	}

	public class RelationalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLtEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLtLessThanSignKeyword_0_0 = (Keyword)cLtEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGtEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGtGreaterThanSignKeyword_1_0 = (Keyword)cGtEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLeqEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLeqLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLeqEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGeqEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGeqGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGeqEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum RelationalOperator:
		//	lt="<" | gt=">" | leq="<=" | geq=">=";
		public EnumRule getRule() { return rule; }

		//lt="<" | gt=">" | leq="<=" | geq=">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//lt="<"
		public EnumLiteralDeclaration getLtEnumLiteralDeclaration_0() { return cLtEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLtLessThanSignKeyword_0_0() { return cLtLessThanSignKeyword_0_0; }

		//gt=">"
		public EnumLiteralDeclaration getGtEnumLiteralDeclaration_1() { return cGtEnumLiteralDeclaration_1; }

		//">"
		public Keyword getGtGreaterThanSignKeyword_1_0() { return cGtGreaterThanSignKeyword_1_0; }

		//leq="<="
		public EnumLiteralDeclaration getLeqEnumLiteralDeclaration_2() { return cLeqEnumLiteralDeclaration_2; }

		//"<="
		public Keyword getLeqLessThanSignEqualsSignKeyword_2_0() { return cLeqLessThanSignEqualsSignKeyword_2_0; }

		//geq=">="
		public EnumLiteralDeclaration getGeqEnumLiteralDeclaration_3() { return cGeqEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGeqGreaterThanSignEqualsSignKeyword_3_0() { return cGeqGreaterThanSignEqualsSignKeyword_3_0; }
	}

	public class MathOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MathOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddPlusSignKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSubEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSubHyphenMinusKeyword_1_0 = (Keyword)cSubEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMulEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMulAsteriskKeyword_2_0 = (Keyword)cMulEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDivSolidusKeyword_3_0 = (Keyword)cDivEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum MathOperator:
		//	add="+" | sub="-" | mul="*" | div="/";
		public EnumRule getRule() { return rule; }

		//add="+" | sub="-" | mul="*" | div="/"
		public Alternatives getAlternatives() { return cAlternatives; }

		//add="+"
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getAddPlusSignKeyword_0_0() { return cAddPlusSignKeyword_0_0; }

		//sub="-"
		public EnumLiteralDeclaration getSubEnumLiteralDeclaration_1() { return cSubEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getSubHyphenMinusKeyword_1_0() { return cSubHyphenMinusKeyword_1_0; }

		//mul="*"
		public EnumLiteralDeclaration getMulEnumLiteralDeclaration_2() { return cMulEnumLiteralDeclaration_2; }

		//"*"
		public Keyword getMulAsteriskKeyword_2_0() { return cMulAsteriskKeyword_2_0; }

		//div="/"
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_3() { return cDivEnumLiteralDeclaration_3; }

		//"/"
		public Keyword getDivSolidusKeyword_3_0() { return cDivSolidusKeyword_3_0; }
	}

	public class UnaryMathOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryMathOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlusPlusSignKeyword_0_0 = (Keyword)cPlusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_1_0 = (Keyword)cMinusEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UnaryMathOperator:
		//	plus="+" | minus="-";
		public EnumRule getRule() { return rule; }

		//plus="+" | minus="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//plus="+"
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_0() { return cPlusEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPlusPlusSignKeyword_0_0() { return cPlusPlusSignKeyword_0_0; }

		//minus="-"
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_1() { return cMinusEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMinusHyphenMinusKeyword_1_0() { return cMinusHyphenMinusKeyword_1_0; }
	}

	public class AssignmentOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSetEqualsSignKeyword_0_0 = (Keyword)cSetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAddPlusSignEqualsSignKeyword_1_0 = (Keyword)cAddEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSubEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSubHyphenMinusEqualsSignKeyword_2_0 = (Keyword)cSubEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AssignmentOperator:
		//	set="=" | add="+=" | sub="-=";
		public EnumRule getRule() { return rule; }

		//set="=" | add="+=" | sub="-="
		public Alternatives getAlternatives() { return cAlternatives; }

		//set="="
		public EnumLiteralDeclaration getSetEnumLiteralDeclaration_0() { return cSetEnumLiteralDeclaration_0; }

		//"="
		public Keyword getSetEqualsSignKeyword_0_0() { return cSetEqualsSignKeyword_0_0; }

		//add="+="
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_1() { return cAddEnumLiteralDeclaration_1; }

		//"+="
		public Keyword getAddPlusSignEqualsSignKeyword_1_0() { return cAddPlusSignEqualsSignKeyword_1_0; }

		//sub="-="
		public EnumLiteralDeclaration getSubEnumLiteralDeclaration_2() { return cSubEnumLiteralDeclaration_2; }

		//"-="
		public Keyword getSubHyphenMinusEqualsSignKeyword_2_0() { return cSubHyphenMinusEqualsSignKeyword_2_0; }
	}

	public class PPOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PPOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIncEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIncPlusSignPlusSignKeyword_0_0 = (Keyword)cIncEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDecEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDecHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cDecEnumLiteralDeclaration_1.eContents().get(0);
		
		//// Null is added by preprocessor		
		//enum PPOperator:
		//	inc="++" | dec="--";
		public EnumRule getRule() { return rule; }

		//inc="++" | dec="--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//inc="++"
		public EnumLiteralDeclaration getIncEnumLiteralDeclaration_0() { return cIncEnumLiteralDeclaration_0; }

		//"++"
		public Keyword getIncPlusSignPlusSignKeyword_0_0() { return cIncPlusSignPlusSignKeyword_0_0; }

		//dec="--"
		public EnumLiteralDeclaration getDecEnumLiteralDeclaration_1() { return cDecEnumLiteralDeclaration_1; }

		//"--"
		public Keyword getDecHyphenMinusHyphenMinusKeyword_1_0() { return cDecHyphenMinusHyphenMinusKeyword_1_0; }
	}

	public class AnnotationTargetSpecElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationTargetSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cModuleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cModuleModuleKeyword_0_0 = (Keyword)cModuleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRuleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRuleRuleKeyword_1_0 = (Keyword)cRuleEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cParameterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cParameterParameterKeyword_2_0 = (Keyword)cParameterEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AnnotationTargetSpec:
		//	module | rule | parameter;
		public EnumRule getRule() { return rule; }

		//module | rule | parameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//module
		public EnumLiteralDeclaration getModuleEnumLiteralDeclaration_0() { return cModuleEnumLiteralDeclaration_0; }

		//"module"
		public Keyword getModuleModuleKeyword_0_0() { return cModuleModuleKeyword_0_0; }

		//rule
		public EnumLiteralDeclaration getRuleEnumLiteralDeclaration_1() { return cRuleEnumLiteralDeclaration_1; }

		//"rule"
		public Keyword getRuleRuleKeyword_1_0() { return cRuleRuleKeyword_1_0; }

		//parameter
		public EnumLiteralDeclaration getParameterEnumLiteralDeclaration_2() { return cParameterEnumLiteralDeclaration_2; }

		//"parameter"
		public Keyword getParameterParameterKeyword_2_0() { return cParameterParameterKeyword_2_0; }
	}
	
	private ModuleElements pModule;
	private ModuleReferenceElements pModuleReference;
	private MetamodelDeclarationElements pMetamodelDeclaration;
	private PropertyElements pProperty;
	private VisibilityModifierElements unknownRuleVisibilityModifier;
	private RuleDeclarationElements pRuleDeclaration;
	private RuleReferenceElements pRuleReference;
	private SimpleRuleReferenceElements pSimpleRuleReference;
	private QualifiedRuleReferenceElements pQualifiedRuleReference;
	private ParameterReferenceElements pParameterReference;
	private SimpleParameterReferenceElements pSimpleParameterReference;
	private QualifiedParameterReferenceElements pQualifiedParameterReference;
	private TriggerElements pTrigger;
	private JavaSpecElements pJavaSpec;
	private ExecutionModifierElements unknownRuleExecutionModifier;
	private ParameterElements pParameter;
	private FormalParameterElements pFormalParameter;
	private ReturnParameterElements pReturnParameter;
	private FormalParameterModifierElements unknownRuleFormalParameterModifier;
	private ReturnParameterModifierElements unknownRuleReturnParameterModifier;
	private TypeElements pType;
	private ReferenceTypeElements pReferenceType;
	private PrimitiveTypeElements pPrimitiveType;
	private PrimitiveTypeSpecElements unknownRulePrimitiveTypeSpec;
	private CollectionTypeElements pCollectionType;
	private CollectionTypeSpecElements unknownRuleCollectionTypeSpec;
	private BlockElements pBlock;
	private BlockStatementElements pBlockStatement;
	private StatementElements pStatement;
	private LocalVariableDeclarationStatementElements pLocalVariableDeclarationStatement;
	private LocalVariableDeclarationElements pLocalVariableDeclaration;
	private VarDeclarationElements pVarDeclaration;
	private TypedVarDeclarationElements pTypedVarDeclaration;
	private InferredVarDeclarationElements pInferredVarDeclaration;
	private ExpressionStatementElements pExpressionStatement;
	private StatementExpressionElements pStatementExpression;
	private EmptyStatementElements pEmptyStatement;
	private ReturnStatementElements pReturnStatement;
	private IfStatementElements pIfStatement;
	private WhileStatementElements pWhileStatement;
	private DoStatementElements pDoStatement;
	private ForInitElements pForInit;
	private ForUpdateElements pForUpdate;
	private ForStatementElements pForStatement;
	private LoopVariableElements pLoopVariable;
	private BreakStatementElements pBreakStatement;
	private ThrowStatementElements pThrowStatement;
	private TryStatementElements pTryStatement;
	private CatchElements pCatch;
	private ExpressionElements pExpression;
	private Expression_10Elements pExpression_10;
	private Expression_1Elements pExpression_1;
	private BooleanOperatorElements unknownRuleBooleanOperator;
	private Expression_2Elements pExpression_2;
	private EqualityOperatorElements unknownRuleEqualityOperator;
	private Expression_3Elements pExpression_3;
	private RelationalOperatorElements unknownRuleRelationalOperator;
	private Expression_5Elements pExpression_5;
	private MathOperatorElements unknownRuleMathOperator;
	private Expression_6Elements pExpression_6;
	private Expression_7Elements pExpression_7;
	private Expression_8Elements pExpression_8;
	private UnaryMathOperatorElements unknownRuleUnaryMathOperator;
	private Expression_9Elements pExpression_9;
	private Expression_11Elements pExpression_11;
	private TerminalExpressionElements pTerminalExpression;
	private LiteralElements pLiteral;
	private StringLiteralElements pStringLiteral;
	private IntLiteralElements pIntLiteral;
	private RealLiteralElements pRealLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private NullLiteralElements pNullLiteral;
	private TerminalRule tFLOAT;
	private ClassInstanceCreationExpressionElements pClassInstanceCreationExpression;
	private RuleInvocationElements pRuleInvocation;
	private RuleInvocationSuperElements pRuleInvocationSuper;
	private FeatureElements pFeature;
	private MethodInvocationElements pMethodInvocation;
	private FeatureMethodInvocationElements pFeatureMethodInvocation;
	private NativeOperationInvocationElements pNativeOperationInvocation;
	private MetamodelFeatureElements pMetamodelFeature;
	private FeatureFieldElements pFeatureField;
	private VariableAccessElements pVariableAccess;
	private StaticAccessElements pStaticAccess;
	private AssignmentOperatorElements unknownRuleAssignmentOperator;
	private PPOperatorElements unknownRulePPOperator;
	private FQNElements pFQN;
	private AnnotationsDefinitionElements pAnnotationsDefinition;
	private AnnotationDeclElements pAnnotationDecl;
	private AnnotationTargetSpecElements unknownRuleAnnotationTargetSpec;
	private AnnotationPropertyDeclElements pAnnotationPropertyDecl;
	private AnnotationElements pAnnotation;
	private AnnotationPropertyElements pAnnotationProperty;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MitraGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Rules and Types
	//Module:
	//	("package" packageName=FQN ";"?)? "module" name=ID ";" ("import" imports+=ModuleReference ";")*
	//	(metamodelDeclarations+=MetamodelDeclaration ";")* (annotationDefinitions+=AnnotationsDefinition ";")*
	//	ruleDeclarations+=RuleDeclaration*;
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//ModuleReference:
	//	module=[Module|FQN];
	public ModuleReferenceElements getModuleReferenceAccess() {
		return (pModuleReference != null) ? pModuleReference : (pModuleReference = new ModuleReferenceElements());
	}
	
	public ParserRule getModuleReferenceRule() {
		return getModuleReferenceAccess().getRule();
	}

	/// ** 
	// * Fully qualified name for rules and return parameter mappings.
	// * The ":" is used insteaf "." to distinguish feature access from rule calls.
	// * A feature access must no start with a method call, thus 
	// * <code>foo()</code> must be a rule call. <code>a.foo()</code> is a feature 
	// * access, method <code>foo()</code> is called on object <code>a</code>.
	// * On the other hand, <code>a:foo()</code> is a rule invocation, rule 
	// * <code>foo()</code> is called in module <code>a</code>. 
	// *
	// * If both, feature access and rule calls, i.e. fully qualified names, were
	// * using the same separator char, <code>a.foo()</code> could eigther be a 
	// * feature access (method call on object a) or a rule invocation (rule foo in
	// * module a).
	// * / // FQN: parts+=ID (":" parts+=ID)*;			
	//MetamodelDeclaration:
	//	"metamodel" type=ID name=ID ("(" (properties+=Property ("," properties+=Property)*)? ")")? ("replaces" (replaces+=ID
	//	("," replaces+=ID)*))?;
	public MetamodelDeclarationElements getMetamodelDeclarationAccess() {
		return (pMetamodelDeclaration != null) ? pMetamodelDeclaration : (pMetamodelDeclaration = new MetamodelDeclarationElements());
	}
	
	public ParserRule getMetamodelDeclarationRule() {
		return getMetamodelDeclarationAccess().getRule();
	}

	//Property:
	//	name=ID "=" value=STRING;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//enum VisibilityModifier:
	//	public | private;
	public VisibilityModifierElements getVisibilityModifierAccess() {
		return (unknownRuleVisibilityModifier != null) ? unknownRuleVisibilityModifier : (unknownRuleVisibilityModifier = new VisibilityModifierElements());
	}
	
	public EnumRule getVisibilityModifierRule() {
		return getVisibilityModifierAccess().getRule();
	}

	//RuleDeclaration:
	//	annotations+=Annotation* visibility=VisibilityModifier? exec=ExecutionModifier (traced?="traced" |
	//	stealth?="stealth")? virtual?="virtual"? multi?="multi"? name=ID "(" (formalParameters+=FormalParameter (","
	//	formalParameters+=FormalParameter)*)? ")" (":" "(" returnParameters+=ReturnParameter (","
	//	returnParameters+=ReturnParameter)* ")")? ("implements" implementedRules+=SimpleRuleReference (","
	//	implementedRules+=SimpleRuleReference)*)? ("overrides" overriddenRule=SimpleRuleReference)? // only one rule can be overridden (see super call)
	//	("excludedBy" excludingRules+=SimpleRuleReference ("," excludingRules+=SimpleRuleReference)*)? trigger=Trigger? (";" |
	//	javaSpec=JavaSpec ";" | body=Block);
	public RuleDeclarationElements getRuleDeclarationAccess() {
		return (pRuleDeclaration != null) ? pRuleDeclaration : (pRuleDeclaration = new RuleDeclarationElements());
	}
	
	public ParserRule getRuleDeclarationRule() {
		return getRuleDeclarationAccess().getRule();
	}

	//// added: overloadingRules
	//// added: triggeredRules
	//RuleReference:
	//	SimpleRuleReference | QualifiedRuleReference;
	public RuleReferenceElements getRuleReferenceAccess() {
		return (pRuleReference != null) ? pRuleReference : (pRuleReference = new RuleReferenceElements());
	}
	
	public ParserRule getRuleReferenceRule() {
		return getRuleReferenceAccess().getRule();
	}

	//// added: ruleDeclaration=RuleDeclaration		
	//SimpleRuleReference:
	//	ruleDeclaration=[RuleDeclaration|FQN] "(" parameterReferences+=SimpleParameterReference (","
	//	parameterReferences+=SimpleParameterReference)* ")" (":" "(" returnReferences+=SimpleParameterReference (","
	//	returnReferences+=SimpleParameterReference)* ")")?;
	public SimpleRuleReferenceElements getSimpleRuleReferenceAccess() {
		return (pSimpleRuleReference != null) ? pSimpleRuleReference : (pSimpleRuleReference = new SimpleRuleReferenceElements());
	}
	
	public ParserRule getSimpleRuleReferenceRule() {
		return getSimpleRuleReferenceAccess().getRule();
	}

	//QualifiedRuleReference:
	//	ruleDeclaration=[RuleDeclaration|FQN] "(" parameterReferences+=QualifiedParameterReference (","
	//	parameterReferences+=QualifiedParameterReference)* ")" (":" "(" returnReferences+=QualifiedParameterReference (","
	//	returnReferences+=QualifiedParameterReference)* ")")?;
	public QualifiedRuleReferenceElements getQualifiedRuleReferenceAccess() {
		return (pQualifiedRuleReference != null) ? pQualifiedRuleReference : (pQualifiedRuleReference = new QualifiedRuleReferenceElements());
	}
	
	public ParserRule getQualifiedRuleReferenceRule() {
		return getQualifiedRuleReferenceAccess().getRule();
	}

	//ParameterReference:
	//	QualifiedParameterReference | SimpleParameterReference;
	public ParameterReferenceElements getParameterReferenceAccess() {
		return (pParameterReference != null) ? pParameterReference : (pParameterReference = new ParameterReferenceElements());
	}
	
	public ParserRule getParameterReferenceRule() {
		return getParameterReferenceAccess().getRule();
	}

	//SimpleParameterReference:
	//	type=Type name=ID?;
	public SimpleParameterReferenceElements getSimpleParameterReferenceAccess() {
		return (pSimpleParameterReference != null) ? pSimpleParameterReference : (pSimpleParameterReference = new SimpleParameterReferenceElements());
	}
	
	public ParserRule getSimpleParameterReferenceRule() {
		return getSimpleParameterReferenceAccess().getRule();
	}

	//QualifiedParameterReference:
	//	vardecl=TypedVarDeclaration;
	public QualifiedParameterReferenceElements getQualifiedParameterReferenceAccess() {
		return (pQualifiedParameterReference != null) ? pQualifiedParameterReference : (pQualifiedParameterReference = new QualifiedParameterReferenceElements());
	}
	
	public ParserRule getQualifiedParameterReferenceRule() {
		return getQualifiedParameterReferenceAccess().getRule();
	}

	//// Trigger
	//Trigger:
	//	"trigger" "(" triggerRules+=QualifiedRuleReference ("," triggerRules+=QualifiedRuleReference)* ")" ("with"
	//	^with=Block)? ("when" "(" when=Expression ")")?;
	public TriggerElements getTriggerAccess() {
		return (pTrigger != null) ? pTrigger : (pTrigger = new TriggerElements());
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//JavaSpec:
	//	"java" "(" properties+=Property ("," properties+=Property)* ")";
	public JavaSpecElements getJavaSpecAccess() {
		return (pJavaSpec != null) ? pJavaSpec : (pJavaSpec = new JavaSpecElements());
	}
	
	public ParserRule getJavaSpecRule() {
		return getJavaSpecAccess().getRule();
	}

	/// **
	//called is the default modifier is no modifier is sepcified
	// * / enum ExecutionModifier:
	//	called | abstract | manual | auto | confirm;
	public ExecutionModifierElements getExecutionModifierAccess() {
		return (unknownRuleExecutionModifier != null) ? unknownRuleExecutionModifier : (unknownRuleExecutionModifier = new ExecutionModifierElements());
	}
	
	public EnumRule getExecutionModifierRule() {
		return getExecutionModifierAccess().getRule();
	}

	//Parameter:
	//	FormalParameter | ReturnParameter;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//FormalParameter:
	//	annotations+=Annotation* modifier=FormalParameterModifier? vardecl=TypedVarDeclaration;
	public FormalParameterElements getFormalParameterAccess() {
		return (pFormalParameter != null) ? pFormalParameter : (pFormalParameter = new FormalParameterElements());
	}
	
	public ParserRule getFormalParameterRule() {
		return getFormalParameterAccess().getRule();
	}

	//ReturnParameter:
	//	annotations+=Annotation* modifier=ReturnParameterModifier? vardecl=TypedVarDeclaration;
	public ReturnParameterElements getReturnParameterAccess() {
		return (pReturnParameter != null) ? pReturnParameter : (pReturnParameter = new ReturnParameterElements());
	}
	
	public ParserRule getReturnParameterRule() {
		return getReturnParameterAccess().getRule();
	}

	/// **
	//use is the default value if nothing is specified
	// * / enum FormalParameterModifier returns ParameterModifier:
	//	use | from | into;
	public FormalParameterModifierElements getFormalParameterModifierAccess() {
		return (unknownRuleFormalParameterModifier != null) ? unknownRuleFormalParameterModifier : (unknownRuleFormalParameterModifier = new FormalParameterModifierElements());
	}
	
	public EnumRule getFormalParameterModifierRule() {
		return getFormalParameterModifierAccess().getRule();
	}

	/// **
	//return is the default value if nothing is specified
	// * / enum ReturnParameterModifier returns ParameterModifier:
	//	return | create;
	public ReturnParameterModifierElements getReturnParameterModifierAccess() {
		return (unknownRuleReturnParameterModifier != null) ? unknownRuleReturnParameterModifier : (unknownRuleReturnParameterModifier = new ReturnParameterModifierElements());
	}
	
	public EnumRule getReturnParameterModifierRule() {
		return getReturnParameterModifierAccess().getRule();
	}

	//Type:
	//	PrimitiveType | CollectionType | ReferenceType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ReferenceType:
	//	metamodelDeclaration=[MetamodelDeclaration] "::" eClassifier=[ecore::EClassifier];
	public ReferenceTypeElements getReferenceTypeAccess() {
		return (pReferenceType != null) ? pReferenceType : (pReferenceType = new ReferenceTypeElements());
	}
	
	public ParserRule getReferenceTypeRule() {
		return getReferenceTypeAccess().getRule();
	}

	//PrimitiveType:
	//	primitiveType=PrimitiveTypeSpec;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (pPrimitiveType != null) ? pPrimitiveType : (pPrimitiveType = new PrimitiveTypeElements());
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//enum PrimitiveTypeSpec:
	//	void | any | string="String" | int | boolean | real | type="Type";
	public PrimitiveTypeSpecElements getPrimitiveTypeSpecAccess() {
		return (unknownRulePrimitiveTypeSpec != null) ? unknownRulePrimitiveTypeSpec : (unknownRulePrimitiveTypeSpec = new PrimitiveTypeSpecElements());
	}
	
	public EnumRule getPrimitiveTypeSpecRule() {
		return getPrimitiveTypeSpecAccess().getRule();
	}

	//CollectionType:
	//	collectionType=CollectionTypeSpec ("(" typePar=Type ")")?;
	public CollectionTypeElements getCollectionTypeAccess() {
		return (pCollectionType != null) ? pCollectionType : (pCollectionType = new CollectionTypeElements());
	}
	
	public ParserRule getCollectionTypeRule() {
		return getCollectionTypeAccess().getRule();
	}

	//enum CollectionTypeSpec:
	//	Collection | Set | OrderedSet | Bag | Sequence;
	public CollectionTypeSpecElements getCollectionTypeSpecAccess() {
		return (unknownRuleCollectionTypeSpec != null) ? unknownRuleCollectionTypeSpec : (unknownRuleCollectionTypeSpec = new CollectionTypeSpecElements());
	}
	
	public EnumRule getCollectionTypeSpecRule() {
		return getCollectionTypeSpecAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//// Rule Body with Statements	
	//// -----------------------------------------------------------------------------
	//Block:
	//	{Block} "{" statements+=BlockStatement* "}";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//BlockStatement:
	//	LocalVariableDeclarationStatement | Statement;
	public BlockStatementElements getBlockStatementAccess() {
		return (pBlockStatement != null) ? pBlockStatement : (pBlockStatement = new BlockStatementElements());
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}

	//Statement:
	//	IfStatement // ForEachStatement |
	//	| ReturnStatement | WhileStatement | DoStatement | ForStatement | BreakStatement | ThrowStatement | TryStatement |
	//	ExpressionStatement | EmptyStatement | Block;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//LocalVariableDeclarationStatement:
	//	localVariableDeclaration=LocalVariableDeclaration ";";
	public LocalVariableDeclarationStatementElements getLocalVariableDeclarationStatementAccess() {
		return (pLocalVariableDeclarationStatement != null) ? pLocalVariableDeclarationStatement : (pLocalVariableDeclarationStatement = new LocalVariableDeclarationStatementElements());
	}
	
	public ParserRule getLocalVariableDeclarationStatementRule() {
		return getLocalVariableDeclarationStatementAccess().getRule();
	}

	//LocalVariableDeclaration:
	//	vardecl=TypedVarDeclaration ("=" expression=Expression)?;
	public LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return (pLocalVariableDeclaration != null) ? pLocalVariableDeclaration : (pLocalVariableDeclaration = new LocalVariableDeclarationElements());
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//VarDeclaration:
	//	TypedVarDeclaration | InferredVarDeclaration;
	public VarDeclarationElements getVarDeclarationAccess() {
		return (pVarDeclaration != null) ? pVarDeclaration : (pVarDeclaration = new VarDeclarationElements());
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}

	//TypedVarDeclaration:
	//	type=Type name=ID;
	public TypedVarDeclarationElements getTypedVarDeclarationAccess() {
		return (pTypedVarDeclaration != null) ? pTypedVarDeclaration : (pTypedVarDeclaration = new TypedVarDeclarationElements());
	}
	
	public ParserRule getTypedVarDeclarationRule() {
		return getTypedVarDeclarationAccess().getRule();
	}

	//InferredVarDeclaration:
	//	type=Type? name=ID;
	public InferredVarDeclarationElements getInferredVarDeclarationAccess() {
		return (pInferredVarDeclaration != null) ? pInferredVarDeclaration : (pInferredVarDeclaration = new InferredVarDeclarationElements());
	}
	
	public ParserRule getInferredVarDeclarationRule() {
		return getInferredVarDeclarationAccess().getRule();
	}

	//ExpressionStatement:
	//	statementExpression=StatementExpression ";";
	public ExpressionStatementElements getExpressionStatementAccess() {
		return (pExpressionStatement != null) ? pExpressionStatement : (pExpressionStatement = new ExpressionStatementElements());
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}

	//StatementExpression:
	//	ClassInstanceCreationExpression | RuleInvocation | RuleInvocationSuper | StaticAccess | VariableAccess
	//	({Assignment.lhs+=current} operator=AssignmentOperator expression=Expression | {Assignment.lhs+=current} (","
	//	lhs+=VariableAccess)+ operator=AssignmentOperator expression=Expression)?;
	public StatementExpressionElements getStatementExpressionAccess() {
		return (pStatementExpression != null) ? pStatementExpression : (pStatementExpression = new StatementExpressionElements());
	}
	
	public ParserRule getStatementExpressionRule() {
		return getStatementExpressionAccess().getRule();
	}

	//EmptyStatement:
	//	{EmptyStatement} ";";
	public EmptyStatementElements getEmptyStatementAccess() {
		return (pEmptyStatement != null) ? pEmptyStatement : (pEmptyStatement = new EmptyStatementElements());
	}
	
	public ParserRule getEmptyStatementRule() {
		return getEmptyStatementAccess().getRule();
	}

	//ReturnStatement:
	//	{ReturnStatement} "return" expression=Expression? ";";
	public ReturnStatementElements getReturnStatementAccess() {
		return (pReturnStatement != null) ? pReturnStatement : (pReturnStatement = new ReturnStatementElements());
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//IfStatement:
	//	"if" "(" expression=Expression ")" trueStatement=Statement ("else" elseStatement=Statement)?;
	public IfStatementElements getIfStatementAccess() {
		return (pIfStatement != null) ? pIfStatement : (pIfStatement = new IfStatementElements());
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//WhileStatement:
	//	"while" "(" expression=Expression ")" statement=Statement;
	public WhileStatementElements getWhileStatementAccess() {
		return (pWhileStatement != null) ? pWhileStatement : (pWhileStatement = new WhileStatementElements());
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//DoStatement:
	//	"do" statement=Statement "while" "(" expression=Expression ")" ";";
	public DoStatementElements getDoStatementAccess() {
		return (pDoStatement != null) ? pDoStatement : (pDoStatement = new DoStatementElements());
	}
	
	public ParserRule getDoStatementRule() {
		return getDoStatementAccess().getRule();
	}

	//ForInit:
	//	{ForInit} (statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration (","
	//	statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration)*)?;
	public ForInitElements getForInitAccess() {
		return (pForInit != null) ? pForInit : (pForInit = new ForInitElements());
	}
	
	public ParserRule getForInitRule() {
		return getForInitAccess().getRule();
	}

	//ForUpdate:
	//	statementExpression+=StatementExpression ("," statementExpression+=StatementExpression)*;
	public ForUpdateElements getForUpdateAccess() {
		return (pForUpdate != null) ? pForUpdate : (pForUpdate = new ForUpdateElements());
	}
	
	public ParserRule getForUpdateRule() {
		return getForUpdateAccess().getRule();
	}

	//ForStatement:
	//	"for" "(" (loopVariable=LoopVariable ":" expression=Expression | forInit=ForInit? ";" expression=Expression? ";"
	//	forUpdate=ForUpdate?) ")" statement=Statement;
	public ForStatementElements getForStatementAccess() {
		return (pForStatement != null) ? pForStatement : (pForStatement = new ForStatementElements());
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//LoopVariable:
	//	vardecl=VarDeclaration;
	public LoopVariableElements getLoopVariableAccess() {
		return (pLoopVariable != null) ? pLoopVariable : (pLoopVariable = new LoopVariableElements());
	}
	
	public ParserRule getLoopVariableRule() {
		return getLoopVariableAccess().getRule();
	}

	//BreakStatement:
	//	{BreakStatement} "break" ";";
	public BreakStatementElements getBreakStatementAccess() {
		return (pBreakStatement != null) ? pBreakStatement : (pBreakStatement = new BreakStatementElements());
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}

	//ThrowStatement:
	//	"throw" expression=Expression ";";
	public ThrowStatementElements getThrowStatementAccess() {
		return (pThrowStatement != null) ? pThrowStatement : (pThrowStatement = new ThrowStatementElements());
	}
	
	public ParserRule getThrowStatementRule() {
		return getThrowStatementAccess().getRule();
	}

	//TryStatement:
	//	"try" tryBlock=Block catches+=Catch* ("finally" finallyBlock=Block)?;
	public TryStatementElements getTryStatementAccess() {
		return (pTryStatement != null) ? pTryStatement : (pTryStatement = new TryStatementElements());
	}
	
	public ParserRule getTryStatementRule() {
		return getTryStatementAccess().getRule();
	}

	//Catch:
	//	"catch" "(" formalParameter=FormalParameter ")" block=Block;
	public CatchElements getCatchAccess() {
		return (pCatch != null) ? pCatch : (pCatch = new CatchElements());
	}
	
	public ParserRule getCatchRule() {
		return getCatchAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//// Expressions	
	//// -----------------------------------------------------------------------------
	//Expression:
	//	Expression_10;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// Iterator Expression, e.g., as in "collect(e|e.name)"
	//Expression_10 returns Expression:
	//	{IteratorExpression} variable=LoopVariable "|" expression=Expression_1 | Expression_1;
	public Expression_10Elements getExpression_10Access() {
		return (pExpression_10 != null) ? pExpression_10 : (pExpression_10 = new Expression_10Elements());
	}
	
	public ParserRule getExpression_10Rule() {
		return getExpression_10Access().getRule();
	}

	/// * *************
	// * Infix expression:
	// *************** * / // Boolean operations	
	//Expression_1 returns Expression:
	//	Expression_2 ({BooleanExpression.lhs=current} op=BooleanOperator rhs=Expression_2)*;
	public Expression_1Elements getExpression_1Access() {
		return (pExpression_1 != null) ? pExpression_1 : (pExpression_1 = new Expression_1Elements());
	}
	
	public ParserRule getExpression_1Rule() {
		return getExpression_1Access().getRule();
	}

	//// short circuited and standard operators
	//enum BooleanOperator:
	//	and="&" | or="|" | andsc="&&" | orsc="||";
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return (unknownRuleBooleanOperator != null) ? unknownRuleBooleanOperator : (unknownRuleBooleanOperator = new BooleanOperatorElements());
	}
	
	public EnumRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}

	//// Equality Expression
	//Expression_2 returns Expression:
	//	Expression_3 ({EqualityExpression.lhs=current} op=EqualityOperator rhs=Expression_3)*;
	public Expression_2Elements getExpression_2Access() {
		return (pExpression_2 != null) ? pExpression_2 : (pExpression_2 = new Expression_2Elements());
	}
	
	public ParserRule getExpression_2Rule() {
		return getExpression_2Access().getRule();
	}

	//enum EqualityOperator:
	//	eq="==" | neq="!=";
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return (unknownRuleEqualityOperator != null) ? unknownRuleEqualityOperator : (unknownRuleEqualityOperator = new EqualityOperatorElements());
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//// Relational
	//Expression_3 returns Expression:
	//	Expression_5 ({RelationalExpression.lhs=current} op=RelationalOperator rhs=Expression_5)*;
	public Expression_3Elements getExpression_3Access() {
		return (pExpression_3 != null) ? pExpression_3 : (pExpression_3 = new Expression_3Elements());
	}
	
	public ParserRule getExpression_3Rule() {
		return getExpression_3Access().getRule();
	}

	//enum RelationalOperator:
	//	lt="<" | gt=">" | leq="<=" | geq=">=";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (unknownRuleRelationalOperator != null) ? unknownRuleRelationalOperator : (unknownRuleRelationalOperator = new RelationalOperatorElements());
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//// In-Expression
	////Expression_4 returns Expression:
	////	Expression_5
	////	({InExpression.lhs=current} "in" rhs=Expression_5)*;
	//// Math-Expression
	//Expression_5 returns Expression:
	//	Expression_6 ({MathExpression.lhs=current} op=MathOperator rhs=Expression_6)*;
	public Expression_5Elements getExpression_5Access() {
		return (pExpression_5 != null) ? pExpression_5 : (pExpression_5 = new Expression_5Elements());
	}
	
	public ParserRule getExpression_5Rule() {
		return getExpression_5Access().getRule();
	}

	//enum MathOperator:
	//	add="+" | sub="-" | mul="*" | div="/";
	public MathOperatorElements getMathOperatorAccess() {
		return (unknownRuleMathOperator != null) ? unknownRuleMathOperator : (unknownRuleMathOperator = new MathOperatorElements());
	}
	
	public EnumRule getMathOperatorRule() {
		return getMathOperatorAccess().getRule();
	}

	//// Unary expression:
	//Expression_6 returns Expression:
	//	{UnaryCastExpression} "(" type=Type ")" expression=Expression_7 | Expression_7;
	public Expression_6Elements getExpression_6Access() {
		return (pExpression_6 != null) ? pExpression_6 : (pExpression_6 = new Expression_6Elements());
	}
	
	public ParserRule getExpression_6Rule() {
		return getExpression_6Access().getRule();
	}

	//Expression_7 returns Expression:
	//	Expression_8 | {UnaryBooleanExpression} "!" expression=Expression_8;
	public Expression_7Elements getExpression_7Access() {
		return (pExpression_7 != null) ? pExpression_7 : (pExpression_7 = new Expression_7Elements());
	}
	
	public ParserRule getExpression_7Rule() {
		return getExpression_7Access().getRule();
	}

	//Expression_8 returns Expression:
	//	Expression_9 | {UnaryMathExpression} op=UnaryMathOperator expression=Expression_9;
	public Expression_8Elements getExpression_8Access() {
		return (pExpression_8 != null) ? pExpression_8 : (pExpression_8 = new Expression_8Elements());
	}
	
	public ParserRule getExpression_8Rule() {
		return getExpression_8Access().getRule();
	}

	//enum UnaryMathOperator:
	//	plus="+" | minus="-";
	public UnaryMathOperatorElements getUnaryMathOperatorAccess() {
		return (unknownRuleUnaryMathOperator != null) ? unknownRuleUnaryMathOperator : (unknownRuleUnaryMathOperator = new UnaryMathOperatorElements());
	}
	
	public EnumRule getUnaryMathOperatorRule() {
		return getUnaryMathOperatorAccess().getRule();
	}

	//// Instance of
	//Expression_9 returns Expression:
	//	Expression_11 ({InstanceOfExpression.expression=current} "instanceof" type=Type)?;
	public Expression_9Elements getExpression_9Access() {
		return (pExpression_9 != null) ? pExpression_9 : (pExpression_9 = new Expression_9Elements());
	}
	
	public ParserRule getExpression_9Rule() {
		return getExpression_9Access().getRule();
	}

	//Expression_11 returns Expression:
	//	"(" Expression ")" | TerminalExpression;
	public Expression_11Elements getExpression_11Access() {
		return (pExpression_11 != null) ? pExpression_11 : (pExpression_11 = new Expression_11Elements());
	}
	
	public ParserRule getExpression_11Rule() {
		return getExpression_11Access().getRule();
	}

	//TerminalExpression:
	//	Literal | ClassInstanceCreationExpression | RuleInvocation | RuleInvocationSuper | StaticAccess | VariableAccess;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//Literal:
	//	IntLiteral | RealLiteral | BooleanLiteral | StringLiteral | NullLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//// intValue=UINT | stringValue=STRING| booleanValue="false" | booleanValue="true";
	//StringLiteral:
	//	stringValue=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//IntLiteral:
	//	intValue=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return (pIntLiteral != null) ? pIntLiteral : (pIntLiteral = new IntLiteralElements());
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//RealLiteral:
	//	floatValue=FLOAT;
	public RealLiteralElements getRealLiteralAccess() {
		return (pRealLiteral != null) ? pRealLiteral : (pRealLiteral = new RealLiteralElements());
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	{BooleanLiteral} (booleanValue?="true" | "false");
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NullLiteral:
	//	{NullLiteral} "null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//// Lexer Rule
	//// now already defined that way: terminal INT: ('0'..'9')+;
	//terminal FLOAT:
	//	"0".."9"* "." "0".."9"+;
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//ClassInstanceCreationExpression:
	//	"new" type=Type "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public ClassInstanceCreationExpressionElements getClassInstanceCreationExpressionAccess() {
		return (pClassInstanceCreationExpression != null) ? pClassInstanceCreationExpression : (pClassInstanceCreationExpression = new ClassInstanceCreationExpressionElements());
	}
	
	public ParserRule getClassInstanceCreationExpressionRule() {
		return getClassInstanceCreationExpressionAccess().getRule();
	}

	//// RuleInvocation
	//RuleInvocation:
	//	ruleDeclaration=[RuleDeclaration|FQN] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public RuleInvocationElements getRuleInvocationAccess() {
		return (pRuleInvocation != null) ? pRuleInvocation : (pRuleInvocation = new RuleInvocationElements());
	}
	
	public ParserRule getRuleInvocationRule() {
		return getRuleInvocationAccess().getRule();
	}

	//RuleInvocationSuper:
	//	{RuleInvocationSuper} "super";
	public RuleInvocationSuperElements getRuleInvocationSuperAccess() {
		return (pRuleInvocationSuper != null) ? pRuleInvocationSuper : (pRuleInvocationSuper = new RuleInvocationSuperElements());
	}
	
	public ParserRule getRuleInvocationSuperRule() {
		return getRuleInvocationSuperAccess().getRule();
	}

	//Feature:
	//	MethodInvocation | FeatureField;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//MethodInvocation:
	//	FeatureMethodInvocation | NativeOperationInvocation;
	public MethodInvocationElements getMethodInvocationAccess() {
		return (pMethodInvocation != null) ? pMethodInvocation : (pMethodInvocation = new MethodInvocationElements());
	}
	
	public ParserRule getMethodInvocationRule() {
		return getMethodInvocationAccess().getRule();
	}

	//FeatureMethodInvocation:
	//	"." ("<<" expression=Expression ">>" | name=ID) "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public FeatureMethodInvocationElements getFeatureMethodInvocationAccess() {
		return (pFeatureMethodInvocation != null) ? pFeatureMethodInvocation : (pFeatureMethodInvocation = new FeatureMethodInvocationElements());
	}
	
	public ParserRule getFeatureMethodInvocationRule() {
		return getFeatureMethodInvocationAccess().getRule();
	}

	//NativeOperationInvocation:
	//	"->" name=ID "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public NativeOperationInvocationElements getNativeOperationInvocationAccess() {
		return (pNativeOperationInvocation != null) ? pNativeOperationInvocation : (pNativeOperationInvocation = new NativeOperationInvocationElements());
	}
	
	public ParserRule getNativeOperationInvocationRule() {
		return getNativeOperationInvocationAccess().getRule();
	}

	//MetamodelFeature:
	//	FeatureMethodInvocation | FeatureField;
	public MetamodelFeatureElements getMetamodelFeatureAccess() {
		return (pMetamodelFeature != null) ? pMetamodelFeature : (pMetamodelFeature = new MetamodelFeatureElements());
	}
	
	public ParserRule getMetamodelFeatureRule() {
		return getMetamodelFeatureAccess().getRule();
	}

	//FeatureField:
	//	"." ("<<" expression=Expression ">>" | name=ID);
	public FeatureFieldElements getFeatureFieldAccess() {
		return (pFeatureField != null) ? pFeatureField : (pFeatureField = new FeatureFieldElements());
	}
	
	public ParserRule getFeatureFieldRule() {
		return getFeatureFieldAccess().getRule();
	}

	//VariableAccess:
	//	prefixOperator=PPOperator variable=[VarDeclaration] features+=Feature* | variable=[VarDeclaration] features+=Feature*
	//	("default" default=Expression | postfixOperator=PPOperator)?;
	public VariableAccessElements getVariableAccessAccess() {
		return (pVariableAccess != null) ? pVariableAccess : (pVariableAccess = new VariableAccessElements());
	}
	
	public ParserRule getVariableAccessRule() {
		return getVariableAccessAccess().getRule();
	}

	//StaticAccess:
	//	"$" ("<<" expression=Expression ">>" | type=Type) features+=Feature*;
	public StaticAccessElements getStaticAccessAccess() {
		return (pStaticAccess != null) ? pStaticAccess : (pStaticAccess = new StaticAccessElements());
	}
	
	public ParserRule getStaticAccessRule() {
		return getStaticAccessAccess().getRule();
	}

	//enum AssignmentOperator:
	//	set="=" | add="+=" | sub="-=";
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return (unknownRuleAssignmentOperator != null) ? unknownRuleAssignmentOperator : (unknownRuleAssignmentOperator = new AssignmentOperatorElements());
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//// Null is added by preprocessor		
	//enum PPOperator:
	//	inc="++" | dec="--";
	public PPOperatorElements getPPOperatorAccess() {
		return (unknownRulePPOperator != null) ? unknownRulePPOperator : (unknownRulePPOperator = new PPOperatorElements());
	}
	
	public EnumRule getPPOperatorRule() {
		return getPPOperatorAccess().getRule();
	}

	/// ** 
	// * Fully qualified name for rules and return parameter mappings.
	// * The ":" is used instead "." to distinguish feature access from rule calls.
	// * A feature access must no start with a method call, thus 
	// * <code>foo()</code> must be a rule call. <code>a.foo()</code> is a feature 
	// * access, method <code>foo()</code> is called on object <code>a</code>.
	// * On the other hand, <code>a:foo()</code> is a rule invocation, rule 
	// * <code>foo()</code> is called in module <code>a</code>. 
	// *
	// * If both, feature access and rule calls, i.e. fully qualified names, were
	// * using the same separator char, <code>a.foo()</code> could eigther be a 
	// * feature access (method call on object a) or a rule invocation (rule foo in
	// * module a).
	// * / FQN:
	//	ID (":" ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//// Annotations
	//// -----------------------------------------------------------------------------
	//AnnotationsDefinition:
	//	annotationDecls+=AnnotationDecl+;
	public AnnotationsDefinitionElements getAnnotationsDefinitionAccess() {
		return (pAnnotationsDefinition != null) ? pAnnotationsDefinition : (pAnnotationsDefinition = new AnnotationsDefinitionElements());
	}
	
	public ParserRule getAnnotationsDefinitionRule() {
		return getAnnotationsDefinitionAccess().getRule();
	}

	/// **
	// * Annotation Declaration
	// * / AnnotationDecl:
	//	"annotation" name=ID ("(" targets+=AnnotationTargetSpec ("," targets+=AnnotationTargetSpec)* ")")? "{" (("self"
	//	valuetype=PrimitiveType many?="*"? (required?="required" | "=" default=Literal) |
	//	propertyDecls+=AnnotationPropertyDecl) ("," propertyDecls+=AnnotationPropertyDecl)*)? "}";
	public AnnotationDeclElements getAnnotationDeclAccess() {
		return (pAnnotationDecl != null) ? pAnnotationDecl : (pAnnotationDecl = new AnnotationDeclElements());
	}
	
	public ParserRule getAnnotationDeclRule() {
		return getAnnotationDeclAccess().getRule();
	}

	//enum AnnotationTargetSpec:
	//	module | rule | parameter;
	public AnnotationTargetSpecElements getAnnotationTargetSpecAccess() {
		return (unknownRuleAnnotationTargetSpec != null) ? unknownRuleAnnotationTargetSpec : (unknownRuleAnnotationTargetSpec = new AnnotationTargetSpecElements());
	}
	
	public EnumRule getAnnotationTargetSpecRule() {
		return getAnnotationTargetSpecAccess().getRule();
	}

	//AnnotationPropertyDecl:
	//	type=PrimitiveType name=ID (required?="required" | "=" default=Literal);
	public AnnotationPropertyDeclElements getAnnotationPropertyDeclAccess() {
		return (pAnnotationPropertyDecl != null) ? pAnnotationPropertyDecl : (pAnnotationPropertyDecl = new AnnotationPropertyDeclElements());
	}
	
	public ParserRule getAnnotationPropertyDeclRule() {
		return getAnnotationPropertyDeclAccess().getRule();
	}

	/// **
	// * Annotation
	// * / Annotation:
	//	"@" decl=[AnnotationDecl] ("(" (values+=Literal | properties+=AnnotationProperty) ("," (values+=Literal |
	//	properties+=AnnotationProperty))* ")")?;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//AnnotationProperty:
	//	decl=[AnnotationPropertyDecl] "=" value=Literal;
	public AnnotationPropertyElements getAnnotationPropertyAccess() {
		return (pAnnotationProperty != null) ? pAnnotationProperty : (pAnnotationProperty = new AnnotationPropertyElements());
	}
	
	public ParserRule getAnnotationPropertyRule() {
		return getAnnotationPropertyAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
