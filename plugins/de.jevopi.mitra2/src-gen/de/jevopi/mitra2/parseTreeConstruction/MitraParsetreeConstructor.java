/*
* generated by Xtext
*/
package de.jevopi.mitra2.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import de.jevopi.mitra2.services.MitraGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class MitraParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private MitraGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_Group(this, this, 0, inst);
			case 1: return new ModuleReference_ModuleAssignment(this, this, 1, inst);
			case 2: return new MetamodelDeclaration_Group(this, this, 2, inst);
			case 3: return new Property_Group(this, this, 3, inst);
			case 4: return new RuleDeclaration_Group(this, this, 4, inst);
			case 5: return new RuleReference_Alternatives(this, this, 5, inst);
			case 6: return new SimpleRuleReference_Group(this, this, 6, inst);
			case 7: return new QualifiedRuleReference_Group(this, this, 7, inst);
			case 8: return new ParameterReference_Alternatives(this, this, 8, inst);
			case 9: return new SimpleParameterReference_Group(this, this, 9, inst);
			case 10: return new QualifiedParameterReference_VardeclAssignment(this, this, 10, inst);
			case 11: return new Trigger_Group(this, this, 11, inst);
			case 12: return new JavaSpec_Group(this, this, 12, inst);
			case 13: return new Parameter_Alternatives(this, this, 13, inst);
			case 14: return new FormalParameter_Group(this, this, 14, inst);
			case 15: return new ReturnParameter_Group(this, this, 15, inst);
			case 16: return new Type_Alternatives(this, this, 16, inst);
			case 17: return new ReferenceType_Group(this, this, 17, inst);
			case 18: return new PrimitiveType_PrimitiveTypeAssignment(this, this, 18, inst);
			case 19: return new CollectionType_Group(this, this, 19, inst);
			case 20: return new Block_Group(this, this, 20, inst);
			case 21: return new BlockStatement_Alternatives(this, this, 21, inst);
			case 22: return new Statement_Alternatives(this, this, 22, inst);
			case 23: return new LocalVariableDeclarationStatement_Group(this, this, 23, inst);
			case 24: return new LocalVariableDeclaration_Group(this, this, 24, inst);
			case 25: return new VarDeclaration_Alternatives(this, this, 25, inst);
			case 26: return new TypedVarDeclaration_Group(this, this, 26, inst);
			case 27: return new InferredVarDeclaration_Group(this, this, 27, inst);
			case 28: return new ExpressionStatement_Group(this, this, 28, inst);
			case 29: return new StatementExpression_Alternatives(this, this, 29, inst);
			case 30: return new EmptyStatement_Group(this, this, 30, inst);
			case 31: return new ReturnStatement_Group(this, this, 31, inst);
			case 32: return new IfStatement_Group(this, this, 32, inst);
			case 33: return new WhileStatement_Group(this, this, 33, inst);
			case 34: return new DoStatement_Group(this, this, 34, inst);
			case 35: return new ForInit_Group(this, this, 35, inst);
			case 36: return new ForUpdate_Group(this, this, 36, inst);
			case 37: return new ForStatement_Group(this, this, 37, inst);
			case 38: return new LoopVariable_VardeclAssignment(this, this, 38, inst);
			case 39: return new BreakStatement_Group(this, this, 39, inst);
			case 40: return new ThrowStatement_Group(this, this, 40, inst);
			case 41: return new TryStatement_Group(this, this, 41, inst);
			case 42: return new Catch_Group(this, this, 42, inst);
			case 43: return new Expression_Expression_10ParserRuleCall(this, this, 43, inst);
			case 44: return new Expression_10_Alternatives(this, this, 44, inst);
			case 45: return new Expression_1_Group(this, this, 45, inst);
			case 46: return new Expression_2_Group(this, this, 46, inst);
			case 47: return new Expression_3_Group(this, this, 47, inst);
			case 48: return new Expression_5_Group(this, this, 48, inst);
			case 49: return new Expression_6_Alternatives(this, this, 49, inst);
			case 50: return new Expression_7_Alternatives(this, this, 50, inst);
			case 51: return new Expression_8_Alternatives(this, this, 51, inst);
			case 52: return new Expression_9_Group(this, this, 52, inst);
			case 53: return new Expression_11_Alternatives(this, this, 53, inst);
			case 54: return new TerminalExpression_Alternatives(this, this, 54, inst);
			case 55: return new Literal_Alternatives(this, this, 55, inst);
			case 56: return new StringLiteral_StringValueAssignment(this, this, 56, inst);
			case 57: return new IntLiteral_IntValueAssignment(this, this, 57, inst);
			case 58: return new RealLiteral_FloatValueAssignment(this, this, 58, inst);
			case 59: return new BooleanLiteral_Group(this, this, 59, inst);
			case 60: return new NullLiteral_Group(this, this, 60, inst);
			case 61: return new ClassInstanceCreationExpression_Group(this, this, 61, inst);
			case 62: return new RuleInvocation_Group(this, this, 62, inst);
			case 63: return new RuleInvocationSuper_Group(this, this, 63, inst);
			case 64: return new Feature_Alternatives(this, this, 64, inst);
			case 65: return new MethodInvocation_Alternatives(this, this, 65, inst);
			case 66: return new FeatureMethodInvocation_Group(this, this, 66, inst);
			case 67: return new NativeOperationInvocation_Group(this, this, 67, inst);
			case 68: return new MetamodelFeature_Alternatives(this, this, 68, inst);
			case 69: return new FeatureField_Group(this, this, 69, inst);
			case 70: return new VariableAccess_Alternatives(this, this, 70, inst);
			case 71: return new StaticAccess_Group(this, this, 71, inst);
			case 72: return new AnnotationsDefinition_AnnotationDeclsAssignment(this, this, 72, inst);
			case 73: return new AnnotationDecl_Group(this, this, 73, inst);
			case 74: return new AnnotationPropertyDecl_Group(this, this, 74, inst);
			case 75: return new Annotation_Group(this, this, 75, inst);
			case 76: return new AnnotationProperty_Group(this, this, 76, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Module ****************
 *
 * // Rules and Types
 * Module:
 * 	("package" packageName=FQN ";"?)? "module" name=ID ";" ("import" imports+=ModuleReference ";")*
 * 	(metamodelDeclarations+=MetamodelDeclaration ";")* (annotationDefinitions+=AnnotationsDefinition ";")*
 * 	ruleDeclarations+=RuleDeclaration*;
 *
 **/

// ("package" packageName=FQN ";"?)? "module" name=ID ";" ("import" imports+=ModuleReference ";")*
// (metamodelDeclarations+=MetamodelDeclaration ";")* (annotationDefinitions+=AnnotationsDefinition ";")*
// ruleDeclarations+=RuleDeclaration*
protected class Module_Group extends GroupToken {
	
	public Module_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_RuleDeclarationsAssignment_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Module_Group_6(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Module_Group_5(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Module_Group_4(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Module_SemicolonKeyword_3(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ("package" packageName=FQN ";"?)?
protected class Module_Group_0 extends GroupToken {
	
	public Module_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModuleAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_PackageNameAssignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "package"
protected class Module_PackageKeyword_0_0 extends KeywordToken  {
	
	public Module_PackageKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModuleAccess().getPackageKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// packageName=FQN
protected class Module_PackageNameAssignment_0_1 extends AssignmentToken  {
	
	public Module_PackageNameAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getPackageNameAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_PackageKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("packageName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("packageName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getModuleAccess().getPackageNameFQNParserRuleCall_0_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getModuleAccess().getPackageNameFQNParserRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}


// "module"
protected class Module_ModuleKeyword_1 extends KeywordToken  {
	
	public Module_ModuleKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModuleAccess().getModuleKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_Group_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// name=ID
protected class Module_NameAssignment_2 extends AssignmentToken  {
	
	public Module_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_ModuleKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Module_SemicolonKeyword_3 extends KeywordToken  {
	
	public Module_SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModuleAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("import" imports+=ModuleReference ";")*
protected class Module_Group_4 extends GroupToken {
	
	public Module_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModuleAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_SemicolonKeyword_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "import"
protected class Module_ImportKeyword_4_0 extends KeywordToken  {
	
	public Module_ImportKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModuleAccess().getImportKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Module_SemicolonKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// imports+=ModuleReference
protected class Module_ImportsAssignment_4_1 extends AssignmentToken  {
	
	public Module_ImportsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getImportsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModuleReference_ModuleAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("imports",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModuleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModuleAccess().getImportsModuleReferenceParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Module_ImportKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Module_SemicolonKeyword_4_2 extends KeywordToken  {
	
	public Module_SemicolonKeyword_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModuleAccess().getSemicolonKeyword_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_ImportsAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// (metamodelDeclarations+=MetamodelDeclaration ";")*
protected class Module_Group_5 extends GroupToken {
	
	public Module_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModuleAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_SemicolonKeyword_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// metamodelDeclarations+=MetamodelDeclaration
protected class Module_MetamodelDeclarationsAssignment_5_0 extends AssignmentToken  {
	
	public Module_MetamodelDeclarationsAssignment_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getMetamodelDeclarationsAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("metamodelDeclarations",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("metamodelDeclarations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMetamodelDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModuleAccess().getMetamodelDeclarationsMetamodelDeclarationParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Module_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Module_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Module_SemicolonKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Module_SemicolonKeyword_5_1 extends KeywordToken  {
	
	public Module_SemicolonKeyword_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModuleAccess().getSemicolonKeyword_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_MetamodelDeclarationsAssignment_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// (annotationDefinitions+=AnnotationsDefinition ";")*
protected class Module_Group_6 extends GroupToken {
	
	public Module_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModuleAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_SemicolonKeyword_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// annotationDefinitions+=AnnotationsDefinition
protected class Module_AnnotationDefinitionsAssignment_6_0 extends AssignmentToken  {
	
	public Module_AnnotationDefinitionsAssignment_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getAnnotationDefinitionsAssignment_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationsDefinition_AnnotationDeclsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("annotationDefinitions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("annotationDefinitions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationsDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModuleAccess().getAnnotationDefinitionsAnnotationsDefinitionParserRuleCall_6_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Module_Group_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Module_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Module_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new Module_SemicolonKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Module_SemicolonKeyword_6_1 extends KeywordToken  {
	
	public Module_SemicolonKeyword_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModuleAccess().getSemicolonKeyword_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Module_AnnotationDefinitionsAssignment_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ruleDeclarations+=RuleDeclaration*
protected class Module_RuleDeclarationsAssignment_7 extends AssignmentToken  {
	
	public Module_RuleDeclarationsAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getRuleDeclarationsAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ruleDeclarations",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ruleDeclarations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModuleAccess().getRuleDeclarationsRuleDeclarationParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Module_RuleDeclarationsAssignment_7(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Module_Group_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Module_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new Module_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new Module_SemicolonKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Module ****************/


/************ begin Rule ModuleReference ****************
 *
 * ModuleReference:
 * 	module=[Module|FQN];
 *
 **/

// module=[Module|FQN]
protected class ModuleReference_ModuleAssignment extends AssignmentToken  {
	
	public ModuleReference_ModuleAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleReferenceAccess().getModuleAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModuleReferenceRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("module",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("module");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModuleReferenceAccess().getModuleModuleCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getModuleReferenceAccess().getModuleModuleCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule ModuleReference ****************/


/************ begin Rule MetamodelDeclaration ****************
 *
 * / ** 
 * * Fully qualified name for rules and return parameter mappings.
 * * The ":" is used insteaf "." to distinguish feature access from rule calls.
 * * A feature access must no start with a method call, thus 
 * * <code>foo()</code> must be a rule call. <code>a.foo()</code> is a feature 
 * * access, method <code>foo()</code> is called on object <code>a</code>.
 * * On the other hand, <code>a:foo()</code> is a rule invocation, rule 
 * * <code>foo()</code> is called in module <code>a</code>. 
 * *
 * * If both, feature access and rule calls, i.e. fully qualified names, were
 * * using the same separator char, <code>a.foo()</code> could eigther be a 
 * * feature access (method call on object a) or a rule invocation (rule foo in
 * * module a).
 * * / // FQN: parts+=ID (":" parts+=ID)*;			
 * MetamodelDeclaration:
 * 	"metamodel" type=ID name=ID ("(" (properties+=Property ("," properties+=Property)*)? ")")? ("replaces" (replaces+=ID
 * 	("," replaces+=ID)*))?;
 *
 **/

// "metamodel" type=ID name=ID ("(" (properties+=Property ("," properties+=Property)*)? ")")? ("replaces" (replaces+=ID
// ("," replaces+=ID)*))?
protected class MetamodelDeclaration_Group extends GroupToken {
	
	public MetamodelDeclaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MetamodelDeclaration_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new MetamodelDeclaration_NameAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMetamodelDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "metamodel"
protected class MetamodelDeclaration_MetamodelKeyword_0 extends KeywordToken  {
	
	public MetamodelDeclaration_MetamodelKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getMetamodelKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// type=ID
protected class MetamodelDeclaration_TypeAssignment_1 extends AssignmentToken  {
	
	public MetamodelDeclaration_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_MetamodelKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMetamodelDeclarationAccess().getTypeIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMetamodelDeclarationAccess().getTypeIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class MetamodelDeclaration_NameAssignment_2 extends AssignmentToken  {
	
	public MetamodelDeclaration_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMetamodelDeclarationAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMetamodelDeclarationAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("(" (properties+=Property ("," properties+=Property)*)? ")")?
protected class MetamodelDeclaration_Group_3 extends GroupToken {
	
	public MetamodelDeclaration_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_RightParenthesisKeyword_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class MetamodelDeclaration_LeftParenthesisKeyword_3_0 extends KeywordToken  {
	
	public MetamodelDeclaration_LeftParenthesisKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getLeftParenthesisKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (properties+=Property ("," properties+=Property)*)?
protected class MetamodelDeclaration_Group_3_1 extends GroupToken {
	
	public MetamodelDeclaration_Group_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_Group_3_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MetamodelDeclaration_PropertiesAssignment_3_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// properties+=Property
protected class MetamodelDeclaration_PropertiesAssignment_3_1_0 extends AssignmentToken  {
	
	public MetamodelDeclaration_PropertiesAssignment_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getPropertiesAssignment_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Property_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("properties",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMetamodelDeclarationAccess().getPropertiesPropertyParserRuleCall_3_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MetamodelDeclaration_LeftParenthesisKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," properties+=Property)*
protected class MetamodelDeclaration_Group_3_1_1 extends GroupToken {
	
	public MetamodelDeclaration_Group_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getGroup_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_PropertiesAssignment_3_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class MetamodelDeclaration_CommaKeyword_3_1_1_0 extends KeywordToken  {
	
	public MetamodelDeclaration_CommaKeyword_3_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getCommaKeyword_3_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_Group_3_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MetamodelDeclaration_PropertiesAssignment_3_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// properties+=Property
protected class MetamodelDeclaration_PropertiesAssignment_3_1_1_1 extends AssignmentToken  {
	
	public MetamodelDeclaration_PropertiesAssignment_3_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getPropertiesAssignment_3_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Property_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("properties",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMetamodelDeclarationAccess().getPropertiesPropertyParserRuleCall_3_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MetamodelDeclaration_CommaKeyword_3_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class MetamodelDeclaration_RightParenthesisKeyword_3_2 extends KeywordToken  {
	
	public MetamodelDeclaration_RightParenthesisKeyword_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getRightParenthesisKeyword_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_Group_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ("replaces" (replaces+=ID ("," replaces+=ID)*))?
protected class MetamodelDeclaration_Group_4 extends GroupToken {
	
	public MetamodelDeclaration_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_Group_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "replaces"
protected class MetamodelDeclaration_ReplacesKeyword_4_0 extends KeywordToken  {
	
	public MetamodelDeclaration_ReplacesKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getReplacesKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MetamodelDeclaration_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// replaces+=ID ("," replaces+=ID)*
protected class MetamodelDeclaration_Group_4_1 extends GroupToken {
	
	public MetamodelDeclaration_Group_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getGroup_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_Group_4_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MetamodelDeclaration_ReplacesAssignment_4_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// replaces+=ID
protected class MetamodelDeclaration_ReplacesAssignment_4_1_0 extends AssignmentToken  {
	
	public MetamodelDeclaration_ReplacesAssignment_4_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getReplacesAssignment_4_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_ReplacesKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("replaces",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("replaces");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMetamodelDeclarationAccess().getReplacesIDTerminalRuleCall_4_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMetamodelDeclarationAccess().getReplacesIDTerminalRuleCall_4_1_0_0();
			return obj;
		}
		return null;
	}

}

// ("," replaces+=ID)*
protected class MetamodelDeclaration_Group_4_1_1 extends GroupToken {
	
	public MetamodelDeclaration_Group_4_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getGroup_4_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_ReplacesAssignment_4_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class MetamodelDeclaration_CommaKeyword_4_1_1_0 extends KeywordToken  {
	
	public MetamodelDeclaration_CommaKeyword_4_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getCommaKeyword_4_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_Group_4_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MetamodelDeclaration_ReplacesAssignment_4_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// replaces+=ID
protected class MetamodelDeclaration_ReplacesAssignment_4_1_1_1 extends AssignmentToken  {
	
	public MetamodelDeclaration_ReplacesAssignment_4_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMetamodelDeclarationAccess().getReplacesAssignment_4_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelDeclaration_CommaKeyword_4_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("replaces",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("replaces");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMetamodelDeclarationAccess().getReplacesIDTerminalRuleCall_4_1_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMetamodelDeclarationAccess().getReplacesIDTerminalRuleCall_4_1_1_1_0();
			return obj;
		}
		return null;
	}

}





/************ end Rule MetamodelDeclaration ****************/


/************ begin Rule Property ****************
 *
 * Property:
 * 	name=ID "=" value=STRING;
 *
 **/

// name=ID "=" value=STRING
protected class Property_Group extends GroupToken {
	
	public Property_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropertyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Property_ValueAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPropertyRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class Property_NameAssignment_0 extends AssignmentToken  {
	
	public Property_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class Property_EqualsSignKeyword_1 extends KeywordToken  {
	
	public Property_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertyAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Property_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=STRING
protected class Property_ValueAssignment_2 extends AssignmentToken  {
	
	public Property_ValueAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Property_EqualsSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPropertyAccess().getValueSTRINGTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPropertyAccess().getValueSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Property ****************/


/************ begin Rule RuleDeclaration ****************
 *
 * RuleDeclaration:
 * 	annotations+=Annotation* visibility=VisibilityModifier? exec=ExecutionModifier (traced?="traced" |
 * 	stealth?="stealth")? virtual?="virtual"? multi?="multi"? name=ID "(" (formalParameters+=FormalParameter (","
 * 	formalParameters+=FormalParameter)*)? ")" (":" "(" returnParameters+=ReturnParameter (","
 * 	returnParameters+=ReturnParameter)* ")")? ("implements" implementedRules+=SimpleRuleReference (","
 * 	implementedRules+=SimpleRuleReference)*)? ("overrides" overriddenRule=SimpleRuleReference)? // only one rule can be overridden (see super call)
 * 	("excludedBy" excludingRules+=SimpleRuleReference ("," excludingRules+=SimpleRuleReference)*)? trigger=Trigger? (";" |
 * 	javaSpec=JavaSpec ";" | body=Block);
 *
 **/

// annotations+=Annotation* visibility=VisibilityModifier? exec=ExecutionModifier (traced?="traced" | stealth?="stealth")?
// virtual?="virtual"? multi?="multi"? name=ID "(" (formalParameters+=FormalParameter (","
// formalParameters+=FormalParameter)*)? ")" (":" "(" returnParameters+=ReturnParameter (","
// returnParameters+=ReturnParameter)* ")")? ("implements" implementedRules+=SimpleRuleReference (","
// implementedRules+=SimpleRuleReference)*)? ("overrides" overriddenRule=SimpleRuleReference)? // only one rule can be overridden (see super call)
// ("excludedBy" excludingRules+=SimpleRuleReference ("," excludingRules+=SimpleRuleReference)*)? trigger=Trigger? (";" |
// javaSpec=JavaSpec ";" | body=Block)
protected class RuleDeclaration_Group extends GroupToken {
	
	public RuleDeclaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Alternatives_15(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// annotations+=Annotation*
protected class RuleDeclaration_AnnotationsAssignment_0 extends AssignmentToken  {
	
	public RuleDeclaration_AnnotationsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getAnnotationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("annotations",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("annotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDeclarationAccess().getAnnotationsAnnotationParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDeclaration_AnnotationsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// visibility=VisibilityModifier?
protected class RuleDeclaration_VisibilityAssignment_1 extends AssignmentToken  {
	
	public RuleDeclaration_VisibilityAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getVisibilityAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_AnnotationsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("visibility",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("visibility");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getRuleDeclarationAccess().getVisibilityVisibilityModifierEnumRuleCall_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getRuleDeclarationAccess().getVisibilityVisibilityModifierEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// exec=ExecutionModifier
protected class RuleDeclaration_ExecAssignment_2 extends AssignmentToken  {
	
	public RuleDeclaration_ExecAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getExecAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_VisibilityAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_AnnotationsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 2, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("exec",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("exec");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getRuleDeclarationAccess().getExecExecutionModifierEnumRuleCall_2_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getRuleDeclarationAccess().getExecExecutionModifierEnumRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (traced?="traced" | stealth?="stealth")?
protected class RuleDeclaration_Alternatives_3 extends AlternativesToken {

	public RuleDeclaration_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_TracedAssignment_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_StealthAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// traced?="traced"
protected class RuleDeclaration_TracedAssignment_3_0 extends AssignmentToken  {
	
	public RuleDeclaration_TracedAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getTracedAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_ExecAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("traced",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("traced");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getRuleDeclarationAccess().getTracedTracedKeyword_3_0_0();
			return obj;
		}
		return null;
	}

}

// stealth?="stealth"
protected class RuleDeclaration_StealthAssignment_3_1 extends AssignmentToken  {
	
	public RuleDeclaration_StealthAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getStealthAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_ExecAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stealth",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stealth");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getRuleDeclarationAccess().getStealthStealthKeyword_3_1_0();
			return obj;
		}
		return null;
	}

}


// virtual?="virtual"?
protected class RuleDeclaration_VirtualAssignment_4 extends AssignmentToken  {
	
	public RuleDeclaration_VirtualAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getVirtualAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_ExecAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("virtual",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("virtual");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getRuleDeclarationAccess().getVirtualVirtualKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// multi?="multi"?
protected class RuleDeclaration_MultiAssignment_5 extends AssignmentToken  {
	
	public RuleDeclaration_MultiAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getMultiAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_VirtualAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_Alternatives_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new RuleDeclaration_ExecAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("multi",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("multi");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getRuleDeclarationAccess().getMultiMultiKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class RuleDeclaration_NameAssignment_6 extends AssignmentToken  {
	
	public RuleDeclaration_NameAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getNameAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_MultiAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_VirtualAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new RuleDeclaration_Alternatives_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new RuleDeclaration_ExecAssignment_2(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRuleDeclarationAccess().getNameIDTerminalRuleCall_6_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRuleDeclarationAccess().getNameIDTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class RuleDeclaration_LeftParenthesisKeyword_7 extends KeywordToken  {
	
	public RuleDeclaration_LeftParenthesisKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getLeftParenthesisKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_NameAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (formalParameters+=FormalParameter ("," formalParameters+=FormalParameter)*)?
protected class RuleDeclaration_Group_8 extends GroupToken {
	
	public RuleDeclaration_Group_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getGroup_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Group_8_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_FormalParametersAssignment_8_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// formalParameters+=FormalParameter
protected class RuleDeclaration_FormalParametersAssignment_8_0 extends AssignmentToken  {
	
	public RuleDeclaration_FormalParametersAssignment_8_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getFormalParametersAssignment_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormalParameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("formalParameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("formalParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormalParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDeclarationAccess().getFormalParametersFormalParameterParserRuleCall_8_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDeclaration_LeftParenthesisKeyword_7(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," formalParameters+=FormalParameter)*
protected class RuleDeclaration_Group_8_1 extends GroupToken {
	
	public RuleDeclaration_Group_8_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getGroup_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_FormalParametersAssignment_8_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class RuleDeclaration_CommaKeyword_8_1_0 extends KeywordToken  {
	
	public RuleDeclaration_CommaKeyword_8_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getCommaKeyword_8_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Group_8_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_FormalParametersAssignment_8_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// formalParameters+=FormalParameter
protected class RuleDeclaration_FormalParametersAssignment_8_1_1 extends AssignmentToken  {
	
	public RuleDeclaration_FormalParametersAssignment_8_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getFormalParametersAssignment_8_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormalParameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("formalParameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("formalParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormalParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDeclarationAccess().getFormalParametersFormalParameterParserRuleCall_8_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDeclaration_CommaKeyword_8_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class RuleDeclaration_RightParenthesisKeyword_9 extends KeywordToken  {
	
	public RuleDeclaration_RightParenthesisKeyword_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getRightParenthesisKeyword_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Group_8(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_LeftParenthesisKeyword_7(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (":" "(" returnParameters+=ReturnParameter ("," returnParameters+=ReturnParameter)* ")")?
protected class RuleDeclaration_Group_10 extends GroupToken {
	
	public RuleDeclaration_Group_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getGroup_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_RightParenthesisKeyword_10_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class RuleDeclaration_ColonKeyword_10_0 extends KeywordToken  {
	
	public RuleDeclaration_ColonKeyword_10_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getColonKeyword_10_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_RightParenthesisKeyword_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class RuleDeclaration_LeftParenthesisKeyword_10_1 extends KeywordToken  {
	
	public RuleDeclaration_LeftParenthesisKeyword_10_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getLeftParenthesisKeyword_10_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_ColonKeyword_10_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// returnParameters+=ReturnParameter
protected class RuleDeclaration_ReturnParametersAssignment_10_2 extends AssignmentToken  {
	
	public RuleDeclaration_ReturnParametersAssignment_10_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getReturnParametersAssignment_10_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnParameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnParameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReturnParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDeclarationAccess().getReturnParametersReturnParameterParserRuleCall_10_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDeclaration_LeftParenthesisKeyword_10_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," returnParameters+=ReturnParameter)*
protected class RuleDeclaration_Group_10_3 extends GroupToken {
	
	public RuleDeclaration_Group_10_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getGroup_10_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_ReturnParametersAssignment_10_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class RuleDeclaration_CommaKeyword_10_3_0 extends KeywordToken  {
	
	public RuleDeclaration_CommaKeyword_10_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getCommaKeyword_10_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Group_10_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_ReturnParametersAssignment_10_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// returnParameters+=ReturnParameter
protected class RuleDeclaration_ReturnParametersAssignment_10_3_1 extends AssignmentToken  {
	
	public RuleDeclaration_ReturnParametersAssignment_10_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getReturnParametersAssignment_10_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnParameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnParameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReturnParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDeclarationAccess().getReturnParametersReturnParameterParserRuleCall_10_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDeclaration_CommaKeyword_10_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class RuleDeclaration_RightParenthesisKeyword_10_4 extends KeywordToken  {
	
	public RuleDeclaration_RightParenthesisKeyword_10_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getRightParenthesisKeyword_10_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Group_10_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_ReturnParametersAssignment_10_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// ("implements" implementedRules+=SimpleRuleReference ("," implementedRules+=SimpleRuleReference)*)?
protected class RuleDeclaration_Group_11 extends GroupToken {
	
	public RuleDeclaration_Group_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getGroup_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Group_11_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_ImplementedRulesAssignment_11_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "implements"
protected class RuleDeclaration_ImplementsKeyword_11_0 extends KeywordToken  {
	
	public RuleDeclaration_ImplementsKeyword_11_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getImplementsKeyword_11_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Group_10(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_RightParenthesisKeyword_9(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// implementedRules+=SimpleRuleReference
protected class RuleDeclaration_ImplementedRulesAssignment_11_1 extends AssignmentToken  {
	
	public RuleDeclaration_ImplementedRulesAssignment_11_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getImplementedRulesAssignment_11_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("implementedRules",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("implementedRules");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleRuleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDeclarationAccess().getImplementedRulesSimpleRuleReferenceParserRuleCall_11_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDeclaration_ImplementsKeyword_11_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," implementedRules+=SimpleRuleReference)*
protected class RuleDeclaration_Group_11_2 extends GroupToken {
	
	public RuleDeclaration_Group_11_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getGroup_11_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_ImplementedRulesAssignment_11_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class RuleDeclaration_CommaKeyword_11_2_0 extends KeywordToken  {
	
	public RuleDeclaration_CommaKeyword_11_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getCommaKeyword_11_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Group_11_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_ImplementedRulesAssignment_11_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// implementedRules+=SimpleRuleReference
protected class RuleDeclaration_ImplementedRulesAssignment_11_2_1 extends AssignmentToken  {
	
	public RuleDeclaration_ImplementedRulesAssignment_11_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getImplementedRulesAssignment_11_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("implementedRules",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("implementedRules");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleRuleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDeclarationAccess().getImplementedRulesSimpleRuleReferenceParserRuleCall_11_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDeclaration_CommaKeyword_11_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ("overrides" overriddenRule=SimpleRuleReference)?
protected class RuleDeclaration_Group_12 extends GroupToken {
	
	public RuleDeclaration_Group_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getGroup_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_OverriddenRuleAssignment_12_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "overrides"
protected class RuleDeclaration_OverridesKeyword_12_0 extends KeywordToken  {
	
	public RuleDeclaration_OverridesKeyword_12_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getOverridesKeyword_12_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Group_11(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_Group_10(lastRuleCallOrigin, this, 1, inst);
			case 2: return new RuleDeclaration_RightParenthesisKeyword_9(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// overriddenRule=SimpleRuleReference
protected class RuleDeclaration_OverriddenRuleAssignment_12_1 extends AssignmentToken  {
	
	public RuleDeclaration_OverriddenRuleAssignment_12_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getOverriddenRuleAssignment_12_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("overriddenRule",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("overriddenRule");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleRuleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDeclarationAccess().getOverriddenRuleSimpleRuleReferenceParserRuleCall_12_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDeclaration_OverridesKeyword_12_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("excludedBy" excludingRules+=SimpleRuleReference ("," excludingRules+=SimpleRuleReference)*)?
protected class RuleDeclaration_Group_13 extends GroupToken {
	
	public RuleDeclaration_Group_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getGroup_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Group_13_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_ExcludingRulesAssignment_13_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "excludedBy"
protected class RuleDeclaration_ExcludedByKeyword_13_0 extends KeywordToken  {
	
	public RuleDeclaration_ExcludedByKeyword_13_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getExcludedByKeyword_13_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Group_12(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_Group_11(lastRuleCallOrigin, this, 1, inst);
			case 2: return new RuleDeclaration_Group_10(lastRuleCallOrigin, this, 2, inst);
			case 3: return new RuleDeclaration_RightParenthesisKeyword_9(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// excludingRules+=SimpleRuleReference
protected class RuleDeclaration_ExcludingRulesAssignment_13_1 extends AssignmentToken  {
	
	public RuleDeclaration_ExcludingRulesAssignment_13_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getExcludingRulesAssignment_13_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("excludingRules",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("excludingRules");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleRuleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDeclarationAccess().getExcludingRulesSimpleRuleReferenceParserRuleCall_13_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDeclaration_ExcludedByKeyword_13_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," excludingRules+=SimpleRuleReference)*
protected class RuleDeclaration_Group_13_2 extends GroupToken {
	
	public RuleDeclaration_Group_13_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getGroup_13_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_ExcludingRulesAssignment_13_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class RuleDeclaration_CommaKeyword_13_2_0 extends KeywordToken  {
	
	public RuleDeclaration_CommaKeyword_13_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getCommaKeyword_13_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_Group_13_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_ExcludingRulesAssignment_13_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// excludingRules+=SimpleRuleReference
protected class RuleDeclaration_ExcludingRulesAssignment_13_2_1 extends AssignmentToken  {
	
	public RuleDeclaration_ExcludingRulesAssignment_13_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getExcludingRulesAssignment_13_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("excludingRules",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("excludingRules");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleRuleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDeclarationAccess().getExcludingRulesSimpleRuleReferenceParserRuleCall_13_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDeclaration_CommaKeyword_13_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// trigger=Trigger?
protected class RuleDeclaration_TriggerAssignment_14 extends AssignmentToken  {
	
	public RuleDeclaration_TriggerAssignment_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getTriggerAssignment_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trigger_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trigger",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trigger");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggerRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDeclarationAccess().getTriggerTriggerParserRuleCall_14_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDeclaration_Group_13(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new RuleDeclaration_Group_12(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new RuleDeclaration_Group_11(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new RuleDeclaration_Group_10(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new RuleDeclaration_RightParenthesisKeyword_9(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";" | javaSpec=JavaSpec ";" | body=Block
protected class RuleDeclaration_Alternatives_15 extends AlternativesToken {

	public RuleDeclaration_Alternatives_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getAlternatives_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_SemicolonKeyword_15_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_Group_15_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new RuleDeclaration_BodyAssignment_15_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// ";"
protected class RuleDeclaration_SemicolonKeyword_15_0 extends KeywordToken  {
	
	public RuleDeclaration_SemicolonKeyword_15_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getSemicolonKeyword_15_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_TriggerAssignment_14(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleDeclaration_Group_13(lastRuleCallOrigin, this, 1, inst);
			case 2: return new RuleDeclaration_Group_12(lastRuleCallOrigin, this, 2, inst);
			case 3: return new RuleDeclaration_Group_11(lastRuleCallOrigin, this, 3, inst);
			case 4: return new RuleDeclaration_Group_10(lastRuleCallOrigin, this, 4, inst);
			case 5: return new RuleDeclaration_RightParenthesisKeyword_9(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

}

// javaSpec=JavaSpec ";"
protected class RuleDeclaration_Group_15_1 extends GroupToken {
	
	public RuleDeclaration_Group_15_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getGroup_15_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_SemicolonKeyword_15_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// javaSpec=JavaSpec
protected class RuleDeclaration_JavaSpecAssignment_15_1_0 extends AssignmentToken  {
	
	public RuleDeclaration_JavaSpecAssignment_15_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getJavaSpecAssignment_15_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new JavaSpec_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("javaSpec",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("javaSpec");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getJavaSpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDeclarationAccess().getJavaSpecJavaSpecParserRuleCall_15_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDeclaration_TriggerAssignment_14(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new RuleDeclaration_Group_13(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new RuleDeclaration_Group_12(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new RuleDeclaration_Group_11(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new RuleDeclaration_Group_10(lastRuleCallOrigin, next, actIndex, consumed);
			case 5: return new RuleDeclaration_RightParenthesisKeyword_9(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class RuleDeclaration_SemicolonKeyword_15_1_1 extends KeywordToken  {
	
	public RuleDeclaration_SemicolonKeyword_15_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getSemicolonKeyword_15_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleDeclaration_JavaSpecAssignment_15_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// body=Block
protected class RuleDeclaration_BodyAssignment_15_2 extends AssignmentToken  {
	
	public RuleDeclaration_BodyAssignment_15_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleDeclarationAccess().getBodyAssignment_15_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleDeclarationAccess().getBodyBlockParserRuleCall_15_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleDeclaration_TriggerAssignment_14(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new RuleDeclaration_Group_13(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new RuleDeclaration_Group_12(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new RuleDeclaration_Group_11(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new RuleDeclaration_Group_10(lastRuleCallOrigin, next, actIndex, consumed);
			case 5: return new RuleDeclaration_RightParenthesisKeyword_9(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RuleDeclaration ****************/


/************ begin Rule RuleReference ****************
 *
 * // added: overloadingRules
 * // added: triggeredRules
 * RuleReference:
 * 	SimpleRuleReference | QualifiedRuleReference;
 *
 **/

// SimpleRuleReference | QualifiedRuleReference
protected class RuleReference_Alternatives extends AlternativesToken {

	public RuleReference_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRuleReferenceAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleReference_SimpleRuleReferenceParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleReference_QualifiedRuleReferenceParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQualifiedRuleReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleRuleReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SimpleRuleReference
protected class RuleReference_SimpleRuleReferenceParserRuleCall_0 extends RuleCallToken {
	
	public RuleReference_SimpleRuleReferenceParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleReferenceAccess().getSimpleRuleReferenceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleRuleReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SimpleRuleReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// QualifiedRuleReference
protected class RuleReference_QualifiedRuleReferenceParserRuleCall_1 extends RuleCallToken {
	
	public RuleReference_QualifiedRuleReferenceParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleReferenceAccess().getQualifiedRuleReferenceParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQualifiedRuleReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(QualifiedRuleReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule RuleReference ****************/


/************ begin Rule SimpleRuleReference ****************
 *
 * // added: ruleDeclaration=RuleDeclaration		
 * SimpleRuleReference:
 * 	ruleDeclaration=[RuleDeclaration|FQN] "(" parameterReferences+=SimpleParameterReference (","
 * 	parameterReferences+=SimpleParameterReference)* ")" (":" "(" returnReferences+=SimpleParameterReference (","
 * 	returnReferences+=SimpleParameterReference)* ")")?;
 *
 **/

// ruleDeclaration=[RuleDeclaration|FQN] "(" parameterReferences+=SimpleParameterReference (","
// parameterReferences+=SimpleParameterReference)* ")" (":" "(" returnReferences+=SimpleParameterReference (","
// returnReferences+=SimpleParameterReference)* ")")?
protected class SimpleRuleReference_Group extends GroupToken {
	
	public SimpleRuleReference_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleRuleReference_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleRuleReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ruleDeclaration=[RuleDeclaration|FQN]
protected class SimpleRuleReference_RuleDeclarationAssignment_0 extends AssignmentToken  {
	
	public SimpleRuleReference_RuleDeclarationAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getRuleDeclarationAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ruleDeclaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ruleDeclaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleRuleReferenceAccess().getRuleDeclarationRuleDeclarationCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getSimpleRuleReferenceAccess().getRuleDeclarationRuleDeclarationCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "("
protected class SimpleRuleReference_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public SimpleRuleReference_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_RuleDeclarationAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parameterReferences+=SimpleParameterReference
protected class SimpleRuleReference_ParameterReferencesAssignment_2 extends AssignmentToken  {
	
	public SimpleRuleReference_ParameterReferencesAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getParameterReferencesAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleParameterReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterReferences",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleParameterReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimpleRuleReferenceAccess().getParameterReferencesSimpleParameterReferenceParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleRuleReference_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameterReferences+=SimpleParameterReference)*
protected class SimpleRuleReference_Group_3 extends GroupToken {
	
	public SimpleRuleReference_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_ParameterReferencesAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class SimpleRuleReference_CommaKeyword_3_0 extends KeywordToken  {
	
	public SimpleRuleReference_CommaKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getCommaKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleRuleReference_ParameterReferencesAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameterReferences+=SimpleParameterReference
protected class SimpleRuleReference_ParameterReferencesAssignment_3_1 extends AssignmentToken  {
	
	public SimpleRuleReference_ParameterReferencesAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getParameterReferencesAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleParameterReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterReferences",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleParameterReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimpleRuleReferenceAccess().getParameterReferencesSimpleParameterReferenceParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleRuleReference_CommaKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class SimpleRuleReference_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public SimpleRuleReference_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleRuleReference_ParameterReferencesAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (":" "(" returnReferences+=SimpleParameterReference ("," returnReferences+=SimpleParameterReference)* ")")?
protected class SimpleRuleReference_Group_5 extends GroupToken {
	
	public SimpleRuleReference_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_RightParenthesisKeyword_5_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class SimpleRuleReference_ColonKeyword_5_0 extends KeywordToken  {
	
	public SimpleRuleReference_ColonKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getColonKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class SimpleRuleReference_LeftParenthesisKeyword_5_1 extends KeywordToken  {
	
	public SimpleRuleReference_LeftParenthesisKeyword_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getLeftParenthesisKeyword_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_ColonKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// returnReferences+=SimpleParameterReference
protected class SimpleRuleReference_ReturnReferencesAssignment_5_2 extends AssignmentToken  {
	
	public SimpleRuleReference_ReturnReferencesAssignment_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getReturnReferencesAssignment_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleParameterReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnReferences",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleParameterReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimpleRuleReferenceAccess().getReturnReferencesSimpleParameterReferenceParserRuleCall_5_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleRuleReference_LeftParenthesisKeyword_5_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," returnReferences+=SimpleParameterReference)*
protected class SimpleRuleReference_Group_5_3 extends GroupToken {
	
	public SimpleRuleReference_Group_5_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getGroup_5_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_ReturnReferencesAssignment_5_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class SimpleRuleReference_CommaKeyword_5_3_0 extends KeywordToken  {
	
	public SimpleRuleReference_CommaKeyword_5_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getCommaKeyword_5_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_Group_5_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleRuleReference_ReturnReferencesAssignment_5_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// returnReferences+=SimpleParameterReference
protected class SimpleRuleReference_ReturnReferencesAssignment_5_3_1 extends AssignmentToken  {
	
	public SimpleRuleReference_ReturnReferencesAssignment_5_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getReturnReferencesAssignment_5_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleParameterReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnReferences",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleParameterReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimpleRuleReferenceAccess().getReturnReferencesSimpleParameterReferenceParserRuleCall_5_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleRuleReference_CommaKeyword_5_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class SimpleRuleReference_RightParenthesisKeyword_5_4 extends KeywordToken  {
	
	public SimpleRuleReference_RightParenthesisKeyword_5_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleRuleReferenceAccess().getRightParenthesisKeyword_5_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleRuleReference_Group_5_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleRuleReference_ReturnReferencesAssignment_5_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule SimpleRuleReference ****************/


/************ begin Rule QualifiedRuleReference ****************
 *
 * QualifiedRuleReference:
 * 	ruleDeclaration=[RuleDeclaration|FQN] "(" parameterReferences+=QualifiedParameterReference (","
 * 	parameterReferences+=QualifiedParameterReference)* ")" (":" "(" returnReferences+=QualifiedParameterReference (","
 * 	returnReferences+=QualifiedParameterReference)* ")")?;
 *
 **/

// ruleDeclaration=[RuleDeclaration|FQN] "(" parameterReferences+=QualifiedParameterReference (","
// parameterReferences+=QualifiedParameterReference)* ")" (":" "(" returnReferences+=QualifiedParameterReference (","
// returnReferences+=QualifiedParameterReference)* ")")?
protected class QualifiedRuleReference_Group extends GroupToken {
	
	public QualifiedRuleReference_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new QualifiedRuleReference_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQualifiedRuleReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ruleDeclaration=[RuleDeclaration|FQN]
protected class QualifiedRuleReference_RuleDeclarationAssignment_0 extends AssignmentToken  {
	
	public QualifiedRuleReference_RuleDeclarationAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getRuleDeclarationAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ruleDeclaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ruleDeclaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQualifiedRuleReferenceAccess().getRuleDeclarationRuleDeclarationCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getQualifiedRuleReferenceAccess().getRuleDeclarationRuleDeclarationCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "("
protected class QualifiedRuleReference_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public QualifiedRuleReference_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_RuleDeclarationAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parameterReferences+=QualifiedParameterReference
protected class QualifiedRuleReference_ParameterReferencesAssignment_2 extends AssignmentToken  {
	
	public QualifiedRuleReference_ParameterReferencesAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getParameterReferencesAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedParameterReference_VardeclAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterReferences",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQualifiedParameterReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQualifiedRuleReferenceAccess().getParameterReferencesQualifiedParameterReferenceParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QualifiedRuleReference_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameterReferences+=QualifiedParameterReference)*
protected class QualifiedRuleReference_Group_3 extends GroupToken {
	
	public QualifiedRuleReference_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_ParameterReferencesAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class QualifiedRuleReference_CommaKeyword_3_0 extends KeywordToken  {
	
	public QualifiedRuleReference_CommaKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getCommaKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new QualifiedRuleReference_ParameterReferencesAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameterReferences+=QualifiedParameterReference
protected class QualifiedRuleReference_ParameterReferencesAssignment_3_1 extends AssignmentToken  {
	
	public QualifiedRuleReference_ParameterReferencesAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getParameterReferencesAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedParameterReference_VardeclAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterReferences",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQualifiedParameterReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQualifiedRuleReferenceAccess().getParameterReferencesQualifiedParameterReferenceParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QualifiedRuleReference_CommaKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class QualifiedRuleReference_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public QualifiedRuleReference_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new QualifiedRuleReference_ParameterReferencesAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (":" "(" returnReferences+=QualifiedParameterReference ("," returnReferences+=QualifiedParameterReference)* ")")?
protected class QualifiedRuleReference_Group_5 extends GroupToken {
	
	public QualifiedRuleReference_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_RightParenthesisKeyword_5_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class QualifiedRuleReference_ColonKeyword_5_0 extends KeywordToken  {
	
	public QualifiedRuleReference_ColonKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getColonKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class QualifiedRuleReference_LeftParenthesisKeyword_5_1 extends KeywordToken  {
	
	public QualifiedRuleReference_LeftParenthesisKeyword_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getLeftParenthesisKeyword_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_ColonKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// returnReferences+=QualifiedParameterReference
protected class QualifiedRuleReference_ReturnReferencesAssignment_5_2 extends AssignmentToken  {
	
	public QualifiedRuleReference_ReturnReferencesAssignment_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getReturnReferencesAssignment_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedParameterReference_VardeclAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnReferences",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQualifiedParameterReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQualifiedRuleReferenceAccess().getReturnReferencesQualifiedParameterReferenceParserRuleCall_5_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QualifiedRuleReference_LeftParenthesisKeyword_5_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," returnReferences+=QualifiedParameterReference)*
protected class QualifiedRuleReference_Group_5_3 extends GroupToken {
	
	public QualifiedRuleReference_Group_5_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getGroup_5_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_ReturnReferencesAssignment_5_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class QualifiedRuleReference_CommaKeyword_5_3_0 extends KeywordToken  {
	
	public QualifiedRuleReference_CommaKeyword_5_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getCommaKeyword_5_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_Group_5_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new QualifiedRuleReference_ReturnReferencesAssignment_5_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// returnReferences+=QualifiedParameterReference
protected class QualifiedRuleReference_ReturnReferencesAssignment_5_3_1 extends AssignmentToken  {
	
	public QualifiedRuleReference_ReturnReferencesAssignment_5_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getReturnReferencesAssignment_5_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedParameterReference_VardeclAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnReferences",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQualifiedParameterReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQualifiedRuleReferenceAccess().getReturnReferencesQualifiedParameterReferenceParserRuleCall_5_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QualifiedRuleReference_CommaKeyword_5_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class QualifiedRuleReference_RightParenthesisKeyword_5_4 extends KeywordToken  {
	
	public QualifiedRuleReference_RightParenthesisKeyword_5_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQualifiedRuleReferenceAccess().getRightParenthesisKeyword_5_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_Group_5_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new QualifiedRuleReference_ReturnReferencesAssignment_5_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule QualifiedRuleReference ****************/


/************ begin Rule ParameterReference ****************
 *
 * ParameterReference:
 * 	QualifiedParameterReference | SimpleParameterReference;
 *
 **/

// QualifiedParameterReference | SimpleParameterReference
protected class ParameterReference_Alternatives extends AlternativesToken {

	public ParameterReference_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getParameterReferenceAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterReference_QualifiedParameterReferenceParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterReference_SimpleParameterReferenceParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQualifiedParameterReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleParameterReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// QualifiedParameterReference
protected class ParameterReference_QualifiedParameterReferenceParserRuleCall_0 extends RuleCallToken {
	
	public ParameterReference_QualifiedParameterReferenceParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParameterReferenceAccess().getQualifiedParameterReferenceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedParameterReference_VardeclAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQualifiedParameterReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(QualifiedParameterReference_VardeclAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SimpleParameterReference
protected class ParameterReference_SimpleParameterReferenceParserRuleCall_1 extends RuleCallToken {
	
	public ParameterReference_SimpleParameterReferenceParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParameterReferenceAccess().getSimpleParameterReferenceParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleParameterReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleParameterReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SimpleParameterReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ParameterReference ****************/


/************ begin Rule SimpleParameterReference ****************
 *
 * SimpleParameterReference:
 * 	type=Type name=ID?;
 *
 **/

// type=Type name=ID?
protected class SimpleParameterReference_Group extends GroupToken {
	
	public SimpleParameterReference_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleParameterReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleParameterReference_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleParameterReference_TypeAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleParameterReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// type=Type
protected class SimpleParameterReference_TypeAssignment_0 extends AssignmentToken  {
	
	public SimpleParameterReference_TypeAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleParameterReferenceAccess().getTypeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimpleParameterReferenceAccess().getTypeTypeParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// name=ID?
protected class SimpleParameterReference_NameAssignment_1 extends AssignmentToken  {
	
	public SimpleParameterReference_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleParameterReferenceAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleParameterReference_TypeAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleParameterReferenceAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSimpleParameterReferenceAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SimpleParameterReference ****************/


/************ begin Rule QualifiedParameterReference ****************
 *
 * QualifiedParameterReference:
 * 	vardecl=TypedVarDeclaration;
 *
 **/

// vardecl=TypedVarDeclaration
protected class QualifiedParameterReference_VardeclAssignment extends AssignmentToken  {
	
	public QualifiedParameterReference_VardeclAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQualifiedParameterReferenceAccess().getVardeclAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypedVarDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQualifiedParameterReferenceRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("vardecl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("vardecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypedVarDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQualifiedParameterReferenceAccess().getVardeclTypedVarDeclarationParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule QualifiedParameterReference ****************/


/************ begin Rule Trigger ****************
 *
 * // Trigger
 * Trigger:
 * 	"trigger" "(" triggerRules+=QualifiedRuleReference ("," triggerRules+=QualifiedRuleReference)* ")" ("with"
 * 	^with=Block)? ("when" "(" when=Expression ")")?;
 *
 **/

// "trigger" "(" triggerRules+=QualifiedRuleReference ("," triggerRules+=QualifiedRuleReference)* ")" ("with" ^with=Block)?
// ("when" "(" when=Expression ")")?
protected class Trigger_Group extends GroupToken {
	
	public Trigger_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTriggerAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trigger_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Trigger_Group_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Trigger_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTriggerRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "trigger"
protected class Trigger_TriggerKeyword_0 extends KeywordToken  {
	
	public Trigger_TriggerKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTriggerAccess().getTriggerKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class Trigger_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public Trigger_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTriggerAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trigger_TriggerKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// triggerRules+=QualifiedRuleReference
protected class Trigger_TriggerRulesAssignment_2 extends AssignmentToken  {
	
	public Trigger_TriggerRulesAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTriggerAccess().getTriggerRulesAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("triggerRules",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("triggerRules");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQualifiedRuleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTriggerAccess().getTriggerRulesQualifiedRuleReferenceParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Trigger_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," triggerRules+=QualifiedRuleReference)*
protected class Trigger_Group_3 extends GroupToken {
	
	public Trigger_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTriggerAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trigger_TriggerRulesAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class Trigger_CommaKeyword_3_0 extends KeywordToken  {
	
	public Trigger_CommaKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTriggerAccess().getCommaKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trigger_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Trigger_TriggerRulesAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// triggerRules+=QualifiedRuleReference
protected class Trigger_TriggerRulesAssignment_3_1 extends AssignmentToken  {
	
	public Trigger_TriggerRulesAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTriggerAccess().getTriggerRulesAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedRuleReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("triggerRules",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("triggerRules");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQualifiedRuleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTriggerAccess().getTriggerRulesQualifiedRuleReferenceParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Trigger_CommaKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class Trigger_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public Trigger_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTriggerAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trigger_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Trigger_TriggerRulesAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ("with" ^with=Block)?
protected class Trigger_Group_5 extends GroupToken {
	
	public Trigger_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTriggerAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trigger_WithAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "with"
protected class Trigger_WithKeyword_5_0 extends KeywordToken  {
	
	public Trigger_WithKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTriggerAccess().getWithKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trigger_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ^with=Block
protected class Trigger_WithAssignment_5_1 extends AssignmentToken  {
	
	public Trigger_WithAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTriggerAccess().getWithAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("with",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("with");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTriggerAccess().getWithBlockParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Trigger_WithKeyword_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("when" "(" when=Expression ")")?
protected class Trigger_Group_6 extends GroupToken {
	
	public Trigger_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTriggerAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trigger_RightParenthesisKeyword_6_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "when"
protected class Trigger_WhenKeyword_6_0 extends KeywordToken  {
	
	public Trigger_WhenKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTriggerAccess().getWhenKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trigger_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Trigger_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "("
protected class Trigger_LeftParenthesisKeyword_6_1 extends KeywordToken  {
	
	public Trigger_LeftParenthesisKeyword_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTriggerAccess().getLeftParenthesisKeyword_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trigger_WhenKeyword_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// when=Expression
protected class Trigger_WhenAssignment_6_2 extends AssignmentToken  {
	
	public Trigger_WhenAssignment_6_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTriggerAccess().getWhenAssignment_6_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("when",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("when");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTriggerAccess().getWhenExpressionParserRuleCall_6_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Trigger_LeftParenthesisKeyword_6_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Trigger_RightParenthesisKeyword_6_3 extends KeywordToken  {
	
	public Trigger_RightParenthesisKeyword_6_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTriggerAccess().getRightParenthesisKeyword_6_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trigger_WhenAssignment_6_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule Trigger ****************/


/************ begin Rule JavaSpec ****************
 *
 * JavaSpec:
 * 	"java" "(" properties+=Property ("," properties+=Property)* ")";
 *
 **/

// "java" "(" properties+=Property ("," properties+=Property)* ")"
protected class JavaSpec_Group extends GroupToken {
	
	public JavaSpec_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getJavaSpecAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new JavaSpec_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getJavaSpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "java"
protected class JavaSpec_JavaKeyword_0 extends KeywordToken  {
	
	public JavaSpec_JavaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getJavaSpecAccess().getJavaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class JavaSpec_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public JavaSpec_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getJavaSpecAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new JavaSpec_JavaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// properties+=Property
protected class JavaSpec_PropertiesAssignment_2 extends AssignmentToken  {
	
	public JavaSpec_PropertiesAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getJavaSpecAccess().getPropertiesAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Property_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("properties",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getJavaSpecAccess().getPropertiesPropertyParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new JavaSpec_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," properties+=Property)*
protected class JavaSpec_Group_3 extends GroupToken {
	
	public JavaSpec_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getJavaSpecAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new JavaSpec_PropertiesAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class JavaSpec_CommaKeyword_3_0 extends KeywordToken  {
	
	public JavaSpec_CommaKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getJavaSpecAccess().getCommaKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new JavaSpec_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new JavaSpec_PropertiesAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// properties+=Property
protected class JavaSpec_PropertiesAssignment_3_1 extends AssignmentToken  {
	
	public JavaSpec_PropertiesAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getJavaSpecAccess().getPropertiesAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Property_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("properties",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getJavaSpecAccess().getPropertiesPropertyParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new JavaSpec_CommaKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class JavaSpec_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public JavaSpec_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getJavaSpecAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new JavaSpec_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new JavaSpec_PropertiesAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule JavaSpec ****************/


/************ begin Rule Parameter ****************
 *
 * Parameter:
 * 	FormalParameter | ReturnParameter;
 *
 **/

// FormalParameter | ReturnParameter
protected class Parameter_Alternatives extends AlternativesToken {

	public Parameter_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getParameterAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_FormalParameterParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Parameter_ReturnParameterParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFormalParameterRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReturnParameterRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// FormalParameter
protected class Parameter_FormalParameterParserRuleCall_0 extends RuleCallToken {
	
	public Parameter_FormalParameterParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParameterAccess().getFormalParameterParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormalParameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFormalParameterRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FormalParameter_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ReturnParameter
protected class Parameter_ReturnParameterParserRuleCall_1 extends RuleCallToken {
	
	public Parameter_ReturnParameterParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParameterAccess().getReturnParameterParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnParameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReturnParameterRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ReturnParameter_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Parameter ****************/


/************ begin Rule FormalParameter ****************
 *
 * FormalParameter:
 * 	annotations+=Annotation* modifier=FormalParameterModifier? vardecl=TypedVarDeclaration;
 *
 **/

// annotations+=Annotation* modifier=FormalParameterModifier? vardecl=TypedVarDeclaration
protected class FormalParameter_Group extends GroupToken {
	
	public FormalParameter_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFormalParameterAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormalParameter_VardeclAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFormalParameterRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// annotations+=Annotation*
protected class FormalParameter_AnnotationsAssignment_0 extends AssignmentToken  {
	
	public FormalParameter_AnnotationsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFormalParameterAccess().getAnnotationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("annotations",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("annotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFormalParameterAccess().getAnnotationsAnnotationParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FormalParameter_AnnotationsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// modifier=FormalParameterModifier?
protected class FormalParameter_ModifierAssignment_1 extends AssignmentToken  {
	
	public FormalParameter_ModifierAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFormalParameterAccess().getModifierAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormalParameter_AnnotationsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("modifier",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("modifier");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getFormalParameterAccess().getModifierFormalParameterModifierEnumRuleCall_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getFormalParameterAccess().getModifierFormalParameterModifierEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// vardecl=TypedVarDeclaration
protected class FormalParameter_VardeclAssignment_2 extends AssignmentToken  {
	
	public FormalParameter_VardeclAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFormalParameterAccess().getVardeclAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypedVarDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("vardecl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("vardecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypedVarDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFormalParameterAccess().getVardeclTypedVarDeclarationParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FormalParameter_ModifierAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new FormalParameter_AnnotationsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 2, consumed);
		}	
	}	
}


/************ end Rule FormalParameter ****************/


/************ begin Rule ReturnParameter ****************
 *
 * ReturnParameter:
 * 	annotations+=Annotation* modifier=ReturnParameterModifier? vardecl=TypedVarDeclaration;
 *
 **/

// annotations+=Annotation* modifier=ReturnParameterModifier? vardecl=TypedVarDeclaration
protected class ReturnParameter_Group extends GroupToken {
	
	public ReturnParameter_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReturnParameterAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnParameter_VardeclAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReturnParameterRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// annotations+=Annotation*
protected class ReturnParameter_AnnotationsAssignment_0 extends AssignmentToken  {
	
	public ReturnParameter_AnnotationsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReturnParameterAccess().getAnnotationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("annotations",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("annotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReturnParameterAccess().getAnnotationsAnnotationParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReturnParameter_AnnotationsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// modifier=ReturnParameterModifier?
protected class ReturnParameter_ModifierAssignment_1 extends AssignmentToken  {
	
	public ReturnParameter_ModifierAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReturnParameterAccess().getModifierAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnParameter_AnnotationsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("modifier",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("modifier");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getReturnParameterAccess().getModifierReturnParameterModifierEnumRuleCall_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getReturnParameterAccess().getModifierReturnParameterModifierEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// vardecl=TypedVarDeclaration
protected class ReturnParameter_VardeclAssignment_2 extends AssignmentToken  {
	
	public ReturnParameter_VardeclAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReturnParameterAccess().getVardeclAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypedVarDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("vardecl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("vardecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypedVarDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReturnParameterAccess().getVardeclTypedVarDeclarationParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReturnParameter_ModifierAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ReturnParameter_AnnotationsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 2, consumed);
		}	
	}	
}


/************ end Rule ReturnParameter ****************/


/************ begin Rule Type ****************
 *
 * Type:
 * 	PrimitiveType | CollectionType | ReferenceType;
 *
 **/

// PrimitiveType | CollectionType | ReferenceType
protected class Type_Alternatives extends AlternativesToken {

	public Type_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_PrimitiveTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Type_CollectionTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Type_ReferenceTypeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCollectionTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimitiveTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PrimitiveType
protected class Type_PrimitiveTypeParserRuleCall_0 extends RuleCallToken {
	
	public Type_PrimitiveTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimitiveType_PrimitiveTypeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrimitiveTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(PrimitiveType_PrimitiveTypeAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CollectionType
protected class Type_CollectionTypeParserRuleCall_1 extends RuleCallToken {
	
	public Type_CollectionTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getCollectionTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectionType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCollectionTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CollectionType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ReferenceType
protected class Type_ReferenceTypeParserRuleCall_2 extends RuleCallToken {
	
	public Type_ReferenceTypeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getReferenceTypeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferenceType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReferenceTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ReferenceType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Type ****************/


/************ begin Rule ReferenceType ****************
 *
 * ReferenceType:
 * 	metamodelDeclaration=[MetamodelDeclaration] "::" eClassifier=[ecore::EClassifier];
 *
 **/

// metamodelDeclaration=[MetamodelDeclaration] "::" eClassifier=[ecore::EClassifier]
protected class ReferenceType_Group extends GroupToken {
	
	public ReferenceType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReferenceTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferenceType_EClassifierAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReferenceTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// metamodelDeclaration=[MetamodelDeclaration]
protected class ReferenceType_MetamodelDeclarationAssignment_0 extends AssignmentToken  {
	
	public ReferenceType_MetamodelDeclarationAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceTypeAccess().getMetamodelDeclarationAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("metamodelDeclaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("metamodelDeclaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReferenceTypeAccess().getMetamodelDeclarationMetamodelDeclarationCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getReferenceTypeAccess().getMetamodelDeclarationMetamodelDeclarationCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "::"
protected class ReferenceType_ColonColonKeyword_1 extends KeywordToken  {
	
	public ReferenceType_ColonColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceTypeAccess().getColonColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferenceType_MetamodelDeclarationAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eClassifier=[ecore::EClassifier]
protected class ReferenceType_EClassifierAssignment_2 extends AssignmentToken  {
	
	public ReferenceType_EClassifierAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceTypeAccess().getEClassifierAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferenceType_ColonColonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eClassifier",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eClassifier");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReferenceTypeAccess().getEClassifierEClassifierCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getReferenceTypeAccess().getEClassifierEClassifierCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule ReferenceType ****************/


/************ begin Rule PrimitiveType ****************
 *
 * PrimitiveType:
 * 	primitiveType=PrimitiveTypeSpec;
 *
 **/

// primitiveType=PrimitiveTypeSpec
protected class PrimitiveType_PrimitiveTypeAssignment extends AssignmentToken  {
	
	public PrimitiveType_PrimitiveTypeAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveTypeAccess().getPrimitiveTypeAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrimitiveTypeRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("primitiveType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("primitiveType");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getPrimitiveTypeAccess().getPrimitiveTypePrimitiveTypeSpecEnumRuleCall_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getPrimitiveTypeAccess().getPrimitiveTypePrimitiveTypeSpecEnumRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule PrimitiveType ****************/


/************ begin Rule CollectionType ****************
 *
 * CollectionType:
 * 	collectionType=CollectionTypeSpec ("(" typePar=Type ")")?;
 *
 **/

// collectionType=CollectionTypeSpec ("(" typePar=Type ")")?
protected class CollectionType_Group extends GroupToken {
	
	public CollectionType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCollectionTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectionType_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CollectionType_CollectionTypeAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCollectionTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// collectionType=CollectionTypeSpec
protected class CollectionType_CollectionTypeAssignment_0 extends AssignmentToken  {
	
	public CollectionType_CollectionTypeAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionTypeAccess().getCollectionTypeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("collectionType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("collectionType");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getCollectionTypeAccess().getCollectionTypeCollectionTypeSpecEnumRuleCall_0_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getCollectionTypeAccess().getCollectionTypeCollectionTypeSpecEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("(" typePar=Type ")")?
protected class CollectionType_Group_1 extends GroupToken {
	
	public CollectionType_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCollectionTypeAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectionType_RightParenthesisKeyword_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class CollectionType_LeftParenthesisKeyword_1_0 extends KeywordToken  {
	
	public CollectionType_LeftParenthesisKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionTypeAccess().getLeftParenthesisKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectionType_CollectionTypeAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// typePar=Type
protected class CollectionType_TypeParAssignment_1_1 extends AssignmentToken  {
	
	public CollectionType_TypeParAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionTypeAccess().getTypeParAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("typePar",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("typePar");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCollectionTypeAccess().getTypeParTypeParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CollectionType_LeftParenthesisKeyword_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class CollectionType_RightParenthesisKeyword_1_2 extends KeywordToken  {
	
	public CollectionType_RightParenthesisKeyword_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionTypeAccess().getRightParenthesisKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CollectionType_TypeParAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule CollectionType ****************/


/************ begin Rule Block ****************
 *
 * // -----------------------------------------------------------------------------
 * // Rule Body with Statements	
 * // -----------------------------------------------------------------------------
 * Block:
 * 	{Block} "{" statements+=BlockStatement* "}";
 *
 **/

// {Block} "{" statements+=BlockStatement* "}"
protected class Block_Group extends GroupToken {
	
	public Block_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBlockAccess().getBlockAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Block}
protected class Block_BlockAction_0 extends ActionToken  {

	public Block_BlockAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBlockAccess().getBlockAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "{"
protected class Block_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public Block_LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_BlockAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statements+=BlockStatement*
protected class Block_StatementsAssignment_2 extends AssignmentToken  {
	
	public Block_StatementsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockAccess().getStatementsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockStatement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBlockAccess().getStatementsBlockStatementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Block_StatementsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Block_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Block_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Block_RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_StatementsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Block_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Block ****************/


/************ begin Rule BlockStatement ****************
 *
 * BlockStatement:
 * 	LocalVariableDeclarationStatement | Statement;
 *
 **/

// LocalVariableDeclarationStatement | Statement
protected class BlockStatement_Alternatives extends AlternativesToken {

	public BlockStatement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBlockStatementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockStatement_LocalVariableDeclarationStatementParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BlockStatement_StatementParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBlockAccess().getBlockAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBreakStatementAccess().getBreakStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpressionStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getForStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLocalVariableDeclarationStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReturnStatementAccess().getReturnStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getThrowStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTryStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhileStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// LocalVariableDeclarationStatement
protected class BlockStatement_LocalVariableDeclarationStatementParserRuleCall_0 extends RuleCallToken {
	
	public BlockStatement_LocalVariableDeclarationStatementParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBlockStatementAccess().getLocalVariableDeclarationStatementParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalVariableDeclarationStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLocalVariableDeclarationStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LocalVariableDeclarationStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Statement
protected class BlockStatement_StatementParserRuleCall_1 extends RuleCallToken {
	
	public BlockStatement_StatementParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBlockStatementAccess().getStatementParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBlockAccess().getBlockAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBreakStatementAccess().getBreakStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpressionStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getForStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReturnStatementAccess().getReturnStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getThrowStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTryStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhileStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Statement_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule BlockStatement ****************/


/************ begin Rule Statement ****************
 *
 * Statement:
 * 	IfStatement // ForEachStatement |
 * 	| ReturnStatement | WhileStatement | DoStatement | ForStatement | BreakStatement | ThrowStatement | TryStatement |
 * 	ExpressionStatement | EmptyStatement | Block;
 *
 **/

// IfStatement // ForEachStatement |
// | ReturnStatement | WhileStatement | DoStatement | ForStatement | BreakStatement | ThrowStatement | TryStatement |
// ExpressionStatement | EmptyStatement | Block
protected class Statement_Alternatives extends AlternativesToken {

	public Statement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStatementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_IfStatementParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_ReturnStatementParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Statement_WhileStatementParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Statement_DoStatementParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Statement_ForStatementParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Statement_BreakStatementParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Statement_ThrowStatementParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Statement_TryStatementParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Statement_ExpressionStatementParserRuleCall_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Statement_EmptyStatementParserRuleCall_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Statement_BlockParserRuleCall_10(lastRuleCallOrigin, this, 10, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBlockAccess().getBlockAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBreakStatementAccess().getBreakStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpressionStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getForStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReturnStatementAccess().getReturnStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getThrowStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTryStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhileStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// IfStatement
protected class Statement_IfStatementParserRuleCall_0 extends RuleCallToken {
	
	public Statement_IfStatementParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIfStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IfStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ReturnStatement
protected class Statement_ReturnStatementParserRuleCall_1 extends RuleCallToken {
	
	public Statement_ReturnStatementParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReturnStatementAccess().getReturnStatementAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ReturnStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WhileStatement
protected class Statement_WhileStatementParserRuleCall_2 extends RuleCallToken {
	
	public Statement_WhileStatementParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhileStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWhileStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WhileStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// DoStatement
protected class Statement_DoStatementParserRuleCall_3 extends RuleCallToken {
	
	public Statement_DoStatementParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getDoStatementParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DoStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ForStatement
protected class Statement_ForStatementParserRuleCall_4 extends RuleCallToken {
	
	public Statement_ForStatementParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getForStatementParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getForStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ForStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BreakStatement
protected class Statement_BreakStatementParserRuleCall_5 extends RuleCallToken {
	
	public Statement_BreakStatementParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BreakStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBreakStatementAccess().getBreakStatementAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BreakStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ThrowStatement
protected class Statement_ThrowStatementParserRuleCall_6 extends RuleCallToken {
	
	public Statement_ThrowStatementParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getThrowStatementParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThrowStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getThrowStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ThrowStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TryStatement
protected class Statement_TryStatementParserRuleCall_7 extends RuleCallToken {
	
	public Statement_TryStatementParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getTryStatementParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TryStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTryStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TryStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ExpressionStatement
protected class Statement_ExpressionStatementParserRuleCall_8 extends RuleCallToken {
	
	public Statement_ExpressionStatementParserRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ExpressionStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EmptyStatement
protected class Statement_EmptyStatementParserRuleCall_9 extends RuleCallToken {
	
	public Statement_EmptyStatementParserRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getEmptyStatementParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmptyStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(EmptyStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Block
protected class Statement_BlockParserRuleCall_10 extends RuleCallToken {
	
	public Statement_BlockParserRuleCall_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getBlockParserRuleCall_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBlockAccess().getBlockAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Block_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Statement ****************/


/************ begin Rule LocalVariableDeclarationStatement ****************
 *
 * LocalVariableDeclarationStatement:
 * 	localVariableDeclaration=LocalVariableDeclaration ";";
 *
 **/

// localVariableDeclaration=LocalVariableDeclaration ";"
protected class LocalVariableDeclarationStatement_Group extends GroupToken {
	
	public LocalVariableDeclarationStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLocalVariableDeclarationStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalVariableDeclarationStatement_SemicolonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLocalVariableDeclarationStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// localVariableDeclaration=LocalVariableDeclaration
protected class LocalVariableDeclarationStatement_LocalVariableDeclarationAssignment_0 extends AssignmentToken  {
	
	public LocalVariableDeclarationStatement_LocalVariableDeclarationAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLocalVariableDeclarationStatementAccess().getLocalVariableDeclarationAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalVariableDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("localVariableDeclaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("localVariableDeclaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLocalVariableDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLocalVariableDeclarationStatementAccess().getLocalVariableDeclarationLocalVariableDeclarationParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ";"
protected class LocalVariableDeclarationStatement_SemicolonKeyword_1 extends KeywordToken  {
	
	public LocalVariableDeclarationStatement_SemicolonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLocalVariableDeclarationStatementAccess().getSemicolonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalVariableDeclarationStatement_LocalVariableDeclarationAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule LocalVariableDeclarationStatement ****************/


/************ begin Rule LocalVariableDeclaration ****************
 *
 * LocalVariableDeclaration:
 * 	vardecl=TypedVarDeclaration ("=" expression=Expression)?;
 *
 **/

// vardecl=TypedVarDeclaration ("=" expression=Expression)?
protected class LocalVariableDeclaration_Group extends GroupToken {
	
	public LocalVariableDeclaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLocalVariableDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalVariableDeclaration_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LocalVariableDeclaration_VardeclAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLocalVariableDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// vardecl=TypedVarDeclaration
protected class LocalVariableDeclaration_VardeclAssignment_0 extends AssignmentToken  {
	
	public LocalVariableDeclaration_VardeclAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLocalVariableDeclarationAccess().getVardeclAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypedVarDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("vardecl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("vardecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypedVarDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLocalVariableDeclarationAccess().getVardeclTypedVarDeclarationParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ("=" expression=Expression)?
protected class LocalVariableDeclaration_Group_1 extends GroupToken {
	
	public LocalVariableDeclaration_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLocalVariableDeclarationAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalVariableDeclaration_ExpressionAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class LocalVariableDeclaration_EqualsSignKeyword_1_0 extends KeywordToken  {
	
	public LocalVariableDeclaration_EqualsSignKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLocalVariableDeclarationAccess().getEqualsSignKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalVariableDeclaration_VardeclAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression
protected class LocalVariableDeclaration_ExpressionAssignment_1_1 extends AssignmentToken  {
	
	public LocalVariableDeclaration_ExpressionAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLocalVariableDeclarationAccess().getExpressionAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLocalVariableDeclarationAccess().getExpressionExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LocalVariableDeclaration_EqualsSignKeyword_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule LocalVariableDeclaration ****************/


/************ begin Rule VarDeclaration ****************
 *
 * VarDeclaration:
 * 	TypedVarDeclaration | InferredVarDeclaration;
 *
 **/

// TypedVarDeclaration | InferredVarDeclaration
protected class VarDeclaration_Alternatives extends AlternativesToken {

	public VarDeclaration_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDeclaration_TypedVarDeclarationParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VarDeclaration_InferredVarDeclarationParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInferredVarDeclarationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTypedVarDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TypedVarDeclaration
protected class VarDeclaration_TypedVarDeclarationParserRuleCall_0 extends RuleCallToken {
	
	public VarDeclaration_TypedVarDeclarationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getTypedVarDeclarationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypedVarDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTypedVarDeclarationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TypedVarDeclaration_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// InferredVarDeclaration
protected class VarDeclaration_InferredVarDeclarationParserRuleCall_1 extends RuleCallToken {
	
	public VarDeclaration_InferredVarDeclarationParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getInferredVarDeclarationParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InferredVarDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInferredVarDeclarationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(InferredVarDeclaration_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule VarDeclaration ****************/


/************ begin Rule TypedVarDeclaration ****************
 *
 * TypedVarDeclaration:
 * 	type=Type name=ID;
 *
 **/

// type=Type name=ID
protected class TypedVarDeclaration_Group extends GroupToken {
	
	public TypedVarDeclaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypedVarDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypedVarDeclaration_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTypedVarDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// type=Type
protected class TypedVarDeclaration_TypeAssignment_0 extends AssignmentToken  {
	
	public TypedVarDeclaration_TypeAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypedVarDeclarationAccess().getTypeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTypedVarDeclarationAccess().getTypeTypeParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// name=ID
protected class TypedVarDeclaration_NameAssignment_1 extends AssignmentToken  {
	
	public TypedVarDeclaration_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypedVarDeclarationAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypedVarDeclaration_TypeAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTypedVarDeclarationAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTypedVarDeclarationAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TypedVarDeclaration ****************/


/************ begin Rule InferredVarDeclaration ****************
 *
 * InferredVarDeclaration:
 * 	type=Type? name=ID;
 *
 **/

// type=Type? name=ID
protected class InferredVarDeclaration_Group extends GroupToken {
	
	public InferredVarDeclaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInferredVarDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InferredVarDeclaration_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInferredVarDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// type=Type?
protected class InferredVarDeclaration_TypeAssignment_0 extends AssignmentToken  {
	
	public InferredVarDeclaration_TypeAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInferredVarDeclarationAccess().getTypeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInferredVarDeclarationAccess().getTypeTypeParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// name=ID
protected class InferredVarDeclaration_NameAssignment_1 extends AssignmentToken  {
	
	public InferredVarDeclaration_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInferredVarDeclarationAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InferredVarDeclaration_TypeAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getInferredVarDeclarationAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getInferredVarDeclarationAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule InferredVarDeclaration ****************/


/************ begin Rule ExpressionStatement ****************
 *
 * ExpressionStatement:
 * 	statementExpression=StatementExpression ";";
 *
 **/

// statementExpression=StatementExpression ";"
protected class ExpressionStatement_Group extends GroupToken {
	
	public ExpressionStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpressionStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionStatement_SemicolonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpressionStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// statementExpression=StatementExpression
protected class ExpressionStatement_StatementExpressionAssignment_0 extends AssignmentToken  {
	
	public ExpressionStatement_StatementExpressionAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionStatementAccess().getStatementExpressionAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statementExpression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statementExpression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpressionStatementAccess().getStatementExpressionStatementExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ";"
protected class ExpressionStatement_SemicolonKeyword_1 extends KeywordToken  {
	
	public ExpressionStatement_SemicolonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionStatement_StatementExpressionAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ExpressionStatement ****************/


/************ begin Rule StatementExpression ****************
 *
 * StatementExpression:
 * 	ClassInstanceCreationExpression | RuleInvocation | RuleInvocationSuper | StaticAccess | VariableAccess
 * 	({Assignment.lhs+=current} operator=AssignmentOperator expression=Expression | {Assignment.lhs+=current} (","
 * 	lhs+=VariableAccess)+ operator=AssignmentOperator expression=Expression)?;
 *
 **/

// ClassInstanceCreationExpression | RuleInvocation | RuleInvocationSuper | StaticAccess | VariableAccess
// ({Assignment.lhs+=current} operator=AssignmentOperator expression=Expression | {Assignment.lhs+=current} (","
// lhs+=VariableAccess)+ operator=AssignmentOperator expression=Expression)?
protected class StatementExpression_Alternatives extends AlternativesToken {

	public StatementExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_ClassInstanceCreationExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StatementExpression_RuleInvocationParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new StatementExpression_RuleInvocationSuperParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new StatementExpression_StaticAccessParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new StatementExpression_Group_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementExpressionAccess().getAssignmentLhsAction_4_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ClassInstanceCreationExpression
protected class StatementExpression_ClassInstanceCreationExpressionParserRuleCall_0 extends RuleCallToken {
	
	public StatementExpression_ClassInstanceCreationExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getClassInstanceCreationExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassInstanceCreationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ClassInstanceCreationExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RuleInvocation
protected class StatementExpression_RuleInvocationParserRuleCall_1 extends RuleCallToken {
	
	public StatementExpression_RuleInvocationParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getRuleInvocationParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleInvocation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RuleInvocation_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RuleInvocationSuper
protected class StatementExpression_RuleInvocationSuperParserRuleCall_2 extends RuleCallToken {
	
	public StatementExpression_RuleInvocationSuperParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getRuleInvocationSuperParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleInvocationSuper_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(RuleInvocationSuper_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StaticAccess
protected class StatementExpression_StaticAccessParserRuleCall_3 extends RuleCallToken {
	
	public StatementExpression_StaticAccessParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getStaticAccessParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StaticAccess_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StaticAccess_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// VariableAccess ({Assignment.lhs+=current} operator=AssignmentOperator expression=Expression | {Assignment.lhs+=current}
// ("," lhs+=VariableAccess)+ operator=AssignmentOperator expression=Expression)?
protected class StatementExpression_Group_4 extends GroupToken {
	
	public StatementExpression_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_Alternatives_4_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StatementExpression_VariableAccessParserRuleCall_4_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementExpressionAccess().getAssignmentLhsAction_4_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// VariableAccess
protected class StatementExpression_VariableAccessParserRuleCall_4_0 extends RuleCallToken {
	
	public StatementExpression_VariableAccessParserRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getVariableAccessParserRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableAccess_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		if(checkForRecursion(VariableAccess_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({Assignment.lhs+=current} operator=AssignmentOperator expression=Expression | {Assignment.lhs+=current} (","
// lhs+=VariableAccess)+ operator=AssignmentOperator expression=Expression)?
protected class StatementExpression_Alternatives_4_1 extends AlternativesToken {

	public StatementExpression_Alternatives_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getAlternatives_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_Group_4_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StatementExpression_Group_4_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementExpressionAccess().getAssignmentLhsAction_4_1_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Assignment.lhs+=current} operator=AssignmentOperator expression=Expression
protected class StatementExpression_Group_4_1_0 extends GroupToken {
	
	public StatementExpression_Group_4_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getGroup_4_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_ExpressionAssignment_4_1_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {Assignment.lhs+=current}
protected class StatementExpression_AssignmentLhsAction_4_1_0_0 extends ActionToken  {

	public StatementExpression_AssignmentLhsAction_4_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getAssignmentLhsAction_4_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_VariableAccessParserRuleCall_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("lhs", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("lhs")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// operator=AssignmentOperator
protected class StatementExpression_OperatorAssignment_4_1_0_1 extends AssignmentToken  {
	
	public StatementExpression_OperatorAssignment_4_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getOperatorAssignment_4_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_AssignmentLhsAction_4_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getStatementExpressionAccess().getOperatorAssignmentOperatorEnumRuleCall_4_1_0_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getStatementExpressionAccess().getOperatorAssignmentOperatorEnumRuleCall_4_1_0_1_0();
			return obj;
		}
		return null;
	}

}

// expression=Expression
protected class StatementExpression_ExpressionAssignment_4_1_0_2 extends AssignmentToken  {
	
	public StatementExpression_ExpressionAssignment_4_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getExpressionAssignment_4_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementExpressionAccess().getExpressionExpressionParserRuleCall_4_1_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StatementExpression_OperatorAssignment_4_1_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {Assignment.lhs+=current} ("," lhs+=VariableAccess)+ operator=AssignmentOperator expression=Expression
protected class StatementExpression_Group_4_1_1 extends GroupToken {
	
	public StatementExpression_Group_4_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getGroup_4_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_ExpressionAssignment_4_1_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {Assignment.lhs+=current}
protected class StatementExpression_AssignmentLhsAction_4_1_1_0 extends ActionToken  {

	public StatementExpression_AssignmentLhsAction_4_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getAssignmentLhsAction_4_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_VariableAccessParserRuleCall_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("lhs", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("lhs")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ("," lhs+=VariableAccess)+
protected class StatementExpression_Group_4_1_1_1 extends GroupToken {
	
	public StatementExpression_Group_4_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getGroup_4_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_LhsAssignment_4_1_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class StatementExpression_CommaKeyword_4_1_1_1_0 extends KeywordToken  {
	
	public StatementExpression_CommaKeyword_4_1_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getCommaKeyword_4_1_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_Group_4_1_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StatementExpression_AssignmentLhsAction_4_1_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// lhs+=VariableAccess
protected class StatementExpression_LhsAssignment_4_1_1_1_1 extends AssignmentToken  {
	
	public StatementExpression_LhsAssignment_4_1_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getLhsAssignment_4_1_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableAccess_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableAccessRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementExpressionAccess().getLhsVariableAccessParserRuleCall_4_1_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StatementExpression_CommaKeyword_4_1_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// operator=AssignmentOperator
protected class StatementExpression_OperatorAssignment_4_1_1_2 extends AssignmentToken  {
	
	public StatementExpression_OperatorAssignment_4_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getOperatorAssignment_4_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_Group_4_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getStatementExpressionAccess().getOperatorAssignmentOperatorEnumRuleCall_4_1_1_2_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getStatementExpressionAccess().getOperatorAssignmentOperatorEnumRuleCall_4_1_1_2_0();
			return obj;
		}
		return null;
	}

}

// expression=Expression
protected class StatementExpression_ExpressionAssignment_4_1_1_3 extends AssignmentToken  {
	
	public StatementExpression_ExpressionAssignment_4_1_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementExpressionAccess().getExpressionAssignment_4_1_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementExpressionAccess().getExpressionExpressionParserRuleCall_4_1_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StatementExpression_OperatorAssignment_4_1_1_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}





/************ end Rule StatementExpression ****************/


/************ begin Rule EmptyStatement ****************
 *
 * EmptyStatement:
 * 	{EmptyStatement} ";";
 *
 **/

// {EmptyStatement} ";"
protected class EmptyStatement_Group extends GroupToken {
	
	public EmptyStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEmptyStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmptyStatement_SemicolonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {EmptyStatement}
protected class EmptyStatement_EmptyStatementAction_0 extends ActionToken  {

	public EmptyStatement_EmptyStatementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// ";"
protected class EmptyStatement_SemicolonKeyword_1 extends KeywordToken  {
	
	public EmptyStatement_SemicolonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmptyStatement_EmptyStatementAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule EmptyStatement ****************/


/************ begin Rule ReturnStatement ****************
 *
 * ReturnStatement:
 * 	{ReturnStatement} "return" expression=Expression? ";";
 *
 **/

// {ReturnStatement} "return" expression=Expression? ";"
protected class ReturnStatement_Group extends GroupToken {
	
	public ReturnStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnStatement_SemicolonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReturnStatementAccess().getReturnStatementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ReturnStatement}
protected class ReturnStatement_ReturnStatementAction_0 extends ActionToken  {

	public ReturnStatement_ReturnStatementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getReturnStatementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "return"
protected class ReturnStatement_ReturnKeyword_1 extends KeywordToken  {
	
	public ReturnStatement_ReturnKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getReturnKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnStatement_ReturnStatementAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression?
protected class ReturnStatement_ExpressionAssignment_2 extends AssignmentToken  {
	
	public ReturnStatement_ExpressionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getExpressionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReturnStatement_ReturnKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ReturnStatement_SemicolonKeyword_3 extends KeywordToken  {
	
	public ReturnStatement_SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnStatement_ExpressionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReturnStatement_ReturnKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ReturnStatement ****************/


/************ begin Rule IfStatement ****************
 *
 * IfStatement:
 * 	"if" "(" expression=Expression ")" trueStatement=Statement ("else" elseStatement=Statement)?;
 *
 **/

// "if" "(" expression=Expression ")" trueStatement=Statement ("else" elseStatement=Statement)?
protected class IfStatement_Group extends GroupToken {
	
	public IfStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new IfStatement_TrueStatementAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIfStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "if"
protected class IfStatement_IfKeyword_0 extends KeywordToken  {
	
	public IfStatement_IfKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getIfKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class IfStatement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public IfStatement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_IfKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression
protected class IfStatement_ExpressionAssignment_2 extends AssignmentToken  {
	
	public IfStatement_ExpressionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getExpressionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class IfStatement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public IfStatement_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_ExpressionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// trueStatement=Statement
protected class IfStatement_TrueStatementAssignment_4 extends AssignmentToken  {
	
	public IfStatement_TrueStatementAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getTrueStatementAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trueStatement",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trueStatement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementAccess().getTrueStatementStatementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_RightParenthesisKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("else" elseStatement=Statement)?
protected class IfStatement_Group_5 extends GroupToken {
	
	public IfStatement_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_ElseStatementAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "else"
protected class IfStatement_ElseKeyword_5_0 extends KeywordToken  {
	
	public IfStatement_ElseKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getElseKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_TrueStatementAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elseStatement=Statement
protected class IfStatement_ElseStatementAssignment_5_1 extends AssignmentToken  {
	
	public IfStatement_ElseStatementAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getElseStatementAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elseStatement",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elseStatement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementAccess().getElseStatementStatementParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_ElseKeyword_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule IfStatement ****************/


/************ begin Rule WhileStatement ****************
 *
 * WhileStatement:
 * 	"while" "(" expression=Expression ")" statement=Statement;
 *
 **/

// "while" "(" expression=Expression ")" statement=Statement
protected class WhileStatement_Group extends GroupToken {
	
	public WhileStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhileStatement_StatementAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWhileStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "while"
protected class WhileStatement_WhileKeyword_0 extends KeywordToken  {
	
	public WhileStatement_WhileKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getWhileKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class WhileStatement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public WhileStatement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhileStatement_WhileKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression
protected class WhileStatement_ExpressionAssignment_2 extends AssignmentToken  {
	
	public WhileStatement_ExpressionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getExpressionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWhileStatementAccess().getExpressionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WhileStatement_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class WhileStatement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public WhileStatement_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhileStatement_ExpressionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statement=Statement
protected class WhileStatement_StatementAssignment_4 extends AssignmentToken  {
	
	public WhileStatement_StatementAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWhileStatementAccess().getStatementAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statement",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WhileStatement_RightParenthesisKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule WhileStatement ****************/


/************ begin Rule DoStatement ****************
 *
 * DoStatement:
 * 	"do" statement=Statement "while" "(" expression=Expression ")" ";";
 *
 **/

// "do" statement=Statement "while" "(" expression=Expression ")" ";"
protected class DoStatement_Group extends GroupToken {
	
	public DoStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDoStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoStatement_SemicolonKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "do"
protected class DoStatement_DoKeyword_0 extends KeywordToken  {
	
	public DoStatement_DoKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoStatementAccess().getDoKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// statement=Statement
protected class DoStatement_StatementAssignment_1 extends AssignmentToken  {
	
	public DoStatement_StatementAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoStatementAccess().getStatementAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statement",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DoStatement_DoKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "while"
protected class DoStatement_WhileKeyword_2 extends KeywordToken  {
	
	public DoStatement_WhileKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoStatementAccess().getWhileKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoStatement_StatementAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class DoStatement_LeftParenthesisKeyword_3 extends KeywordToken  {
	
	public DoStatement_LeftParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoStatement_WhileKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression
protected class DoStatement_ExpressionAssignment_4 extends AssignmentToken  {
	
	public DoStatement_ExpressionAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoStatementAccess().getExpressionAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DoStatement_LeftParenthesisKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class DoStatement_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public DoStatement_RightParenthesisKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoStatement_ExpressionAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ";"
protected class DoStatement_SemicolonKeyword_6 extends KeywordToken  {
	
	public DoStatement_SemicolonKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoStatementAccess().getSemicolonKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoStatement_RightParenthesisKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule DoStatement ****************/


/************ begin Rule ForInit ****************
 *
 * ForInit:
 * 	{ForInit} (statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration (","
 * 	statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration)*)?;
 *
 **/

// {ForInit} (statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration (","
// statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration)*)?
protected class ForInit_Group extends GroupToken {
	
	public ForInit_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getForInitAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForInit_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ForInit_ForInitAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getForInitAccess().getForInitAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ForInit}
protected class ForInit_ForInitAction_0 extends ActionToken  {

	public ForInit_ForInitAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getForInitAccess().getForInitAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// (statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration (","
// statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration)*)?
protected class ForInit_Alternatives_1 extends AlternativesToken {

	public ForInit_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getForInitAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForInit_StatementExpressionsAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ForInit_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// statementExpressions+=StatementExpression
protected class ForInit_StatementExpressionsAssignment_1_0 extends AssignmentToken  {
	
	public ForInit_StatementExpressionsAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForInitAccess().getStatementExpressionsAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statementExpressions",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statementExpressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForInitAccess().getStatementExpressionsStatementExpressionParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForInit_ForInitAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// varDeclarations+=LocalVariableDeclaration ("," statementExpressions+=StatementExpression |
// varDeclarations+=LocalVariableDeclaration)*
protected class ForInit_Group_1_1 extends GroupToken {
	
	public ForInit_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getForInitAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForInit_Alternatives_1_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ForInit_VarDeclarationsAssignment_1_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// varDeclarations+=LocalVariableDeclaration
protected class ForInit_VarDeclarationsAssignment_1_1_0 extends AssignmentToken  {
	
	public ForInit_VarDeclarationsAssignment_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForInitAccess().getVarDeclarationsAssignment_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalVariableDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("varDeclarations",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("varDeclarations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLocalVariableDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForInitAccess().getVarDeclarationsLocalVariableDeclarationParserRuleCall_1_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForInit_ForInitAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," statementExpressions+=StatementExpression | varDeclarations+=LocalVariableDeclaration)*
protected class ForInit_Alternatives_1_1_1 extends AlternativesToken {

	public ForInit_Alternatives_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getForInitAccess().getAlternatives_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForInit_Group_1_1_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ForInit_VarDeclarationsAssignment_1_1_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "," statementExpressions+=StatementExpression
protected class ForInit_Group_1_1_1_0 extends GroupToken {
	
	public ForInit_Group_1_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getForInitAccess().getGroup_1_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForInit_StatementExpressionsAssignment_1_1_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ForInit_CommaKeyword_1_1_1_0_0 extends KeywordToken  {
	
	public ForInit_CommaKeyword_1_1_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForInitAccess().getCommaKeyword_1_1_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForInit_Alternatives_1_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ForInit_VarDeclarationsAssignment_1_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// statementExpressions+=StatementExpression
protected class ForInit_StatementExpressionsAssignment_1_1_1_0_1 extends AssignmentToken  {
	
	public ForInit_StatementExpressionsAssignment_1_1_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForInitAccess().getStatementExpressionsAssignment_1_1_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statementExpressions",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statementExpressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForInitAccess().getStatementExpressionsStatementExpressionParserRuleCall_1_1_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForInit_CommaKeyword_1_1_1_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// varDeclarations+=LocalVariableDeclaration
protected class ForInit_VarDeclarationsAssignment_1_1_1_1 extends AssignmentToken  {
	
	public ForInit_VarDeclarationsAssignment_1_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForInitAccess().getVarDeclarationsAssignment_1_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalVariableDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("varDeclarations",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("varDeclarations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLocalVariableDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForInitAccess().getVarDeclarationsLocalVariableDeclarationParserRuleCall_1_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForInit_Alternatives_1_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ForInit_VarDeclarationsAssignment_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}





/************ end Rule ForInit ****************/


/************ begin Rule ForUpdate ****************
 *
 * ForUpdate:
 * 	statementExpression+=StatementExpression ("," statementExpression+=StatementExpression)*;
 *
 **/

// statementExpression+=StatementExpression ("," statementExpression+=StatementExpression)*
protected class ForUpdate_Group extends GroupToken {
	
	public ForUpdate_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getForUpdateAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForUpdate_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ForUpdate_StatementExpressionAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getForUpdateRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// statementExpression+=StatementExpression
protected class ForUpdate_StatementExpressionAssignment_0 extends AssignmentToken  {
	
	public ForUpdate_StatementExpressionAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForUpdateAccess().getStatementExpressionAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statementExpression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statementExpression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForUpdateAccess().getStatementExpressionStatementExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ("," statementExpression+=StatementExpression)*
protected class ForUpdate_Group_1 extends GroupToken {
	
	public ForUpdate_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getForUpdateAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForUpdate_StatementExpressionAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ForUpdate_CommaKeyword_1_0 extends KeywordToken  {
	
	public ForUpdate_CommaKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForUpdateAccess().getCommaKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForUpdate_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ForUpdate_StatementExpressionAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// statementExpression+=StatementExpression
protected class ForUpdate_StatementExpressionAssignment_1_1 extends AssignmentToken  {
	
	public ForUpdate_StatementExpressionAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForUpdateAccess().getStatementExpressionAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statementExpression",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statementExpression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForUpdateAccess().getStatementExpressionStatementExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForUpdate_CommaKeyword_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ForUpdate ****************/


/************ begin Rule ForStatement ****************
 *
 * ForStatement:
 * 	"for" "(" (loopVariable=LoopVariable ":" expression=Expression | forInit=ForInit? ";" expression=Expression? ";"
 * 	forUpdate=ForUpdate?) ")" statement=Statement;
 *
 **/

// "for" "(" (loopVariable=LoopVariable ":" expression=Expression | forInit=ForInit? ";" expression=Expression? ";"
// forUpdate=ForUpdate?) ")" statement=Statement
protected class ForStatement_Group extends GroupToken {
	
	public ForStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getForStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_StatementAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getForStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "for"
protected class ForStatement_ForKeyword_0 extends KeywordToken  {
	
	public ForStatement_ForKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getForKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class ForStatement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public ForStatement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_ForKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// loopVariable=LoopVariable ":" expression=Expression | forInit=ForInit? ";" expression=Expression? ";"
// forUpdate=ForUpdate?
protected class ForStatement_Alternatives_2 extends AlternativesToken {

	public ForStatement_Alternatives_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getForStatementAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_Group_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ForStatement_Group_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// loopVariable=LoopVariable ":" expression=Expression
protected class ForStatement_Group_2_0 extends GroupToken {
	
	public ForStatement_Group_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getForStatementAccess().getGroup_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_ExpressionAssignment_2_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// loopVariable=LoopVariable
protected class ForStatement_LoopVariableAssignment_2_0_0 extends AssignmentToken  {
	
	public ForStatement_LoopVariableAssignment_2_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getLoopVariableAssignment_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LoopVariable_VardeclAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("loopVariable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("loopVariable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLoopVariableRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForStatementAccess().getLoopVariableLoopVariableParserRuleCall_2_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ":"
protected class ForStatement_ColonKeyword_2_0_1 extends KeywordToken  {
	
	public ForStatement_ColonKeyword_2_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getColonKeyword_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_LoopVariableAssignment_2_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression
protected class ForStatement_ExpressionAssignment_2_0_2 extends AssignmentToken  {
	
	public ForStatement_ExpressionAssignment_2_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getExpressionAssignment_2_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_2_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_ColonKeyword_2_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// forInit=ForInit? ";" expression=Expression? ";" forUpdate=ForUpdate?
protected class ForStatement_Group_2_1 extends GroupToken {
	
	public ForStatement_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getForStatementAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_ForUpdateAssignment_2_1_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ForStatement_SemicolonKeyword_2_1_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// forInit=ForInit?
protected class ForStatement_ForInitAssignment_2_1_0 extends AssignmentToken  {
	
	public ForStatement_ForInitAssignment_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getForInitAssignment_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForInit_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("forInit",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("forInit");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getForInitRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForStatementAccess().getForInitForInitParserRuleCall_2_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ForStatement_SemicolonKeyword_2_1_1 extends KeywordToken  {
	
	public ForStatement_SemicolonKeyword_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getSemicolonKeyword_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_ForInitAssignment_2_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ForStatement_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// expression=Expression?
protected class ForStatement_ExpressionAssignment_2_1_2 extends AssignmentToken  {
	
	public ForStatement_ExpressionAssignment_2_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getExpressionAssignment_2_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_2_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_SemicolonKeyword_2_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ForStatement_SemicolonKeyword_2_1_3 extends KeywordToken  {
	
	public ForStatement_SemicolonKeyword_2_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getSemicolonKeyword_2_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_ExpressionAssignment_2_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ForStatement_SemicolonKeyword_2_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// forUpdate=ForUpdate?
protected class ForStatement_ForUpdateAssignment_2_1_4 extends AssignmentToken  {
	
	public ForStatement_ForUpdateAssignment_2_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getForUpdateAssignment_2_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForUpdate_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("forUpdate",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("forUpdate");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getForUpdateRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForStatementAccess().getForUpdateForUpdateParserRuleCall_2_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_SemicolonKeyword_2_1_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class ForStatement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public ForStatement_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_Alternatives_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statement=Statement
protected class ForStatement_StatementAssignment_4 extends AssignmentToken  {
	
	public ForStatement_StatementAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getStatementAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statement",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_RightParenthesisKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ForStatement ****************/


/************ begin Rule LoopVariable ****************
 *
 * LoopVariable:
 * 	vardecl=VarDeclaration;
 *
 **/

// vardecl=VarDeclaration
protected class LoopVariable_VardeclAssignment extends AssignmentToken  {
	
	public LoopVariable_VardeclAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLoopVariableAccess().getVardeclAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDeclaration_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLoopVariableRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("vardecl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("vardecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLoopVariableAccess().getVardeclVarDeclarationParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule LoopVariable ****************/


/************ begin Rule BreakStatement ****************
 *
 * BreakStatement:
 * 	{BreakStatement} "break" ";";
 *
 **/

// {BreakStatement} "break" ";"
protected class BreakStatement_Group extends GroupToken {
	
	public BreakStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBreakStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BreakStatement_SemicolonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBreakStatementAccess().getBreakStatementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {BreakStatement}
protected class BreakStatement_BreakStatementAction_0 extends ActionToken  {

	public BreakStatement_BreakStatementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBreakStatementAccess().getBreakStatementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "break"
protected class BreakStatement_BreakKeyword_1 extends KeywordToken  {
	
	public BreakStatement_BreakKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBreakStatementAccess().getBreakKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BreakStatement_BreakStatementAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ";"
protected class BreakStatement_SemicolonKeyword_2 extends KeywordToken  {
	
	public BreakStatement_SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BreakStatement_BreakKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule BreakStatement ****************/


/************ begin Rule ThrowStatement ****************
 *
 * ThrowStatement:
 * 	"throw" expression=Expression ";";
 *
 **/

// "throw" expression=Expression ";"
protected class ThrowStatement_Group extends GroupToken {
	
	public ThrowStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getThrowStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThrowStatement_SemicolonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getThrowStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "throw"
protected class ThrowStatement_ThrowKeyword_0 extends KeywordToken  {
	
	public ThrowStatement_ThrowKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThrowStatementAccess().getThrowKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// expression=Expression
protected class ThrowStatement_ExpressionAssignment_1 extends AssignmentToken  {
	
	public ThrowStatement_ExpressionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThrowStatementAccess().getExpressionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getThrowStatementAccess().getExpressionExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThrowStatement_ThrowKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ThrowStatement_SemicolonKeyword_2 extends KeywordToken  {
	
	public ThrowStatement_SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThrowStatementAccess().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThrowStatement_ExpressionAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ThrowStatement ****************/


/************ begin Rule TryStatement ****************
 *
 * TryStatement:
 * 	"try" tryBlock=Block catches+=Catch* ("finally" finallyBlock=Block)?;
 *
 **/

// "try" tryBlock=Block catches+=Catch* ("finally" finallyBlock=Block)?
protected class TryStatement_Group extends GroupToken {
	
	public TryStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTryStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TryStatement_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TryStatement_CatchesAssignment_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TryStatement_TryBlockAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTryStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "try"
protected class TryStatement_TryKeyword_0 extends KeywordToken  {
	
	public TryStatement_TryKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTryStatementAccess().getTryKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// tryBlock=Block
protected class TryStatement_TryBlockAssignment_1 extends AssignmentToken  {
	
	public TryStatement_TryBlockAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTryStatementAccess().getTryBlockAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tryBlock",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tryBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTryStatementAccess().getTryBlockBlockParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TryStatement_TryKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// catches+=Catch*
protected class TryStatement_CatchesAssignment_2 extends AssignmentToken  {
	
	public TryStatement_CatchesAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTryStatementAccess().getCatchesAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Catch_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("catches",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("catches");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCatchRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTryStatementAccess().getCatchesCatchParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TryStatement_CatchesAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TryStatement_TryBlockAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("finally" finallyBlock=Block)?
protected class TryStatement_Group_3 extends GroupToken {
	
	public TryStatement_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTryStatementAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TryStatement_FinallyBlockAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "finally"
protected class TryStatement_FinallyKeyword_3_0 extends KeywordToken  {
	
	public TryStatement_FinallyKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTryStatementAccess().getFinallyKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TryStatement_CatchesAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TryStatement_TryBlockAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// finallyBlock=Block
protected class TryStatement_FinallyBlockAssignment_3_1 extends AssignmentToken  {
	
	public TryStatement_FinallyBlockAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTryStatementAccess().getFinallyBlockAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("finallyBlock",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("finallyBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTryStatementAccess().getFinallyBlockBlockParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TryStatement_FinallyKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule TryStatement ****************/


/************ begin Rule Catch ****************
 *
 * Catch:
 * 	"catch" "(" formalParameter=FormalParameter ")" block=Block;
 *
 **/

// "catch" "(" formalParameter=FormalParameter ")" block=Block
protected class Catch_Group extends GroupToken {
	
	public Catch_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCatchAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Catch_BlockAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCatchRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "catch"
protected class Catch_CatchKeyword_0 extends KeywordToken  {
	
	public Catch_CatchKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCatchAccess().getCatchKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class Catch_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public Catch_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCatchAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Catch_CatchKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// formalParameter=FormalParameter
protected class Catch_FormalParameterAssignment_2 extends AssignmentToken  {
	
	public Catch_FormalParameterAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCatchAccess().getFormalParameterAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormalParameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("formalParameter",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("formalParameter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormalParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCatchAccess().getFormalParameterFormalParameterParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Catch_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Catch_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public Catch_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCatchAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Catch_FormalParameterAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// block=Block
protected class Catch_BlockAssignment_4 extends AssignmentToken  {
	
	public Catch_BlockAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCatchAccess().getBlockAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("block",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("block");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCatchAccess().getBlockBlockParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Catch_RightParenthesisKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Catch ****************/


/************ begin Rule Expression ****************
 *
 * // -----------------------------------------------------------------------------
 * // Expressions	
 * // -----------------------------------------------------------------------------
 * Expression:
 * 	Expression_10;
 *
 **/

// Expression_10
protected class Expression_Expression_10ParserRuleCall extends RuleCallToken {
	
	public Expression_Expression_10ParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getExpression_10ParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_10_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Expression_10_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Expression ****************/


/************ begin Rule Expression_10 ****************
 *
 * // Iterator Expression, e.g., as in "collect(e|e.name)"
 * Expression_10 returns Expression:
 * 	{IteratorExpression} variable=LoopVariable "|" expression=Expression_1 | Expression_1;
 *
 **/

// {IteratorExpression} variable=LoopVariable "|" expression=Expression_1 | Expression_1
protected class Expression_10_Alternatives extends AlternativesToken {

	public Expression_10_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExpression_10Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_10_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_10_Expression_1ParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {IteratorExpression} variable=LoopVariable "|" expression=Expression_1
protected class Expression_10_Group_0 extends GroupToken {
	
	public Expression_10_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_10Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_10_ExpressionAssignment_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {IteratorExpression}
protected class Expression_10_IteratorExpressionAction_0_0 extends ActionToken  {

	public Expression_10_IteratorExpressionAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// variable=LoopVariable
protected class Expression_10_VariableAssignment_0_1 extends AssignmentToken  {
	
	public Expression_10_VariableAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_10Access().getVariableAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LoopVariable_VardeclAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("variable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("variable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLoopVariableRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpression_10Access().getVariableLoopVariableParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Expression_10_IteratorExpressionAction_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "|"
protected class Expression_10_VerticalLineKeyword_0_2 extends KeywordToken  {
	
	public Expression_10_VerticalLineKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpression_10Access().getVerticalLineKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_10_VariableAssignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression_1
protected class Expression_10_ExpressionAssignment_0_3 extends AssignmentToken  {
	
	public Expression_10_ExpressionAssignment_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_10Access().getExpressionAssignment_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_1Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpression_10Access().getExpressionExpression_1ParserRuleCall_0_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Expression_10_VerticalLineKeyword_0_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// Expression_1
protected class Expression_10_Expression_1ParserRuleCall_1 extends RuleCallToken {
	
	public Expression_10_Expression_1ParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpression_10Access().getExpression_1ParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_1_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Expression_10 ****************/


/************ begin Rule Expression_1 ****************
 *
 * / * *************
 * * Infix expression:
 * *************** * / // Boolean operations	
 * Expression_1 returns Expression:
 * 	Expression_2 ({BooleanExpression.lhs=current} op=BooleanOperator rhs=Expression_2)*;
 *
 **/

// Expression_2 ({BooleanExpression.lhs=current} op=BooleanOperator rhs=Expression_2)*
protected class Expression_1_Group extends GroupToken {
	
	public Expression_1_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_1_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_1_Expression_2ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Expression_2
protected class Expression_1_Expression_2ParserRuleCall_0 extends RuleCallToken {
	
	public Expression_1_Expression_2ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpression_1Access().getExpression_2ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_2_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({BooleanExpression.lhs=current} op=BooleanOperator rhs=Expression_2)*
protected class Expression_1_Group_1 extends GroupToken {
	
	public Expression_1_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_1Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_1_RhsAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {BooleanExpression.lhs=current}
protected class Expression_1_BooleanExpressionLhsAction_1_0 extends ActionToken  {

	public Expression_1_BooleanExpressionLhsAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_1_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_1_Expression_2ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("lhs", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("lhs")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=BooleanOperator
protected class Expression_1_OpAssignment_1_1 extends AssignmentToken  {
	
	public Expression_1_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_1Access().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_1_BooleanExpressionLhsAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getExpression_1Access().getOpBooleanOperatorEnumRuleCall_1_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getExpression_1Access().getOpBooleanOperatorEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rhs=Expression_2
protected class Expression_1_RhsAssignment_1_2 extends AssignmentToken  {
	
	public Expression_1_RhsAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_1Access().getRhsAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_2Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpression_1Access().getRhsExpression_2ParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Expression_1_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Expression_1 ****************/


/************ begin Rule Expression_2 ****************
 *
 * // Equality Expression
 * Expression_2 returns Expression:
 * 	Expression_3 ({EqualityExpression.lhs=current} op=EqualityOperator rhs=Expression_3)*;
 *
 **/

// Expression_3 ({EqualityExpression.lhs=current} op=EqualityOperator rhs=Expression_3)*
protected class Expression_2_Group extends GroupToken {
	
	public Expression_2_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_2_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_2_Expression_3ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Expression_3
protected class Expression_2_Expression_3ParserRuleCall_0 extends RuleCallToken {
	
	public Expression_2_Expression_3ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpression_2Access().getExpression_3ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_3_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_3_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({EqualityExpression.lhs=current} op=EqualityOperator rhs=Expression_3)*
protected class Expression_2_Group_1 extends GroupToken {
	
	public Expression_2_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_2Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_2_RhsAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {EqualityExpression.lhs=current}
protected class Expression_2_EqualityExpressionLhsAction_1_0 extends ActionToken  {

	public Expression_2_EqualityExpressionLhsAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_2_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_2_Expression_3ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("lhs", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("lhs")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=EqualityOperator
protected class Expression_2_OpAssignment_1_1 extends AssignmentToken  {
	
	public Expression_2_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_2Access().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_2_EqualityExpressionLhsAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getExpression_2Access().getOpEqualityOperatorEnumRuleCall_1_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getExpression_2Access().getOpEqualityOperatorEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rhs=Expression_3
protected class Expression_2_RhsAssignment_1_2 extends AssignmentToken  {
	
	public Expression_2_RhsAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_2Access().getRhsAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_3_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_3Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpression_2Access().getRhsExpression_3ParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Expression_2_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Expression_2 ****************/


/************ begin Rule Expression_3 ****************
 *
 * // Relational
 * Expression_3 returns Expression:
 * 	Expression_5 ({RelationalExpression.lhs=current} op=RelationalOperator rhs=Expression_5)*;
 *
 **/

// Expression_5 ({RelationalExpression.lhs=current} op=RelationalOperator rhs=Expression_5)*
protected class Expression_3_Group extends GroupToken {
	
	public Expression_3_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_3Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_3_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_3_Expression_5ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Expression_5
protected class Expression_3_Expression_5ParserRuleCall_0 extends RuleCallToken {
	
	public Expression_3_Expression_5ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpression_3Access().getExpression_5ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_5_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_5_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({RelationalExpression.lhs=current} op=RelationalOperator rhs=Expression_5)*
protected class Expression_3_Group_1 extends GroupToken {
	
	public Expression_3_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_3Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_3_RhsAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {RelationalExpression.lhs=current}
protected class Expression_3_RelationalExpressionLhsAction_1_0 extends ActionToken  {

	public Expression_3_RelationalExpressionLhsAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_3_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_3_Expression_5ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("lhs", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("lhs")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=RelationalOperator
protected class Expression_3_OpAssignment_1_1 extends AssignmentToken  {
	
	public Expression_3_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_3Access().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_3_RelationalExpressionLhsAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getExpression_3Access().getOpRelationalOperatorEnumRuleCall_1_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getExpression_3Access().getOpRelationalOperatorEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rhs=Expression_5
protected class Expression_3_RhsAssignment_1_2 extends AssignmentToken  {
	
	public Expression_3_RhsAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_3Access().getRhsAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_5_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_5Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpression_3Access().getRhsExpression_5ParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Expression_3_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Expression_3 ****************/


/************ begin Rule Expression_5 ****************
 *
 * // In-Expression
 * //Expression_4 returns Expression:
 * //	Expression_5
 * //	({InExpression.lhs=current} "in" rhs=Expression_5)*;
 * // Math-Expression
 * Expression_5 returns Expression:
 * 	Expression_6 ({MathExpression.lhs=current} op=MathOperator rhs=Expression_6)*;
 *
 **/

// Expression_6 ({MathExpression.lhs=current} op=MathOperator rhs=Expression_6)*
protected class Expression_5_Group extends GroupToken {
	
	public Expression_5_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_5Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_5_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_5_Expression_6ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Expression_6
protected class Expression_5_Expression_6ParserRuleCall_0 extends RuleCallToken {
	
	public Expression_5_Expression_6ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpression_5Access().getExpression_6ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_6_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_6_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({MathExpression.lhs=current} op=MathOperator rhs=Expression_6)*
protected class Expression_5_Group_1 extends GroupToken {
	
	public Expression_5_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_5Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_5_RhsAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {MathExpression.lhs=current}
protected class Expression_5_MathExpressionLhsAction_1_0 extends ActionToken  {

	public Expression_5_MathExpressionLhsAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_5_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_5_Expression_6ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("lhs", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("lhs")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=MathOperator
protected class Expression_5_OpAssignment_1_1 extends AssignmentToken  {
	
	public Expression_5_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_5Access().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_5_MathExpressionLhsAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getExpression_5Access().getOpMathOperatorEnumRuleCall_1_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getExpression_5Access().getOpMathOperatorEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rhs=Expression_6
protected class Expression_5_RhsAssignment_1_2 extends AssignmentToken  {
	
	public Expression_5_RhsAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_5Access().getRhsAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_6_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_6Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpression_5Access().getRhsExpression_6ParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Expression_5_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Expression_5 ****************/


/************ begin Rule Expression_6 ****************
 *
 * // Unary expression:
 * Expression_6 returns Expression:
 * 	{UnaryCastExpression} "(" type=Type ")" expression=Expression_7 | Expression_7;
 *
 **/

// {UnaryCastExpression} "(" type=Type ")" expression=Expression_7 | Expression_7
protected class Expression_6_Alternatives extends AlternativesToken {

	public Expression_6_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExpression_6Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_6_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_6_Expression_7ParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {UnaryCastExpression} "(" type=Type ")" expression=Expression_7
protected class Expression_6_Group_0 extends GroupToken {
	
	public Expression_6_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_6Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_6_ExpressionAssignment_0_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {UnaryCastExpression}
protected class Expression_6_UnaryCastExpressionAction_0_0 extends ActionToken  {

	public Expression_6_UnaryCastExpressionAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "("
protected class Expression_6_LeftParenthesisKeyword_0_1 extends KeywordToken  {
	
	public Expression_6_LeftParenthesisKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpression_6Access().getLeftParenthesisKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_6_UnaryCastExpressionAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type=Type
protected class Expression_6_TypeAssignment_0_2 extends AssignmentToken  {
	
	public Expression_6_TypeAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_6Access().getTypeAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpression_6Access().getTypeTypeParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Expression_6_LeftParenthesisKeyword_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Expression_6_RightParenthesisKeyword_0_3 extends KeywordToken  {
	
	public Expression_6_RightParenthesisKeyword_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpression_6Access().getRightParenthesisKeyword_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_6_TypeAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression_7
protected class Expression_6_ExpressionAssignment_0_4 extends AssignmentToken  {
	
	public Expression_6_ExpressionAssignment_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_6Access().getExpressionAssignment_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_7_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_7Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpression_6Access().getExpressionExpression_7ParserRuleCall_0_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Expression_6_RightParenthesisKeyword_0_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// Expression_7
protected class Expression_6_Expression_7ParserRuleCall_1 extends RuleCallToken {
	
	public Expression_6_Expression_7ParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpression_6Access().getExpression_7ParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_7_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_7_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Expression_6 ****************/


/************ begin Rule Expression_7 ****************
 *
 * Expression_7 returns Expression:
 * 	Expression_8 | {UnaryBooleanExpression} "!" expression=Expression_8;
 *
 **/

// Expression_8 | {UnaryBooleanExpression} "!" expression=Expression_8
protected class Expression_7_Alternatives extends AlternativesToken {

	public Expression_7_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExpression_7Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_7_Expression_8ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_7_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Expression_8
protected class Expression_7_Expression_8ParserRuleCall_0 extends RuleCallToken {
	
	public Expression_7_Expression_8ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpression_7Access().getExpression_8ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_8_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_8_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// {UnaryBooleanExpression} "!" expression=Expression_8
protected class Expression_7_Group_1 extends GroupToken {
	
	public Expression_7_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_7Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_7_ExpressionAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {UnaryBooleanExpression}
protected class Expression_7_UnaryBooleanExpressionAction_1_0 extends ActionToken  {

	public Expression_7_UnaryBooleanExpressionAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "!"
protected class Expression_7_ExclamationMarkKeyword_1_1 extends KeywordToken  {
	
	public Expression_7_ExclamationMarkKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpression_7Access().getExclamationMarkKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_7_UnaryBooleanExpressionAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression_8
protected class Expression_7_ExpressionAssignment_1_2 extends AssignmentToken  {
	
	public Expression_7_ExpressionAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_7Access().getExpressionAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_8_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_8Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpression_7Access().getExpressionExpression_8ParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Expression_7_ExclamationMarkKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Expression_7 ****************/


/************ begin Rule Expression_8 ****************
 *
 * Expression_8 returns Expression:
 * 	Expression_9 | {UnaryMathExpression} op=UnaryMathOperator expression=Expression_9;
 *
 **/

// Expression_9 | {UnaryMathExpression} op=UnaryMathOperator expression=Expression_9
protected class Expression_8_Alternatives extends AlternativesToken {

	public Expression_8_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExpression_8Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_8_Expression_9ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_8_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Expression_9
protected class Expression_8_Expression_9ParserRuleCall_0 extends RuleCallToken {
	
	public Expression_8_Expression_9ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpression_8Access().getExpression_9ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_9_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_9_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// {UnaryMathExpression} op=UnaryMathOperator expression=Expression_9
protected class Expression_8_Group_1 extends GroupToken {
	
	public Expression_8_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_8Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_8_ExpressionAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {UnaryMathExpression}
protected class Expression_8_UnaryMathExpressionAction_1_0 extends ActionToken  {

	public Expression_8_UnaryMathExpressionAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// op=UnaryMathOperator
protected class Expression_8_OpAssignment_1_1 extends AssignmentToken  {
	
	public Expression_8_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_8Access().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_8_UnaryMathExpressionAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getExpression_8Access().getOpUnaryMathOperatorEnumRuleCall_1_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getExpression_8Access().getOpUnaryMathOperatorEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// expression=Expression_9
protected class Expression_8_ExpressionAssignment_1_2 extends AssignmentToken  {
	
	public Expression_8_ExpressionAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_8Access().getExpressionAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_9_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_9Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpression_8Access().getExpressionExpression_9ParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Expression_8_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Expression_8 ****************/


/************ begin Rule Expression_9 ****************
 *
 * // Instance of
 * Expression_9 returns Expression:
 * 	Expression_11 ({InstanceOfExpression.expression=current} "instanceof" type=Type)?;
 *
 **/

// Expression_11 ({InstanceOfExpression.expression=current} "instanceof" type=Type)?
protected class Expression_9_Group extends GroupToken {
	
	public Expression_9_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_9Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_9_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_9_Expression_11ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Expression_11
protected class Expression_9_Expression_11ParserRuleCall_0 extends RuleCallToken {
	
	public Expression_9_Expression_11ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpression_9Access().getExpression_11ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_11_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_11_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({InstanceOfExpression.expression=current} "instanceof" type=Type)?
protected class Expression_9_Group_1 extends GroupToken {
	
	public Expression_9_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_9Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_9_TypeAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {InstanceOfExpression.expression=current}
protected class Expression_9_InstanceOfExpressionExpressionAction_1_0 extends ActionToken  {

	public Expression_9_InstanceOfExpressionExpressionAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_9_Expression_11ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("expression", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("expression")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "instanceof"
protected class Expression_9_InstanceofKeyword_1_1 extends KeywordToken  {
	
	public Expression_9_InstanceofKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpression_9Access().getInstanceofKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_9_InstanceOfExpressionExpressionAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type=Type
protected class Expression_9_TypeAssignment_1_2 extends AssignmentToken  {
	
	public Expression_9_TypeAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_9Access().getTypeAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpression_9Access().getTypeTypeParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Expression_9_InstanceofKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Expression_9 ****************/


/************ begin Rule Expression_11 ****************
 *
 * Expression_11 returns Expression:
 * 	"(" Expression ")" | TerminalExpression;
 *
 **/

// "(" Expression ")" | TerminalExpression
protected class Expression_11_Alternatives extends AlternativesToken {

	public Expression_11_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExpression_11Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_11_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_11_TerminalExpressionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "(" Expression ")"
protected class Expression_11_Group_0 extends GroupToken {
	
	public Expression_11_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpression_11Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_11_RightParenthesisKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class Expression_11_LeftParenthesisKeyword_0_0 extends KeywordToken  {
	
	public Expression_11_LeftParenthesisKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpression_11Access().getLeftParenthesisKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Expression
protected class Expression_11_ExpressionParserRuleCall_0_1 extends RuleCallToken {
	
	public Expression_11_ExpressionParserRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpression_11Access().getExpressionParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_Expression_10ParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_11_LeftParenthesisKeyword_0_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class Expression_11_RightParenthesisKeyword_0_2 extends KeywordToken  {
	
	public Expression_11_RightParenthesisKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpression_11Access().getRightParenthesisKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_11_ExpressionParserRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// TerminalExpression
protected class Expression_11_TerminalExpressionParserRuleCall_1 extends RuleCallToken {
	
	public Expression_11_TerminalExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpression_11Access().getTerminalExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TerminalExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Expression_11 ****************/


/************ begin Rule TerminalExpression ****************
 *
 * TerminalExpression:
 * 	Literal | ClassInstanceCreationExpression | RuleInvocation | RuleInvocationSuper | StaticAccess | VariableAccess;
 *
 **/

// Literal | ClassInstanceCreationExpression | RuleInvocation | RuleInvocationSuper | StaticAccess | VariableAccess
protected class TerminalExpression_Alternatives extends AlternativesToken {

	public TerminalExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerminalExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalExpression_LiteralParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TerminalExpression_ClassInstanceCreationExpressionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TerminalExpression_RuleInvocationParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new TerminalExpression_RuleInvocationSuperParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new TerminalExpression_StaticAccessParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new TerminalExpression_VariableAccessParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Literal
protected class TerminalExpression_LiteralParserRuleCall_0 extends RuleCallToken {
	
	public TerminalExpression_LiteralParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerminalExpressionAccess().getLiteralParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Literal_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ClassInstanceCreationExpression
protected class TerminalExpression_ClassInstanceCreationExpressionParserRuleCall_1 extends RuleCallToken {
	
	public TerminalExpression_ClassInstanceCreationExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerminalExpressionAccess().getClassInstanceCreationExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassInstanceCreationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ClassInstanceCreationExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RuleInvocation
protected class TerminalExpression_RuleInvocationParserRuleCall_2 extends RuleCallToken {
	
	public TerminalExpression_RuleInvocationParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerminalExpressionAccess().getRuleInvocationParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleInvocation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RuleInvocation_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RuleInvocationSuper
protected class TerminalExpression_RuleInvocationSuperParserRuleCall_3 extends RuleCallToken {
	
	public TerminalExpression_RuleInvocationSuperParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerminalExpressionAccess().getRuleInvocationSuperParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleInvocationSuper_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(RuleInvocationSuper_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StaticAccess
protected class TerminalExpression_StaticAccessParserRuleCall_4 extends RuleCallToken {
	
	public TerminalExpression_StaticAccessParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerminalExpressionAccess().getStaticAccessParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StaticAccess_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StaticAccess_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// VariableAccess
protected class TerminalExpression_VariableAccessParserRuleCall_5 extends RuleCallToken {
	
	public TerminalExpression_VariableAccessParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerminalExpressionAccess().getVariableAccessParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableAccess_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		if(checkForRecursion(VariableAccess_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TerminalExpression ****************/


/************ begin Rule Literal ****************
 *
 * Literal:
 * 	IntLiteral | RealLiteral | BooleanLiteral | StringLiteral | NullLiteral;
 *
 **/

// IntLiteral | RealLiteral | BooleanLiteral | StringLiteral | NullLiteral
protected class Literal_Alternatives extends AlternativesToken {

	public Literal_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_IntLiteralParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Literal_RealLiteralParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Literal_BooleanLiteralParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Literal_StringLiteralParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Literal_NullLiteralParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// IntLiteral
protected class Literal_IntLiteralParserRuleCall_0 extends RuleCallToken {
	
	public Literal_IntLiteralParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IntLiteral_IntValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IntLiteral_IntValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RealLiteral
protected class Literal_RealLiteralParserRuleCall_1 extends RuleCallToken {
	
	public Literal_RealLiteralParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getRealLiteralParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RealLiteral_FloatValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RealLiteral_FloatValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BooleanLiteral
protected class Literal_BooleanLiteralParserRuleCall_2 extends RuleCallToken {
	
	public Literal_BooleanLiteralParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BooleanLiteral_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StringLiteral
protected class Literal_StringLiteralParserRuleCall_3 extends RuleCallToken {
	
	public Literal_StringLiteralParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringLiteral_StringValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StringLiteral_StringValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NullLiteral
protected class Literal_NullLiteralParserRuleCall_4 extends RuleCallToken {
	
	public Literal_NullLiteralParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(NullLiteral_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Literal ****************/


/************ begin Rule StringLiteral ****************
 *
 * // intValue=UINT | stringValue=STRING| booleanValue="false" | booleanValue="true";
 * StringLiteral:
 * 	stringValue=STRING;
 *
 **/

// stringValue=STRING
protected class StringLiteral_StringValueAssignment extends AssignmentToken  {
	
	public StringLiteral_StringValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringLiteralAccess().getStringValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringLiteralRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("stringValue",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stringValue");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringLiteralAccess().getStringValueSTRINGTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringLiteralAccess().getStringValueSTRINGTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule StringLiteral ****************/


/************ begin Rule IntLiteral ****************
 *
 * IntLiteral:
 * 	intValue=INT;
 *
 **/

// intValue=INT
protected class IntLiteral_IntValueAssignment extends AssignmentToken  {
	
	public IntLiteral_IntValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIntLiteralAccess().getIntValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIntLiteralRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("intValue",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("intValue");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getIntLiteralAccess().getIntValueINTTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getIntLiteralAccess().getIntValueINTTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule IntLiteral ****************/


/************ begin Rule RealLiteral ****************
 *
 * RealLiteral:
 * 	floatValue=FLOAT;
 *
 **/

// floatValue=FLOAT
protected class RealLiteral_FloatValueAssignment extends AssignmentToken  {
	
	public RealLiteral_FloatValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRealLiteralAccess().getFloatValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRealLiteralRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("floatValue",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("floatValue");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRealLiteralAccess().getFloatValueFLOATTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRealLiteralAccess().getFloatValueFLOATTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule RealLiteral ****************/


/************ begin Rule BooleanLiteral ****************
 *
 * BooleanLiteral:
 * 	{BooleanLiteral} (booleanValue?="true" | "false");
 *
 **/

// {BooleanLiteral} (booleanValue?="true" | "false")
protected class BooleanLiteral_Group extends GroupToken {
	
	public BooleanLiteral_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanLiteral_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {BooleanLiteral}
protected class BooleanLiteral_BooleanLiteralAction_0 extends ActionToken  {

	public BooleanLiteral_BooleanLiteralAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// booleanValue?="true" | "false"
protected class BooleanLiteral_Alternatives_1 extends AlternativesToken {

	public BooleanLiteral_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanLiteral_BooleanValueAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BooleanLiteral_FalseKeyword_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// booleanValue?="true"
protected class BooleanLiteral_BooleanValueAssignment_1_0 extends AssignmentToken  {
	
	public BooleanLiteral_BooleanValueAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getBooleanValueAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanLiteral_BooleanLiteralAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("booleanValue",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("booleanValue");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBooleanLiteralAccess().getBooleanValueTrueKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class BooleanLiteral_FalseKeyword_1_1 extends KeywordToken  {
	
	public BooleanLiteral_FalseKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanLiteral_BooleanLiteralAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule BooleanLiteral ****************/


/************ begin Rule NullLiteral ****************
 *
 * NullLiteral:
 * 	{NullLiteral} "null";
 *
 **/

// {NullLiteral} "null"
protected class NullLiteral_Group extends GroupToken {
	
	public NullLiteral_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullLiteral_NullKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {NullLiteral}
protected class NullLiteral_NullLiteralAction_0 extends ActionToken  {

	public NullLiteral_NullLiteralAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getNullLiteralAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "null"
protected class NullLiteral_NullKeyword_1 extends KeywordToken  {
	
	public NullLiteral_NullKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getNullKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullLiteral_NullLiteralAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule NullLiteral ****************/


/************ begin Rule ClassInstanceCreationExpression ****************
 *
 * ClassInstanceCreationExpression:
 * 	"new" type=Type "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
 *
 **/

// "new" type=Type "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
protected class ClassInstanceCreationExpression_Group extends GroupToken {
	
	public ClassInstanceCreationExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClassInstanceCreationExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassInstanceCreationExpression_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClassInstanceCreationExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "new"
protected class ClassInstanceCreationExpression_NewKeyword_0 extends KeywordToken  {
	
	public ClassInstanceCreationExpression_NewKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClassInstanceCreationExpressionAccess().getNewKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// type=Type
protected class ClassInstanceCreationExpression_TypeAssignment_1 extends AssignmentToken  {
	
	public ClassInstanceCreationExpression_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassInstanceCreationExpressionAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassInstanceCreationExpressionAccess().getTypeTypeParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassInstanceCreationExpression_NewKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "("
protected class ClassInstanceCreationExpression_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public ClassInstanceCreationExpression_LeftParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClassInstanceCreationExpressionAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassInstanceCreationExpression_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (arguments+=Expression ("," arguments+=Expression)*)?
protected class ClassInstanceCreationExpression_Group_3 extends GroupToken {
	
	public ClassInstanceCreationExpression_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClassInstanceCreationExpressionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassInstanceCreationExpression_Group_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ClassInstanceCreationExpression_ArgumentsAssignment_3_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=Expression
protected class ClassInstanceCreationExpression_ArgumentsAssignment_3_0 extends AssignmentToken  {
	
	public ClassInstanceCreationExpression_ArgumentsAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassInstanceCreationExpressionAccess().getArgumentsAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassInstanceCreationExpressionAccess().getArgumentsExpressionParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassInstanceCreationExpression_LeftParenthesisKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," arguments+=Expression)*
protected class ClassInstanceCreationExpression_Group_3_1 extends GroupToken {
	
	public ClassInstanceCreationExpression_Group_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClassInstanceCreationExpressionAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassInstanceCreationExpression_ArgumentsAssignment_3_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ClassInstanceCreationExpression_CommaKeyword_3_1_0 extends KeywordToken  {
	
	public ClassInstanceCreationExpression_CommaKeyword_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClassInstanceCreationExpressionAccess().getCommaKeyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassInstanceCreationExpression_Group_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ClassInstanceCreationExpression_ArgumentsAssignment_3_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=Expression
protected class ClassInstanceCreationExpression_ArgumentsAssignment_3_1_1 extends AssignmentToken  {
	
	public ClassInstanceCreationExpression_ArgumentsAssignment_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassInstanceCreationExpressionAccess().getArgumentsAssignment_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassInstanceCreationExpressionAccess().getArgumentsExpressionParserRuleCall_3_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassInstanceCreationExpression_CommaKeyword_3_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class ClassInstanceCreationExpression_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public ClassInstanceCreationExpression_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClassInstanceCreationExpressionAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassInstanceCreationExpression_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ClassInstanceCreationExpression_LeftParenthesisKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ClassInstanceCreationExpression ****************/


/************ begin Rule RuleInvocation ****************
 *
 * // RuleInvocation
 * RuleInvocation:
 * 	ruleDeclaration=[RuleDeclaration|FQN] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
 *
 **/

// ruleDeclaration=[RuleDeclaration|FQN] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
protected class RuleInvocation_Group extends GroupToken {
	
	public RuleInvocation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleInvocationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleInvocation_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleInvocationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ruleDeclaration=[RuleDeclaration|FQN]
protected class RuleInvocation_RuleDeclarationAssignment_0 extends AssignmentToken  {
	
	public RuleInvocation_RuleDeclarationAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleInvocationAccess().getRuleDeclarationAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ruleDeclaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ruleDeclaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleInvocationAccess().getRuleDeclarationRuleDeclarationCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getRuleInvocationAccess().getRuleDeclarationRuleDeclarationCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "("
protected class RuleInvocation_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public RuleInvocation_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleInvocationAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleInvocation_RuleDeclarationAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (arguments+=Expression ("," arguments+=Expression)*)?
protected class RuleInvocation_Group_2 extends GroupToken {
	
	public RuleInvocation_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleInvocationAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleInvocation_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleInvocation_ArgumentsAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=Expression
protected class RuleInvocation_ArgumentsAssignment_2_0 extends AssignmentToken  {
	
	public RuleInvocation_ArgumentsAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleInvocationAccess().getArgumentsAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleInvocationAccess().getArgumentsExpressionParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleInvocation_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," arguments+=Expression)*
protected class RuleInvocation_Group_2_1 extends GroupToken {
	
	public RuleInvocation_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleInvocationAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleInvocation_ArgumentsAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class RuleInvocation_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public RuleInvocation_CommaKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleInvocationAccess().getCommaKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleInvocation_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleInvocation_ArgumentsAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=Expression
protected class RuleInvocation_ArgumentsAssignment_2_1_1 extends AssignmentToken  {
	
	public RuleInvocation_ArgumentsAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleInvocationAccess().getArgumentsAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleInvocationAccess().getArgumentsExpressionParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleInvocation_CommaKeyword_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class RuleInvocation_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public RuleInvocation_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleInvocationAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleInvocation_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleInvocation_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule RuleInvocation ****************/


/************ begin Rule RuleInvocationSuper ****************
 *
 * RuleInvocationSuper:
 * 	{RuleInvocationSuper} "super";
 *
 **/

// {RuleInvocationSuper} "super"
protected class RuleInvocationSuper_Group extends GroupToken {
	
	public RuleInvocationSuper_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleInvocationSuperAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleInvocationSuper_SuperKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {RuleInvocationSuper}
protected class RuleInvocationSuper_RuleInvocationSuperAction_0 extends ActionToken  {

	public RuleInvocationSuper_RuleInvocationSuperAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "super"
protected class RuleInvocationSuper_SuperKeyword_1 extends KeywordToken  {
	
	public RuleInvocationSuper_SuperKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleInvocationSuperAccess().getSuperKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleInvocationSuper_RuleInvocationSuperAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule RuleInvocationSuper ****************/


/************ begin Rule Feature ****************
 *
 * Feature:
 * 	MethodInvocation | FeatureField;
 *
 **/

// MethodInvocation | FeatureField
protected class Feature_Alternatives extends AlternativesToken {

	public Feature_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFeatureAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_MethodInvocationParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Feature_FeatureFieldParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureFieldRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureMethodInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNativeOperationInvocationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// MethodInvocation
protected class Feature_MethodInvocationParserRuleCall_0 extends RuleCallToken {
	
	public Feature_MethodInvocationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureAccess().getMethodInvocationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodInvocation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureMethodInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNativeOperationInvocationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(MethodInvocation_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FeatureField
protected class Feature_FeatureFieldParserRuleCall_1 extends RuleCallToken {
	
	public Feature_FeatureFieldParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureAccess().getFeatureFieldParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureField_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureFieldRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FeatureField_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Feature ****************/


/************ begin Rule MethodInvocation ****************
 *
 * MethodInvocation:
 * 	FeatureMethodInvocation | NativeOperationInvocation;
 *
 **/

// FeatureMethodInvocation | NativeOperationInvocation
protected class MethodInvocation_Alternatives extends AlternativesToken {

	public MethodInvocation_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMethodInvocationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodInvocation_FeatureMethodInvocationParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MethodInvocation_NativeOperationInvocationParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureMethodInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNativeOperationInvocationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// FeatureMethodInvocation
protected class MethodInvocation_FeatureMethodInvocationParserRuleCall_0 extends RuleCallToken {
	
	public MethodInvocation_FeatureMethodInvocationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMethodInvocationAccess().getFeatureMethodInvocationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMethodInvocation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureMethodInvocationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FeatureMethodInvocation_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NativeOperationInvocation
protected class MethodInvocation_NativeOperationInvocationParserRuleCall_1 extends RuleCallToken {
	
	public MethodInvocation_NativeOperationInvocationParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMethodInvocationAccess().getNativeOperationInvocationParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeOperationInvocation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNativeOperationInvocationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NativeOperationInvocation_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule MethodInvocation ****************/


/************ begin Rule FeatureMethodInvocation ****************
 *
 * FeatureMethodInvocation:
 * 	"." ("<<" expression=Expression ">>" | name=ID) "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
 *
 **/

// "." ("<<" expression=Expression ">>" | name=ID) "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
protected class FeatureMethodInvocation_Group extends GroupToken {
	
	public FeatureMethodInvocation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMethodInvocation_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureMethodInvocationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "."
protected class FeatureMethodInvocation_FullStopKeyword_0 extends KeywordToken  {
	
	public FeatureMethodInvocation_FullStopKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getFullStopKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "<<" expression=Expression ">>" | name=ID
protected class FeatureMethodInvocation_Alternatives_1 extends AlternativesToken {

	public FeatureMethodInvocation_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMethodInvocation_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeatureMethodInvocation_NameAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "<<" expression=Expression ">>"
protected class FeatureMethodInvocation_Group_1_0 extends GroupToken {
	
	public FeatureMethodInvocation_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMethodInvocation_GreaterThanSignGreaterThanSignKeyword_1_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "<<"
protected class FeatureMethodInvocation_LessThanSignLessThanSignKeyword_1_0_0 extends KeywordToken  {
	
	public FeatureMethodInvocation_LessThanSignLessThanSignKeyword_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getLessThanSignLessThanSignKeyword_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMethodInvocation_FullStopKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression
protected class FeatureMethodInvocation_ExpressionAssignment_1_0_1 extends AssignmentToken  {
	
	public FeatureMethodInvocation_ExpressionAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getExpressionAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeatureMethodInvocationAccess().getExpressionExpressionParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FeatureMethodInvocation_LessThanSignLessThanSignKeyword_1_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">>"
protected class FeatureMethodInvocation_GreaterThanSignGreaterThanSignKeyword_1_0_2 extends KeywordToken  {
	
	public FeatureMethodInvocation_GreaterThanSignGreaterThanSignKeyword_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getGreaterThanSignGreaterThanSignKeyword_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMethodInvocation_ExpressionAssignment_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// name=ID
protected class FeatureMethodInvocation_NameAssignment_1_1 extends AssignmentToken  {
	
	public FeatureMethodInvocation_NameAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMethodInvocation_FullStopKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeatureMethodInvocationAccess().getNameIDTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFeatureMethodInvocationAccess().getNameIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// "("
protected class FeatureMethodInvocation_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public FeatureMethodInvocation_LeftParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMethodInvocation_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (arguments+=Expression ("," arguments+=Expression)*)?
protected class FeatureMethodInvocation_Group_3 extends GroupToken {
	
	public FeatureMethodInvocation_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMethodInvocation_Group_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeatureMethodInvocation_ArgumentsAssignment_3_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=Expression
protected class FeatureMethodInvocation_ArgumentsAssignment_3_0 extends AssignmentToken  {
	
	public FeatureMethodInvocation_ArgumentsAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getArgumentsAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeatureMethodInvocationAccess().getArgumentsExpressionParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FeatureMethodInvocation_LeftParenthesisKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," arguments+=Expression)*
protected class FeatureMethodInvocation_Group_3_1 extends GroupToken {
	
	public FeatureMethodInvocation_Group_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMethodInvocation_ArgumentsAssignment_3_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class FeatureMethodInvocation_CommaKeyword_3_1_0 extends KeywordToken  {
	
	public FeatureMethodInvocation_CommaKeyword_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getCommaKeyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMethodInvocation_Group_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeatureMethodInvocation_ArgumentsAssignment_3_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=Expression
protected class FeatureMethodInvocation_ArgumentsAssignment_3_1_1 extends AssignmentToken  {
	
	public FeatureMethodInvocation_ArgumentsAssignment_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getArgumentsAssignment_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeatureMethodInvocationAccess().getArgumentsExpressionParserRuleCall_3_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FeatureMethodInvocation_CommaKeyword_3_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class FeatureMethodInvocation_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public FeatureMethodInvocation_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureMethodInvocationAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMethodInvocation_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeatureMethodInvocation_LeftParenthesisKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule FeatureMethodInvocation ****************/


/************ begin Rule NativeOperationInvocation ****************
 *
 * NativeOperationInvocation:
 * 	"->" name=ID "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
 *
 **/

// "->" name=ID "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
protected class NativeOperationInvocation_Group extends GroupToken {
	
	public NativeOperationInvocation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNativeOperationInvocationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeOperationInvocation_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNativeOperationInvocationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "->"
protected class NativeOperationInvocation_HyphenMinusGreaterThanSignKeyword_0 extends KeywordToken  {
	
	public NativeOperationInvocation_HyphenMinusGreaterThanSignKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNativeOperationInvocationAccess().getHyphenMinusGreaterThanSignKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class NativeOperationInvocation_NameAssignment_1 extends AssignmentToken  {
	
	public NativeOperationInvocation_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNativeOperationInvocationAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeOperationInvocation_HyphenMinusGreaterThanSignKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNativeOperationInvocationAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNativeOperationInvocationAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class NativeOperationInvocation_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public NativeOperationInvocation_LeftParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNativeOperationInvocationAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeOperationInvocation_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (arguments+=Expression ("," arguments+=Expression)*)?
protected class NativeOperationInvocation_Group_3 extends GroupToken {
	
	public NativeOperationInvocation_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNativeOperationInvocationAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeOperationInvocation_Group_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NativeOperationInvocation_ArgumentsAssignment_3_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=Expression
protected class NativeOperationInvocation_ArgumentsAssignment_3_0 extends AssignmentToken  {
	
	public NativeOperationInvocation_ArgumentsAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNativeOperationInvocationAccess().getArgumentsAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNativeOperationInvocationAccess().getArgumentsExpressionParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NativeOperationInvocation_LeftParenthesisKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," arguments+=Expression)*
protected class NativeOperationInvocation_Group_3_1 extends GroupToken {
	
	public NativeOperationInvocation_Group_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNativeOperationInvocationAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeOperationInvocation_ArgumentsAssignment_3_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class NativeOperationInvocation_CommaKeyword_3_1_0 extends KeywordToken  {
	
	public NativeOperationInvocation_CommaKeyword_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNativeOperationInvocationAccess().getCommaKeyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeOperationInvocation_Group_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NativeOperationInvocation_ArgumentsAssignment_3_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=Expression
protected class NativeOperationInvocation_ArgumentsAssignment_3_1_1 extends AssignmentToken  {
	
	public NativeOperationInvocation_ArgumentsAssignment_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNativeOperationInvocationAccess().getArgumentsAssignment_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNativeOperationInvocationAccess().getArgumentsExpressionParserRuleCall_3_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NativeOperationInvocation_CommaKeyword_3_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class NativeOperationInvocation_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public NativeOperationInvocation_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNativeOperationInvocationAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeOperationInvocation_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NativeOperationInvocation_LeftParenthesisKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule NativeOperationInvocation ****************/


/************ begin Rule MetamodelFeature ****************
 *
 * MetamodelFeature:
 * 	FeatureMethodInvocation | FeatureField;
 *
 **/

// FeatureMethodInvocation | FeatureField
protected class MetamodelFeature_Alternatives extends AlternativesToken {

	public MetamodelFeature_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMetamodelFeatureAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MetamodelFeature_FeatureMethodInvocationParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MetamodelFeature_FeatureFieldParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureFieldRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureMethodInvocationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// FeatureMethodInvocation
protected class MetamodelFeature_FeatureMethodInvocationParserRuleCall_0 extends RuleCallToken {
	
	public MetamodelFeature_FeatureMethodInvocationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMetamodelFeatureAccess().getFeatureMethodInvocationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMethodInvocation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureMethodInvocationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FeatureMethodInvocation_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FeatureField
protected class MetamodelFeature_FeatureFieldParserRuleCall_1 extends RuleCallToken {
	
	public MetamodelFeature_FeatureFieldParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMetamodelFeatureAccess().getFeatureFieldParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureField_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureFieldRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FeatureField_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule MetamodelFeature ****************/


/************ begin Rule FeatureField ****************
 *
 * FeatureField:
 * 	"." ("<<" expression=Expression ">>" | name=ID);
 *
 **/

// "." ("<<" expression=Expression ">>" | name=ID)
protected class FeatureField_Group extends GroupToken {
	
	public FeatureField_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureFieldAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureField_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureFieldRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "."
protected class FeatureField_FullStopKeyword_0 extends KeywordToken  {
	
	public FeatureField_FullStopKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureFieldAccess().getFullStopKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "<<" expression=Expression ">>" | name=ID
protected class FeatureField_Alternatives_1 extends AlternativesToken {

	public FeatureField_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFeatureFieldAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureField_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeatureField_NameAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "<<" expression=Expression ">>"
protected class FeatureField_Group_1_0 extends GroupToken {
	
	public FeatureField_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureFieldAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureField_GreaterThanSignGreaterThanSignKeyword_1_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "<<"
protected class FeatureField_LessThanSignLessThanSignKeyword_1_0_0 extends KeywordToken  {
	
	public FeatureField_LessThanSignLessThanSignKeyword_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureFieldAccess().getLessThanSignLessThanSignKeyword_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureField_FullStopKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression
protected class FeatureField_ExpressionAssignment_1_0_1 extends AssignmentToken  {
	
	public FeatureField_ExpressionAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureFieldAccess().getExpressionAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeatureFieldAccess().getExpressionExpressionParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FeatureField_LessThanSignLessThanSignKeyword_1_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">>"
protected class FeatureField_GreaterThanSignGreaterThanSignKeyword_1_0_2 extends KeywordToken  {
	
	public FeatureField_GreaterThanSignGreaterThanSignKeyword_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureFieldAccess().getGreaterThanSignGreaterThanSignKeyword_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureField_ExpressionAssignment_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// name=ID
protected class FeatureField_NameAssignment_1_1 extends AssignmentToken  {
	
	public FeatureField_NameAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureFieldAccess().getNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureField_FullStopKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeatureFieldAccess().getNameIDTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFeatureFieldAccess().getNameIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule FeatureField ****************/


/************ begin Rule VariableAccess ****************
 *
 * VariableAccess:
 * 	prefixOperator=PPOperator variable=[VarDeclaration] features+=Feature* | variable=[VarDeclaration] features+=Feature*
 * 	("default" default=Expression | postfixOperator=PPOperator)?;
 *
 **/

// prefixOperator=PPOperator variable=[VarDeclaration] features+=Feature* | variable=[VarDeclaration] features+=Feature*
// ("default" default=Expression | postfixOperator=PPOperator)?
protected class VariableAccess_Alternatives extends AlternativesToken {

	public VariableAccess_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getVariableAccessAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableAccess_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VariableAccess_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// prefixOperator=PPOperator variable=[VarDeclaration] features+=Feature*
protected class VariableAccess_Group_0 extends GroupToken {
	
	public VariableAccess_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableAccessAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableAccess_FeaturesAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VariableAccess_VariableAssignment_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// prefixOperator=PPOperator
protected class VariableAccess_PrefixOperatorAssignment_0_0 extends AssignmentToken  {
	
	public VariableAccess_PrefixOperatorAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccessAccess().getPrefixOperatorAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("prefixOperator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("prefixOperator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getVariableAccessAccess().getPrefixOperatorPPOperatorEnumRuleCall_0_0_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getVariableAccessAccess().getPrefixOperatorPPOperatorEnumRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// variable=[VarDeclaration]
protected class VariableAccess_VariableAssignment_0_1 extends AssignmentToken  {
	
	public VariableAccess_VariableAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccessAccess().getVariableAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableAccess_PrefixOperatorAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("variable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("variable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableAccessAccess().getVariableVarDeclarationCrossReference_0_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getVariableAccessAccess().getVariableVarDeclarationCrossReference_0_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// features+=Feature*
protected class VariableAccess_FeaturesAssignment_0_2 extends AssignmentToken  {
	
	public VariableAccess_FeaturesAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccessAccess().getFeaturesAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("features",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("features");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVariableAccessAccess().getFeaturesFeatureParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VariableAccess_FeaturesAssignment_0_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new VariableAccess_VariableAssignment_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// variable=[VarDeclaration] features+=Feature* ("default" default=Expression | postfixOperator=PPOperator)?
protected class VariableAccess_Group_1 extends GroupToken {
	
	public VariableAccess_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableAccessAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableAccess_Alternatives_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VariableAccess_FeaturesAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new VariableAccess_VariableAssignment_1_0(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// variable=[VarDeclaration]
protected class VariableAccess_VariableAssignment_1_0 extends AssignmentToken  {
	
	public VariableAccess_VariableAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccessAccess().getVariableAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("variable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("variable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableAccessAccess().getVariableVarDeclarationCrossReference_1_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getVariableAccessAccess().getVariableVarDeclarationCrossReference_1_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// features+=Feature*
protected class VariableAccess_FeaturesAssignment_1_1 extends AssignmentToken  {
	
	public VariableAccess_FeaturesAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccessAccess().getFeaturesAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("features",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("features");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVariableAccessAccess().getFeaturesFeatureParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VariableAccess_FeaturesAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new VariableAccess_VariableAssignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("default" default=Expression | postfixOperator=PPOperator)?
protected class VariableAccess_Alternatives_1_2 extends AlternativesToken {

	public VariableAccess_Alternatives_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getVariableAccessAccess().getAlternatives_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableAccess_Group_1_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VariableAccess_PostfixOperatorAssignment_1_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "default" default=Expression
protected class VariableAccess_Group_1_2_0 extends GroupToken {
	
	public VariableAccess_Group_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableAccessAccess().getGroup_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableAccess_DefaultAssignment_1_2_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "default"
protected class VariableAccess_DefaultKeyword_1_2_0_0 extends KeywordToken  {
	
	public VariableAccess_DefaultKeyword_1_2_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableAccessAccess().getDefaultKeyword_1_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableAccess_FeaturesAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VariableAccess_VariableAssignment_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// default=Expression
protected class VariableAccess_DefaultAssignment_1_2_0_1 extends AssignmentToken  {
	
	public VariableAccess_DefaultAssignment_1_2_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccessAccess().getDefaultAssignment_1_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("default",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("default");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVariableAccessAccess().getDefaultExpressionParserRuleCall_1_2_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VariableAccess_DefaultKeyword_1_2_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// postfixOperator=PPOperator
protected class VariableAccess_PostfixOperatorAssignment_1_2_1 extends AssignmentToken  {
	
	public VariableAccess_PostfixOperatorAssignment_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccessAccess().getPostfixOperatorAssignment_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableAccess_FeaturesAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VariableAccess_VariableAssignment_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("postfixOperator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("postfixOperator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getVariableAccessAccess().getPostfixOperatorPPOperatorEnumRuleCall_1_2_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getVariableAccessAccess().getPostfixOperatorPPOperatorEnumRuleCall_1_2_1_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule VariableAccess ****************/


/************ begin Rule StaticAccess ****************
 *
 * StaticAccess:
 * 	"$" ("<<" expression=Expression ">>" | type=Type) features+=Feature*;
 *
 **/

// "$" ("<<" expression=Expression ">>" | type=Type) features+=Feature*
protected class StaticAccess_Group extends GroupToken {
	
	public StaticAccess_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStaticAccessAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StaticAccess_FeaturesAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StaticAccess_Alternatives_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStaticAccessRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "$"
protected class StaticAccess_DollarSignKeyword_0 extends KeywordToken  {
	
	public StaticAccess_DollarSignKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStaticAccessAccess().getDollarSignKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "<<" expression=Expression ">>" | type=Type
protected class StaticAccess_Alternatives_1 extends AlternativesToken {

	public StaticAccess_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStaticAccessAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StaticAccess_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StaticAccess_TypeAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "<<" expression=Expression ">>"
protected class StaticAccess_Group_1_0 extends GroupToken {
	
	public StaticAccess_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStaticAccessAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StaticAccess_GreaterThanSignGreaterThanSignKeyword_1_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "<<"
protected class StaticAccess_LessThanSignLessThanSignKeyword_1_0_0 extends KeywordToken  {
	
	public StaticAccess_LessThanSignLessThanSignKeyword_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStaticAccessAccess().getLessThanSignLessThanSignKeyword_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StaticAccess_DollarSignKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression
protected class StaticAccess_ExpressionAssignment_1_0_1 extends AssignmentToken  {
	
	public StaticAccess_ExpressionAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStaticAccessAccess().getExpressionAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Expression_10ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStaticAccessAccess().getExpressionExpressionParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StaticAccess_LessThanSignLessThanSignKeyword_1_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">>"
protected class StaticAccess_GreaterThanSignGreaterThanSignKeyword_1_0_2 extends KeywordToken  {
	
	public StaticAccess_GreaterThanSignGreaterThanSignKeyword_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStaticAccessAccess().getGreaterThanSignGreaterThanSignKeyword_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StaticAccess_ExpressionAssignment_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// type=Type
protected class StaticAccess_TypeAssignment_1_1 extends AssignmentToken  {
	
	public StaticAccess_TypeAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStaticAccessAccess().getTypeAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Type_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStaticAccessAccess().getTypeTypeParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StaticAccess_DollarSignKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// features+=Feature*
protected class StaticAccess_FeaturesAssignment_2 extends AssignmentToken  {
	
	public StaticAccess_FeaturesAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStaticAccessAccess().getFeaturesAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("features",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("features");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStaticAccessAccess().getFeaturesFeatureParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StaticAccess_FeaturesAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new StaticAccess_Alternatives_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule StaticAccess ****************/



/************ begin Rule AnnotationsDefinition ****************
 *
 * // -----------------------------------------------------------------------------
 * // Annotations
 * // -----------------------------------------------------------------------------
 * AnnotationsDefinition:
 * 	annotationDecls+=AnnotationDecl+;
 *
 **/

// annotationDecls+=AnnotationDecl+
protected class AnnotationsDefinition_AnnotationDeclsAssignment extends AssignmentToken  {
	
	public AnnotationsDefinition_AnnotationDeclsAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationsDefinitionAccess().getAnnotationDeclsAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("annotationDecls",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("annotationDecls");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnnotationsDefinitionAccess().getAnnotationDeclsAnnotationDeclParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AnnotationsDefinition_AnnotationDeclsAssignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule AnnotationsDefinition ****************/


/************ begin Rule AnnotationDecl ****************
 *
 * / **
 *  * Annotation Declaration
 *  * / AnnotationDecl:
 * 	"annotation" name=ID ("(" targets+=AnnotationTargetSpec ("," targets+=AnnotationTargetSpec)* ")")? "{" (("self"
 * 	valuetype=PrimitiveType many?="*"? (required?="required" | "=" default=Literal) |
 * 	propertyDecls+=AnnotationPropertyDecl) ("," propertyDecls+=AnnotationPropertyDecl)*)? "}";
 *
 **/

// "annotation" name=ID ("(" targets+=AnnotationTargetSpec ("," targets+=AnnotationTargetSpec)* ")")? "{" (("self"
// valuetype=PrimitiveType many?="*"? (required?="required" | "=" default=Literal) |
// propertyDecls+=AnnotationPropertyDecl) ("," propertyDecls+=AnnotationPropertyDecl)*)? "}"
protected class AnnotationDecl_Group extends GroupToken {
	
	public AnnotationDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnnotationDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "annotation"
protected class AnnotationDecl_AnnotationKeyword_0 extends KeywordToken  {
	
	public AnnotationDecl_AnnotationKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getAnnotationKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class AnnotationDecl_NameAssignment_1 extends AssignmentToken  {
	
	public AnnotationDecl_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_AnnotationKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnnotationDeclAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnnotationDeclAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("(" targets+=AnnotationTargetSpec ("," targets+=AnnotationTargetSpec)* ")")?
protected class AnnotationDecl_Group_2 extends GroupToken {
	
	public AnnotationDecl_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_RightParenthesisKeyword_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class AnnotationDecl_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public AnnotationDecl_LeftParenthesisKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getLeftParenthesisKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// targets+=AnnotationTargetSpec
protected class AnnotationDecl_TargetsAssignment_2_1 extends AssignmentToken  {
	
	public AnnotationDecl_TargetsAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getTargetsAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_LeftParenthesisKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("targets",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("targets");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getAnnotationDeclAccess().getTargetsAnnotationTargetSpecEnumRuleCall_2_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getAnnotationDeclAccess().getTargetsAnnotationTargetSpecEnumRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}

// ("," targets+=AnnotationTargetSpec)*
protected class AnnotationDecl_Group_2_2 extends GroupToken {
	
	public AnnotationDecl_Group_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_TargetsAssignment_2_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class AnnotationDecl_CommaKeyword_2_2_0 extends KeywordToken  {
	
	public AnnotationDecl_CommaKeyword_2_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getCommaKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AnnotationDecl_TargetsAssignment_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// targets+=AnnotationTargetSpec
protected class AnnotationDecl_TargetsAssignment_2_2_1 extends AssignmentToken  {
	
	public AnnotationDecl_TargetsAssignment_2_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getTargetsAssignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_CommaKeyword_2_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("targets",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("targets");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getAnnotationDeclAccess().getTargetsAnnotationTargetSpecEnumRuleCall_2_2_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getAnnotationDeclAccess().getTargetsAnnotationTargetSpecEnumRuleCall_2_2_1_0();
			return obj;
		}
		return null;
	}

}


// ")"
protected class AnnotationDecl_RightParenthesisKeyword_2_3 extends KeywordToken  {
	
	public AnnotationDecl_RightParenthesisKeyword_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getRightParenthesisKeyword_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AnnotationDecl_TargetsAssignment_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// "{"
protected class AnnotationDecl_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public AnnotationDecl_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AnnotationDecl_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (("self" valuetype=PrimitiveType many?="*"? (required?="required" | "=" default=Literal) |
// propertyDecls+=AnnotationPropertyDecl) ("," propertyDecls+=AnnotationPropertyDecl)*)?
protected class AnnotationDecl_Group_4 extends GroupToken {
	
	public AnnotationDecl_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_Group_4_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AnnotationDecl_Alternatives_4_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "self" valuetype=PrimitiveType many?="*"? (required?="required" | "=" default=Literal) |
// propertyDecls+=AnnotationPropertyDecl
protected class AnnotationDecl_Alternatives_4_0 extends AlternativesToken {

	public AnnotationDecl_Alternatives_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getAlternatives_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_Group_4_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AnnotationDecl_PropertyDeclsAssignment_4_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "self" valuetype=PrimitiveType many?="*"? (required?="required" | "=" default=Literal)
protected class AnnotationDecl_Group_4_0_0 extends GroupToken {
	
	public AnnotationDecl_Group_4_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getGroup_4_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_Alternatives_4_0_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "self"
protected class AnnotationDecl_SelfKeyword_4_0_0_0 extends KeywordToken  {
	
	public AnnotationDecl_SelfKeyword_4_0_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getSelfKeyword_4_0_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valuetype=PrimitiveType
protected class AnnotationDecl_ValuetypeAssignment_4_0_0_1 extends AssignmentToken  {
	
	public AnnotationDecl_ValuetypeAssignment_4_0_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getValuetypeAssignment_4_0_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimitiveType_PrimitiveTypeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valuetype",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valuetype");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimitiveTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnnotationDeclAccess().getValuetypePrimitiveTypeParserRuleCall_4_0_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AnnotationDecl_SelfKeyword_4_0_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// many?="*"?
protected class AnnotationDecl_ManyAssignment_4_0_0_2 extends AssignmentToken  {
	
	public AnnotationDecl_ManyAssignment_4_0_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getManyAssignment_4_0_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_ValuetypeAssignment_4_0_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("many",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("many");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnnotationDeclAccess().getManyAsteriskKeyword_4_0_0_2_0();
			return obj;
		}
		return null;
	}

}

// required?="required" | "=" default=Literal
protected class AnnotationDecl_Alternatives_4_0_0_3 extends AlternativesToken {

	public AnnotationDecl_Alternatives_4_0_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getAlternatives_4_0_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_RequiredAssignment_4_0_0_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AnnotationDecl_Group_4_0_0_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// required?="required"
protected class AnnotationDecl_RequiredAssignment_4_0_0_3_0 extends AssignmentToken  {
	
	public AnnotationDecl_RequiredAssignment_4_0_0_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getRequiredAssignment_4_0_0_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_ManyAssignment_4_0_0_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AnnotationDecl_ValuetypeAssignment_4_0_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("required",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("required");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnnotationDeclAccess().getRequiredRequiredKeyword_4_0_0_3_0_0();
			return obj;
		}
		return null;
	}

}

// "=" default=Literal
protected class AnnotationDecl_Group_4_0_0_3_1 extends GroupToken {
	
	public AnnotationDecl_Group_4_0_0_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getGroup_4_0_0_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_DefaultAssignment_4_0_0_3_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class AnnotationDecl_EqualsSignKeyword_4_0_0_3_1_0 extends KeywordToken  {
	
	public AnnotationDecl_EqualsSignKeyword_4_0_0_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getEqualsSignKeyword_4_0_0_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_ManyAssignment_4_0_0_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AnnotationDecl_ValuetypeAssignment_4_0_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// default=Literal
protected class AnnotationDecl_DefaultAssignment_4_0_0_3_1_1 extends AssignmentToken  {
	
	public AnnotationDecl_DefaultAssignment_4_0_0_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getDefaultAssignment_4_0_0_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("default",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("default");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnnotationDeclAccess().getDefaultLiteralParserRuleCall_4_0_0_3_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AnnotationDecl_EqualsSignKeyword_4_0_0_3_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




// propertyDecls+=AnnotationPropertyDecl
protected class AnnotationDecl_PropertyDeclsAssignment_4_0_1 extends AssignmentToken  {
	
	public AnnotationDecl_PropertyDeclsAssignment_4_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getPropertyDeclsAssignment_4_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationPropertyDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("propertyDecls",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("propertyDecls");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationPropertyDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnnotationDeclAccess().getPropertyDeclsAnnotationPropertyDeclParserRuleCall_4_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AnnotationDecl_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("," propertyDecls+=AnnotationPropertyDecl)*
protected class AnnotationDecl_Group_4_1 extends GroupToken {
	
	public AnnotationDecl_Group_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getGroup_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_PropertyDeclsAssignment_4_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class AnnotationDecl_CommaKeyword_4_1_0 extends KeywordToken  {
	
	public AnnotationDecl_CommaKeyword_4_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getCommaKeyword_4_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_Group_4_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AnnotationDecl_Alternatives_4_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// propertyDecls+=AnnotationPropertyDecl
protected class AnnotationDecl_PropertyDeclsAssignment_4_1_1 extends AssignmentToken  {
	
	public AnnotationDecl_PropertyDeclsAssignment_4_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getPropertyDeclsAssignment_4_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationPropertyDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("propertyDecls",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("propertyDecls");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationPropertyDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnnotationDeclAccess().getPropertyDeclsAnnotationPropertyDeclParserRuleCall_4_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AnnotationDecl_CommaKeyword_4_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "}"
protected class AnnotationDecl_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public AnnotationDecl_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationDeclAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationDecl_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AnnotationDecl_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule AnnotationDecl ****************/


/************ begin Rule AnnotationPropertyDecl ****************
 *
 * AnnotationPropertyDecl:
 * 	type=PrimitiveType name=ID (required?="required" | "=" default=Literal);
 *
 **/

// type=PrimitiveType name=ID (required?="required" | "=" default=Literal)
protected class AnnotationPropertyDecl_Group extends GroupToken {
	
	public AnnotationPropertyDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationPropertyDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationPropertyDecl_Alternatives_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnnotationPropertyDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// type=PrimitiveType
protected class AnnotationPropertyDecl_TypeAssignment_0 extends AssignmentToken  {
	
	public AnnotationPropertyDecl_TypeAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationPropertyDeclAccess().getTypeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimitiveType_PrimitiveTypeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimitiveTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnnotationPropertyDeclAccess().getTypePrimitiveTypeParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// name=ID
protected class AnnotationPropertyDecl_NameAssignment_1 extends AssignmentToken  {
	
	public AnnotationPropertyDecl_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationPropertyDeclAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationPropertyDecl_TypeAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnnotationPropertyDeclAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnnotationPropertyDeclAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// required?="required" | "=" default=Literal
protected class AnnotationPropertyDecl_Alternatives_2 extends AlternativesToken {

	public AnnotationPropertyDecl_Alternatives_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnnotationPropertyDeclAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationPropertyDecl_RequiredAssignment_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AnnotationPropertyDecl_Group_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// required?="required"
protected class AnnotationPropertyDecl_RequiredAssignment_2_0 extends AssignmentToken  {
	
	public AnnotationPropertyDecl_RequiredAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationPropertyDeclAccess().getRequiredAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationPropertyDecl_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("required",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("required");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnnotationPropertyDeclAccess().getRequiredRequiredKeyword_2_0_0();
			return obj;
		}
		return null;
	}

}

// "=" default=Literal
protected class AnnotationPropertyDecl_Group_2_1 extends GroupToken {
	
	public AnnotationPropertyDecl_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationPropertyDeclAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationPropertyDecl_DefaultAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class AnnotationPropertyDecl_EqualsSignKeyword_2_1_0 extends KeywordToken  {
	
	public AnnotationPropertyDecl_EqualsSignKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationPropertyDeclAccess().getEqualsSignKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationPropertyDecl_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// default=Literal
protected class AnnotationPropertyDecl_DefaultAssignment_2_1_1 extends AssignmentToken  {
	
	public AnnotationPropertyDecl_DefaultAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationPropertyDeclAccess().getDefaultAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("default",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("default");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnnotationPropertyDeclAccess().getDefaultLiteralParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AnnotationPropertyDecl_EqualsSignKeyword_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule AnnotationPropertyDecl ****************/


/************ begin Rule Annotation ****************
 *
 * / **
 *  * Annotation
 *  * / Annotation:
 * 	"@" decl=[AnnotationDecl] ("(" (values+=Literal | properties+=AnnotationProperty) ("," (values+=Literal |
 * 	properties+=AnnotationProperty))* ")")?;
 *
 **/

// "@" decl=[AnnotationDecl] ("(" (values+=Literal | properties+=AnnotationProperty) ("," (values+=Literal |
// properties+=AnnotationProperty))* ")")?
protected class Annotation_Group extends GroupToken {
	
	public Annotation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Annotation_DeclAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnnotationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "@"
protected class Annotation_CommercialAtKeyword_0 extends KeywordToken  {
	
	public Annotation_CommercialAtKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// decl=[AnnotationDecl]
protected class Annotation_DeclAssignment_1 extends AssignmentToken  {
	
	public Annotation_DeclAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getDeclAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_CommercialAtKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("decl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("decl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationAccess().getDeclAnnotationDeclCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getAnnotationAccess().getDeclAnnotationDeclCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("(" (values+=Literal | properties+=AnnotationProperty) ("," (values+=Literal | properties+=AnnotationProperty))* ")")?
protected class Annotation_Group_2 extends GroupToken {
	
	public Annotation_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_RightParenthesisKeyword_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class Annotation_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public Annotation_LeftParenthesisKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_DeclAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// values+=Literal | properties+=AnnotationProperty
protected class Annotation_Alternatives_2_1 extends AlternativesToken {

	public Annotation_Alternatives_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getAlternatives_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_ValuesAssignment_2_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Annotation_PropertiesAssignment_2_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+=Literal
protected class Annotation_ValuesAssignment_2_1_0 extends AssignmentToken  {
	
	public Annotation_ValuesAssignment_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getValuesAssignment_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnnotationAccess().getValuesLiteralParserRuleCall_2_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Annotation_LeftParenthesisKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// properties+=AnnotationProperty
protected class Annotation_PropertiesAssignment_2_1_1 extends AssignmentToken  {
	
	public Annotation_PropertiesAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getPropertiesAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("properties",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnnotationAccess().getPropertiesAnnotationPropertyParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Annotation_LeftParenthesisKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("," (values+=Literal | properties+=AnnotationProperty))*
protected class Annotation_Group_2_2 extends GroupToken {
	
	public Annotation_Group_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_Alternatives_2_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class Annotation_CommaKeyword_2_2_0 extends KeywordToken  {
	
	public Annotation_CommaKeyword_2_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Annotation_Alternatives_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+=Literal | properties+=AnnotationProperty
protected class Annotation_Alternatives_2_2_1 extends AlternativesToken {

	public Annotation_Alternatives_2_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getAlternatives_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_ValuesAssignment_2_2_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Annotation_PropertiesAssignment_2_2_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+=Literal
protected class Annotation_ValuesAssignment_2_2_1_0 extends AssignmentToken  {
	
	public Annotation_ValuesAssignment_2_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getValuesAssignment_2_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnnotationAccess().getValuesLiteralParserRuleCall_2_2_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Annotation_CommaKeyword_2_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// properties+=AnnotationProperty
protected class Annotation_PropertiesAssignment_2_2_1_1 extends AssignmentToken  {
	
	public Annotation_PropertiesAssignment_2_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getPropertiesAssignment_2_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("properties",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnnotationAccess().getPropertiesAnnotationPropertyParserRuleCall_2_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Annotation_CommaKeyword_2_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class Annotation_RightParenthesisKeyword_2_3 extends KeywordToken  {
	
	public Annotation_RightParenthesisKeyword_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Annotation_Alternatives_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule Annotation ****************/


/************ begin Rule AnnotationProperty ****************
 *
 * AnnotationProperty:
 * 	decl=[AnnotationPropertyDecl] "=" value=Literal;
 *
 **/

// decl=[AnnotationPropertyDecl] "=" value=Literal
protected class AnnotationProperty_Group extends GroupToken {
	
	public AnnotationProperty_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationPropertyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationProperty_ValueAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnnotationPropertyRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// decl=[AnnotationPropertyDecl]
protected class AnnotationProperty_DeclAssignment_0 extends AssignmentToken  {
	
	public AnnotationProperty_DeclAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationPropertyAccess().getDeclAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("decl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("decl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationPropertyAccess().getDeclAnnotationPropertyDeclCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getAnnotationPropertyAccess().getDeclAnnotationPropertyDeclCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "="
protected class AnnotationProperty_EqualsSignKeyword_1 extends KeywordToken  {
	
	public AnnotationProperty_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationPropertyAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnotationProperty_DeclAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=Literal
protected class AnnotationProperty_ValueAssignment_2 extends AssignmentToken  {
	
	public AnnotationProperty_ValueAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationPropertyAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnnotationPropertyAccess().getValueLiteralParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AnnotationProperty_EqualsSignKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule AnnotationProperty ****************/

}
