
/*
* generated by Xtext
*/
lexer grammar InternalMitraLexer;


@header {
package de.jevopi.mitra2.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}




KEYWORD_91 : 'Collection';

KEYWORD_92 : 'OrderedSet';

KEYWORD_93 : 'annotation';

KEYWORD_94 : 'excludedBy';

KEYWORD_95 : 'implements';

KEYWORD_96 : 'instanceof';

KEYWORD_88 : 'metamodel';

KEYWORD_89 : 'overrides';

KEYWORD_90 : 'parameter';

KEYWORD_84 : 'Sequence';

KEYWORD_85 : 'abstract';

KEYWORD_86 : 'replaces';

KEYWORD_87 : 'required';

KEYWORD_75 : 'boolean';

KEYWORD_76 : 'confirm';

KEYWORD_77 : 'default';

KEYWORD_78 : 'finally';

KEYWORD_79 : 'package';

KEYWORD_80 : 'private';

KEYWORD_81 : 'stealth';

KEYWORD_82 : 'trigger';

KEYWORD_83 : 'virtual';

KEYWORD_66 : 'String';

KEYWORD_67 : 'called';

KEYWORD_68 : 'create';

KEYWORD_69 : 'import';

KEYWORD_70 : 'manual';

KEYWORD_71 : 'module';

KEYWORD_72 : 'public';

KEYWORD_73 : 'return';

KEYWORD_74 : 'traced';

KEYWORD_59 : 'break';

KEYWORD_60 : 'catch';

KEYWORD_61 : 'false';

KEYWORD_62 : 'multi';

KEYWORD_63 : 'super';

KEYWORD_64 : 'throw';

KEYWORD_65 : 'while';

KEYWORD_45 : 'Type';

KEYWORD_46 : 'auto';

KEYWORD_47 : 'else';

KEYWORD_48 : 'from';

KEYWORD_49 : 'into';

KEYWORD_50 : 'java';

KEYWORD_51 : 'null';

KEYWORD_52 : 'real';

KEYWORD_53 : 'rule';

KEYWORD_54 : 'self';

KEYWORD_55 : 'true';

KEYWORD_56 : 'void';

KEYWORD_57 : 'when';

KEYWORD_58 : 'with';

KEYWORD_37 : 'Bag';

KEYWORD_38 : 'Set';

KEYWORD_39 : 'any';

KEYWORD_40 : 'for';

KEYWORD_41 : 'int';

KEYWORD_42 : 'new';

KEYWORD_43 : 'try';

KEYWORD_44 : 'use';

KEYWORD_21 : '!=';

KEYWORD_22 : '&&';

KEYWORD_23 : '++';

KEYWORD_24 : '+=';

KEYWORD_25 : '--';

KEYWORD_26 : '-=';

KEYWORD_27 : '->';

KEYWORD_28 : '::';

KEYWORD_29 : '<<';

KEYWORD_30 : '<=';

KEYWORD_31 : '==';

KEYWORD_32 : '>=';

KEYWORD_33 : '>>';

KEYWORD_34 : 'do';

KEYWORD_35 : 'if';

KEYWORD_36 : '||';

KEYWORD_1 : '!';

KEYWORD_2 : '$';

KEYWORD_3 : '&';

KEYWORD_4 : '(';

KEYWORD_5 : ')';

KEYWORD_6 : '*';

KEYWORD_7 : '+';

KEYWORD_8 : ',';

KEYWORD_9 : '-';

KEYWORD_10 : '.';

KEYWORD_11 : '/';

KEYWORD_12 : ':';

KEYWORD_13 : ';';

KEYWORD_14 : '<';

KEYWORD_15 : '=';

KEYWORD_16 : '>';

KEYWORD_17 : '@';

KEYWORD_18 : '{';

KEYWORD_19 : '|';

KEYWORD_20 : '}';



RULE_FLOAT : ('0'..'9')* '.' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



