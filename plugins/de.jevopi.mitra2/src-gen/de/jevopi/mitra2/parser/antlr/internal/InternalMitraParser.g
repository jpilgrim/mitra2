/*
* generated by Xtext
*/
parser grammar InternalMitraParser;

options {
	tokenVocab=InternalMitraLexer;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	 memoize=true;
	
	 k=2;
	
}

@header {
package de.jevopi.mitra2.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.jevopi.mitra2.services.MitraGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 

	private MitraGrammarAccess grammarAccess;
	 	
	public InternalMitraParser(TokenStream input, MitraGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Module";	
	} 
	   	   	
	@Override
	protected MitraGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_79
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getPackageKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getPackageNameFQNParserRuleCall_0_1_0()); 
	    }
		lv_packageName_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"packageName",
        		lv_packageName_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=KEYWORD_13
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleAccess().getSemicolonKeyword_0_2());
    }
)?)?
	otherlv_3=KEYWORD_71
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleAccess().getModuleKeyword_1());
    }
(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)
	otherlv_5=KEYWORD_13
    {
    	newLeafNode(otherlv_5, grammarAccess.getModuleAccess().getSemicolonKeyword_3());
    }
(
	otherlv_6=KEYWORD_69
    {
    	newLeafNode(otherlv_6, grammarAccess.getModuleAccess().getImportKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getImportsModuleReferenceParserRuleCall_4_1_0()); 
	    }
		lv_imports_7_0=ruleModuleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_7_0, 
        		"ModuleReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_8=KEYWORD_13
    {
    	newLeafNode(otherlv_8, grammarAccess.getModuleAccess().getSemicolonKeyword_4_2());
    }
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getMetamodelDeclarationsMetamodelDeclarationParserRuleCall_5_0_0()); 
	    }
		lv_metamodelDeclarations_9_0=ruleMetamodelDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"metamodelDeclarations",
        		lv_metamodelDeclarations_9_0, 
        		"MetamodelDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_10=KEYWORD_13
    {
    	newLeafNode(otherlv_10, grammarAccess.getModuleAccess().getSemicolonKeyword_5_1());
    }
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getAnnotationDefinitionsAnnotationsDefinitionParserRuleCall_6_0_0()); 
	    }
		lv_annotationDefinitions_11_0=ruleAnnotationsDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"annotationDefinitions",
        		lv_annotationDefinitions_11_0, 
        		"AnnotationsDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_12=KEYWORD_13
    {
    	newLeafNode(otherlv_12, grammarAccess.getModuleAccess().getSemicolonKeyword_6_1());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getRuleDeclarationsRuleDeclarationParserRuleCall_7_0()); 
	    }
		lv_ruleDeclarations_13_0=ruleRuleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"ruleDeclarations",
        		lv_ruleDeclarations_13_0, 
        		"RuleDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleModuleReference
entryRuleModuleReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getModuleReferenceRule()); }
	 iv_ruleModuleReference=ruleModuleReference 
	 { $current=$iv_ruleModuleReference.current; } 
	 EOF 
;

// Rule ModuleReference
ruleModuleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getModuleReferenceAccess().getModuleModuleCrossReference_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleMetamodelDeclaration
entryRuleMetamodelDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMetamodelDeclarationRule()); }
	 iv_ruleMetamodelDeclaration=ruleMetamodelDeclaration 
	 { $current=$iv_ruleMetamodelDeclaration.current; } 
	 EOF 
;

// Rule MetamodelDeclaration
ruleMetamodelDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_88
    {
    	newLeafNode(otherlv_0, grammarAccess.getMetamodelDeclarationAccess().getMetamodelKeyword_0());
    }
(
(
		lv_type_1_0=RULE_ID
		{
			newLeafNode(lv_type_1_0, grammarAccess.getMetamodelDeclarationAccess().getTypeIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetamodelDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"ID");
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getMetamodelDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetamodelDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(
	otherlv_3=KEYWORD_4
    {
    	newLeafNode(otherlv_3, grammarAccess.getMetamodelDeclarationAccess().getLeftParenthesisKeyword_3_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMetamodelDeclarationAccess().getPropertiesPropertyParserRuleCall_3_1_0_0()); 
	    }
		lv_properties_4_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetamodelDeclarationRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_4_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=KEYWORD_8
    {
    	newLeafNode(otherlv_5, grammarAccess.getMetamodelDeclarationAccess().getCommaKeyword_3_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetamodelDeclarationAccess().getPropertiesPropertyParserRuleCall_3_1_1_1_0()); 
	    }
		lv_properties_6_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetamodelDeclarationRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_6_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_7=KEYWORD_5
    {
    	newLeafNode(otherlv_7, grammarAccess.getMetamodelDeclarationAccess().getRightParenthesisKeyword_3_2());
    }
)?(
	otherlv_8=KEYWORD_86
    {
    	newLeafNode(otherlv_8, grammarAccess.getMetamodelDeclarationAccess().getReplacesKeyword_4_0());
    }
((
(
		lv_replaces_9_0=RULE_ID
		{
			newLeafNode(lv_replaces_9_0, grammarAccess.getMetamodelDeclarationAccess().getReplacesIDTerminalRuleCall_4_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetamodelDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"replaces",
        		lv_replaces_9_0, 
        		"ID");
	    }

)
)(
	otherlv_10=KEYWORD_8
    {
    	newLeafNode(otherlv_10, grammarAccess.getMetamodelDeclarationAccess().getCommaKeyword_4_1_1_0());
    }
(
(
		lv_replaces_11_0=RULE_ID
		{
			newLeafNode(lv_replaces_11_0, grammarAccess.getMetamodelDeclarationAccess().getReplacesIDTerminalRuleCall_4_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetamodelDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"replaces",
        		lv_replaces_11_0, 
        		"ID");
	    }

)
))*))?)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getPropertyAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleRuleDeclaration
entryRuleRuleDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRuleDeclarationRule()); }
	 iv_ruleRuleDeclaration=ruleRuleDeclaration 
	 { $current=$iv_ruleRuleDeclaration.current; } 
	 EOF 
;

// Rule RuleDeclaration
ruleRuleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getVisibilityVisibilityModifierEnumRuleCall_1_0()); 
	    }
		lv_visibility_1_0=ruleVisibilityModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"visibility",
        		lv_visibility_1_0, 
        		"VisibilityModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getExecExecutionModifierEnumRuleCall_2_0()); 
	    }
		lv_exec_2_0=ruleExecutionModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"exec",
        		lv_exec_2_0, 
        		"ExecutionModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_traced_3_0=
	KEYWORD_74
    {
        newLeafNode(lv_traced_3_0, grammarAccess.getRuleDeclarationAccess().getTracedTracedKeyword_3_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDeclarationRule());
	        }
       		setWithLastConsumed($current, "traced", true, "traced");
	    }

)
)
    |(
(
		lv_stealth_4_0=
	KEYWORD_81
    {
        newLeafNode(lv_stealth_4_0, grammarAccess.getRuleDeclarationAccess().getStealthStealthKeyword_3_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDeclarationRule());
	        }
       		setWithLastConsumed($current, "stealth", true, "stealth");
	    }

)
))?(
(
		lv_virtual_5_0=
	KEYWORD_83
    {
        newLeafNode(lv_virtual_5_0, grammarAccess.getRuleDeclarationAccess().getVirtualVirtualKeyword_4_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDeclarationRule());
	        }
       		setWithLastConsumed($current, "virtual", true, "virtual");
	    }

)
)?(
(
		lv_multi_6_0=
	KEYWORD_62
    {
        newLeafNode(lv_multi_6_0, grammarAccess.getRuleDeclarationAccess().getMultiMultiKeyword_5_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDeclarationRule());
	        }
       		setWithLastConsumed($current, "multi", true, "multi");
	    }

)
)?(
(
		lv_name_7_0=RULE_ID
		{
			newLeafNode(lv_name_7_0, grammarAccess.getRuleDeclarationAccess().getNameIDTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"ID");
	    }

)
)
	otherlv_8=KEYWORD_4
    {
    	newLeafNode(otherlv_8, grammarAccess.getRuleDeclarationAccess().getLeftParenthesisKeyword_7());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getFormalParametersFormalParameterParserRuleCall_8_0_0()); 
	    }
		lv_formalParameters_9_0=ruleFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		add(
       			$current, 
       			"formalParameters",
        		lv_formalParameters_9_0, 
        		"FormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_10=KEYWORD_8
    {
    	newLeafNode(otherlv_10, grammarAccess.getRuleDeclarationAccess().getCommaKeyword_8_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getFormalParametersFormalParameterParserRuleCall_8_1_1_0()); 
	    }
		lv_formalParameters_11_0=ruleFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		add(
       			$current, 
       			"formalParameters",
        		lv_formalParameters_11_0, 
        		"FormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_12=KEYWORD_5
    {
    	newLeafNode(otherlv_12, grammarAccess.getRuleDeclarationAccess().getRightParenthesisKeyword_9());
    }
(
	otherlv_13=KEYWORD_12
    {
    	newLeafNode(otherlv_13, grammarAccess.getRuleDeclarationAccess().getColonKeyword_10_0());
    }

	otherlv_14=KEYWORD_4
    {
    	newLeafNode(otherlv_14, grammarAccess.getRuleDeclarationAccess().getLeftParenthesisKeyword_10_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getReturnParametersReturnParameterParserRuleCall_10_2_0()); 
	    }
		lv_returnParameters_15_0=ruleReturnParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		add(
       			$current, 
       			"returnParameters",
        		lv_returnParameters_15_0, 
        		"ReturnParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_16=KEYWORD_8
    {
    	newLeafNode(otherlv_16, grammarAccess.getRuleDeclarationAccess().getCommaKeyword_10_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getReturnParametersReturnParameterParserRuleCall_10_3_1_0()); 
	    }
		lv_returnParameters_17_0=ruleReturnParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		add(
       			$current, 
       			"returnParameters",
        		lv_returnParameters_17_0, 
        		"ReturnParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_18=KEYWORD_5
    {
    	newLeafNode(otherlv_18, grammarAccess.getRuleDeclarationAccess().getRightParenthesisKeyword_10_4());
    }
)?(
	otherlv_19=KEYWORD_95
    {
    	newLeafNode(otherlv_19, grammarAccess.getRuleDeclarationAccess().getImplementsKeyword_11_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getImplementedRulesSimpleRuleReferenceParserRuleCall_11_1_0()); 
	    }
		lv_implementedRules_20_0=ruleSimpleRuleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		add(
       			$current, 
       			"implementedRules",
        		lv_implementedRules_20_0, 
        		"SimpleRuleReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_21=KEYWORD_8
    {
    	newLeafNode(otherlv_21, grammarAccess.getRuleDeclarationAccess().getCommaKeyword_11_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getImplementedRulesSimpleRuleReferenceParserRuleCall_11_2_1_0()); 
	    }
		lv_implementedRules_22_0=ruleSimpleRuleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		add(
       			$current, 
       			"implementedRules",
        		lv_implementedRules_22_0, 
        		"SimpleRuleReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
	otherlv_23=KEYWORD_89
    {
    	newLeafNode(otherlv_23, grammarAccess.getRuleDeclarationAccess().getOverridesKeyword_12_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getOverriddenRuleSimpleRuleReferenceParserRuleCall_12_1_0()); 
	    }
		lv_overriddenRule_24_0=ruleSimpleRuleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"overriddenRule",
        		lv_overriddenRule_24_0, 
        		"SimpleRuleReference");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
	otherlv_25=KEYWORD_94
    {
    	newLeafNode(otherlv_25, grammarAccess.getRuleDeclarationAccess().getExcludedByKeyword_13_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getExcludingRulesSimpleRuleReferenceParserRuleCall_13_1_0()); 
	    }
		lv_excludingRules_26_0=ruleSimpleRuleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		add(
       			$current, 
       			"excludingRules",
        		lv_excludingRules_26_0, 
        		"SimpleRuleReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_27=KEYWORD_8
    {
    	newLeafNode(otherlv_27, grammarAccess.getRuleDeclarationAccess().getCommaKeyword_13_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getExcludingRulesSimpleRuleReferenceParserRuleCall_13_2_1_0()); 
	    }
		lv_excludingRules_28_0=ruleSimpleRuleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		add(
       			$current, 
       			"excludingRules",
        		lv_excludingRules_28_0, 
        		"SimpleRuleReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getTriggerTriggerParserRuleCall_14_0()); 
	    }
		lv_trigger_29_0=ruleTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_29_0, 
        		"Trigger");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
	otherlv_30=KEYWORD_13
    {
    	newLeafNode(otherlv_30, grammarAccess.getRuleDeclarationAccess().getSemicolonKeyword_15_0());
    }

    |((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getJavaSpecJavaSpecParserRuleCall_15_1_0_0()); 
	    }
		lv_javaSpec_31_0=ruleJavaSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"javaSpec",
        		lv_javaSpec_31_0, 
        		"JavaSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_32=KEYWORD_13
    {
    	newLeafNode(otherlv_32, grammarAccess.getRuleDeclarationAccess().getSemicolonKeyword_15_1_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getBodyBlockParserRuleCall_15_2_0()); 
	    }
		lv_body_33_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_33_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;







// Entry rule entryRuleSimpleRuleReference
entryRuleSimpleRuleReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSimpleRuleReferenceRule()); }
	 iv_ruleSimpleRuleReference=ruleSimpleRuleReference 
	 { $current=$iv_ruleSimpleRuleReference.current; } 
	 EOF 
;

// Rule SimpleRuleReference
ruleSimpleRuleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleRuleReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getSimpleRuleReferenceAccess().getRuleDeclarationRuleDeclarationCrossReference_0_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleRuleReferenceAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleRuleReferenceAccess().getParameterReferencesSimpleParameterReferenceParserRuleCall_2_0()); 
	    }
		lv_parameterReferences_2_0=ruleSimpleParameterReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleRuleReferenceRule());
	        }
       		add(
       			$current, 
       			"parameterReferences",
        		lv_parameterReferences_2_0, 
        		"SimpleParameterReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_8
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimpleRuleReferenceAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleRuleReferenceAccess().getParameterReferencesSimpleParameterReferenceParserRuleCall_3_1_0()); 
	    }
		lv_parameterReferences_4_0=ruleSimpleParameterReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleRuleReferenceRule());
	        }
       		add(
       			$current, 
       			"parameterReferences",
        		lv_parameterReferences_4_0, 
        		"SimpleParameterReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=KEYWORD_5
    {
    	newLeafNode(otherlv_5, grammarAccess.getSimpleRuleReferenceAccess().getRightParenthesisKeyword_4());
    }
(
	otherlv_6=KEYWORD_12
    {
    	newLeafNode(otherlv_6, grammarAccess.getSimpleRuleReferenceAccess().getColonKeyword_5_0());
    }

	otherlv_7=KEYWORD_4
    {
    	newLeafNode(otherlv_7, grammarAccess.getSimpleRuleReferenceAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleRuleReferenceAccess().getReturnReferencesSimpleParameterReferenceParserRuleCall_5_2_0()); 
	    }
		lv_returnReferences_8_0=ruleSimpleParameterReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleRuleReferenceRule());
	        }
       		add(
       			$current, 
       			"returnReferences",
        		lv_returnReferences_8_0, 
        		"SimpleParameterReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_9=KEYWORD_8
    {
    	newLeafNode(otherlv_9, grammarAccess.getSimpleRuleReferenceAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleRuleReferenceAccess().getReturnReferencesSimpleParameterReferenceParserRuleCall_5_3_1_0()); 
	    }
		lv_returnReferences_10_0=ruleSimpleParameterReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleRuleReferenceRule());
	        }
       		add(
       			$current, 
       			"returnReferences",
        		lv_returnReferences_10_0, 
        		"SimpleParameterReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_11=KEYWORD_5
    {
    	newLeafNode(otherlv_11, grammarAccess.getSimpleRuleReferenceAccess().getRightParenthesisKeyword_5_4());
    }
)?)
;





// Entry rule entryRuleQualifiedRuleReference
entryRuleQualifiedRuleReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getQualifiedRuleReferenceRule()); }
	 iv_ruleQualifiedRuleReference=ruleQualifiedRuleReference 
	 { $current=$iv_ruleQualifiedRuleReference.current; } 
	 EOF 
;

// Rule QualifiedRuleReference
ruleQualifiedRuleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedRuleReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getQualifiedRuleReferenceAccess().getRuleDeclarationRuleDeclarationCrossReference_0_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getQualifiedRuleReferenceAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedRuleReferenceAccess().getParameterReferencesQualifiedParameterReferenceParserRuleCall_2_0()); 
	    }
		lv_parameterReferences_2_0=ruleQualifiedParameterReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedRuleReferenceRule());
	        }
       		add(
       			$current, 
       			"parameterReferences",
        		lv_parameterReferences_2_0, 
        		"QualifiedParameterReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_8
    {
    	newLeafNode(otherlv_3, grammarAccess.getQualifiedRuleReferenceAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedRuleReferenceAccess().getParameterReferencesQualifiedParameterReferenceParserRuleCall_3_1_0()); 
	    }
		lv_parameterReferences_4_0=ruleQualifiedParameterReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedRuleReferenceRule());
	        }
       		add(
       			$current, 
       			"parameterReferences",
        		lv_parameterReferences_4_0, 
        		"QualifiedParameterReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=KEYWORD_5
    {
    	newLeafNode(otherlv_5, grammarAccess.getQualifiedRuleReferenceAccess().getRightParenthesisKeyword_4());
    }
(
	otherlv_6=KEYWORD_12
    {
    	newLeafNode(otherlv_6, grammarAccess.getQualifiedRuleReferenceAccess().getColonKeyword_5_0());
    }

	otherlv_7=KEYWORD_4
    {
    	newLeafNode(otherlv_7, grammarAccess.getQualifiedRuleReferenceAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedRuleReferenceAccess().getReturnReferencesQualifiedParameterReferenceParserRuleCall_5_2_0()); 
	    }
		lv_returnReferences_8_0=ruleQualifiedParameterReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedRuleReferenceRule());
	        }
       		add(
       			$current, 
       			"returnReferences",
        		lv_returnReferences_8_0, 
        		"QualifiedParameterReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_9=KEYWORD_8
    {
    	newLeafNode(otherlv_9, grammarAccess.getQualifiedRuleReferenceAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedRuleReferenceAccess().getReturnReferencesQualifiedParameterReferenceParserRuleCall_5_3_1_0()); 
	    }
		lv_returnReferences_10_0=ruleQualifiedParameterReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedRuleReferenceRule());
	        }
       		add(
       			$current, 
       			"returnReferences",
        		lv_returnReferences_10_0, 
        		"QualifiedParameterReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_11=KEYWORD_5
    {
    	newLeafNode(otherlv_11, grammarAccess.getQualifiedRuleReferenceAccess().getRightParenthesisKeyword_5_4());
    }
)?)
;







// Entry rule entryRuleSimpleParameterReference
entryRuleSimpleParameterReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSimpleParameterReferenceRule()); }
	 iv_ruleSimpleParameterReference=ruleSimpleParameterReference 
	 { $current=$iv_ruleSimpleParameterReference.current; } 
	 EOF 
;

// Rule SimpleParameterReference
ruleSimpleParameterReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleParameterReferenceAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleParameterReferenceRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSimpleParameterReferenceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleParameterReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?)
;





// Entry rule entryRuleQualifiedParameterReference
entryRuleQualifiedParameterReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getQualifiedParameterReferenceRule()); }
	 iv_ruleQualifiedParameterReference=ruleQualifiedParameterReference 
	 { $current=$iv_ruleQualifiedParameterReference.current; } 
	 EOF 
;

// Rule QualifiedParameterReference
ruleQualifiedParameterReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedParameterReferenceAccess().getVardeclTypedVarDeclarationParserRuleCall_0()); 
	    }
		lv_vardecl_0_0=ruleTypedVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedParameterReferenceRule());
	        }
       		set(
       			$current, 
       			"vardecl",
        		lv_vardecl_0_0, 
        		"TypedVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTrigger
entryRuleTrigger returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTriggerRule()); }
	 iv_ruleTrigger=ruleTrigger 
	 { $current=$iv_ruleTrigger.current; } 
	 EOF 
;

// Rule Trigger
ruleTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_82
    {
    	newLeafNode(otherlv_0, grammarAccess.getTriggerAccess().getTriggerKeyword_0());
    }

	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getTriggerAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getTriggerRulesQualifiedRuleReferenceParserRuleCall_2_0()); 
	    }
		lv_triggerRules_2_0=ruleQualifiedRuleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		add(
       			$current, 
       			"triggerRules",
        		lv_triggerRules_2_0, 
        		"QualifiedRuleReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_8
    {
    	newLeafNode(otherlv_3, grammarAccess.getTriggerAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getTriggerRulesQualifiedRuleReferenceParserRuleCall_3_1_0()); 
	    }
		lv_triggerRules_4_0=ruleQualifiedRuleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		add(
       			$current, 
       			"triggerRules",
        		lv_triggerRules_4_0, 
        		"QualifiedRuleReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=KEYWORD_5
    {
    	newLeafNode(otherlv_5, grammarAccess.getTriggerAccess().getRightParenthesisKeyword_4());
    }
(
	otherlv_6=KEYWORD_58
    {
    	newLeafNode(otherlv_6, grammarAccess.getTriggerAccess().getWithKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getWithBlockParserRuleCall_5_1_0()); 
	    }
		lv_with_7_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		set(
       			$current, 
       			"with",
        		lv_with_7_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
	otherlv_8=KEYWORD_57
    {
    	newLeafNode(otherlv_8, grammarAccess.getTriggerAccess().getWhenKeyword_6_0());
    }

	otherlv_9=KEYWORD_4
    {
    	newLeafNode(otherlv_9, grammarAccess.getTriggerAccess().getLeftParenthesisKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getWhenExpressionParserRuleCall_6_2_0()); 
	    }
		lv_when_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		set(
       			$current, 
       			"when",
        		lv_when_10_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_11=KEYWORD_5
    {
    	newLeafNode(otherlv_11, grammarAccess.getTriggerAccess().getRightParenthesisKeyword_6_3());
    }
)?)
;





// Entry rule entryRuleJavaSpec
entryRuleJavaSpec returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJavaSpecRule()); }
	 iv_ruleJavaSpec=ruleJavaSpec 
	 { $current=$iv_ruleJavaSpec.current; } 
	 EOF 
;

// Rule JavaSpec
ruleJavaSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_50
    {
    	newLeafNode(otherlv_0, grammarAccess.getJavaSpecAccess().getJavaKeyword_0());
    }

	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getJavaSpecAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaSpecAccess().getPropertiesPropertyParserRuleCall_2_0()); 
	    }
		lv_properties_2_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaSpecRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_2_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_8
    {
    	newLeafNode(otherlv_3, grammarAccess.getJavaSpecAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaSpecAccess().getPropertiesPropertyParserRuleCall_3_1_0()); 
	    }
		lv_properties_4_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaSpecRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_4_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=KEYWORD_5
    {
    	newLeafNode(otherlv_5, grammarAccess.getJavaSpecAccess().getRightParenthesisKeyword_4());
    }
)
;







// Entry rule entryRuleFormalParameter
entryRuleFormalParameter returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFormalParameterRule()); }
	 iv_ruleFormalParameter=ruleFormalParameter 
	 { $current=$iv_ruleFormalParameter.current; } 
	 EOF 
;

// Rule FormalParameter
ruleFormalParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParameterAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParameterRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParameterAccess().getModifierFormalParameterModifierEnumRuleCall_1_0()); 
	    }
		lv_modifier_1_0=ruleFormalParameterModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParameterRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_1_0, 
        		"FormalParameterModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParameterAccess().getVardeclTypedVarDeclarationParserRuleCall_2_0()); 
	    }
		lv_vardecl_2_0=ruleTypedVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParameterRule());
	        }
       		set(
       			$current, 
       			"vardecl",
        		lv_vardecl_2_0, 
        		"TypedVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReturnParameter
entryRuleReturnParameter returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReturnParameterRule()); }
	 iv_ruleReturnParameter=ruleReturnParameter 
	 { $current=$iv_ruleReturnParameter.current; } 
	 EOF 
;

// Rule ReturnParameter
ruleReturnParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getReturnParameterAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnParameterRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnParameterAccess().getModifierReturnParameterModifierEnumRuleCall_1_0()); 
	    }
		lv_modifier_1_0=ruleReturnParameterModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnParameterRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_1_0, 
        		"ReturnParameterModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnParameterAccess().getVardeclTypedVarDeclarationParserRuleCall_2_0()); 
	    }
		lv_vardecl_2_0=ruleTypedVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnParameterRule());
	        }
       		set(
       			$current, 
       			"vardecl",
        		lv_vardecl_2_0, 
        		"TypedVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0()); 
    }
    this_PrimitiveType_0=rulePrimitiveType
    {
        $current = $this_PrimitiveType_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getCollectionTypeParserRuleCall_1()); 
    }
    this_CollectionType_1=ruleCollectionType
    {
        $current = $this_CollectionType_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getReferenceTypeParserRuleCall_2()); 
    }
    this_ReferenceType_2=ruleReferenceType
    {
        $current = $this_ReferenceType_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReferenceType
entryRuleReferenceType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReferenceTypeRule()); }
	 iv_ruleReferenceType=ruleReferenceType 
	 { $current=$iv_ruleReferenceType.current; } 
	 EOF 
;

// Rule ReferenceType
ruleReferenceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getReferenceTypeAccess().getMetamodelDeclarationMetamodelDeclarationCrossReference_0_0()); 
	}

)
)
	otherlv_1=KEYWORD_28
    {
    	newLeafNode(otherlv_1, grammarAccess.getReferenceTypeAccess().getColonColonKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceTypeRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getReferenceTypeAccess().getEClassifierEClassifierCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); }
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current; } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getPrimitiveTypePrimitiveTypeSpecEnumRuleCall_0()); 
	    }
		lv_primitiveType_0_0=rulePrimitiveTypeSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveTypeRule());
	        }
       		set(
       			$current, 
       			"primitiveType",
        		lv_primitiveType_0_0, 
        		"PrimitiveTypeSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleCollectionType
entryRuleCollectionType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCollectionTypeRule()); }
	 iv_ruleCollectionType=ruleCollectionType 
	 { $current=$iv_ruleCollectionType.current; } 
	 EOF 
;

// Rule CollectionType
ruleCollectionType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionTypeAccess().getCollectionTypeCollectionTypeSpecEnumRuleCall_0_0()); 
	    }
		lv_collectionType_0_0=ruleCollectionTypeSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionTypeRule());
	        }
       		set(
       			$current, 
       			"collectionType",
        		lv_collectionType_0_0, 
        		"CollectionTypeSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getCollectionTypeAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionTypeAccess().getTypeParTypeParserRuleCall_1_1_0()); 
	    }
		lv_typePar_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionTypeRule());
	        }
       		set(
       			$current, 
       			"typePar",
        		lv_typePar_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_5
    {
    	newLeafNode(otherlv_3, grammarAccess.getCollectionTypeAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_18
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementsBlockStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleBlockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"BlockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_3=KEYWORD_20
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleBlockStatement
entryRuleBlockStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBlockStatementRule()); }
	 iv_ruleBlockStatement=ruleBlockStatement 
	 { $current=$iv_ruleBlockStatement.current; } 
	 EOF 
;

// Rule BlockStatement
ruleBlockStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockStatementAccess().getLocalVariableDeclarationStatementParserRuleCall_0()); 
    }
    this_LocalVariableDeclarationStatement_0=ruleLocalVariableDeclarationStatement
    {
        $current = $this_LocalVariableDeclarationStatement_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockStatementAccess().getStatementParserRuleCall_1()); 
    }
    this_Statement_1=ruleStatement
    {
        $current = $this_Statement_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0()); 
    }
    this_IfStatement_0=ruleIfStatement
    {
        $current = $this_IfStatement_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_1()); 
    }
    this_ReturnStatement_1=ruleReturnStatement
    {
        $current = $this_ReturnStatement_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_2()); 
    }
    this_WhileStatement_2=ruleWhileStatement
    {
        $current = $this_WhileStatement_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDoStatementParserRuleCall_3()); 
    }
    this_DoStatement_3=ruleDoStatement
    {
        $current = $this_DoStatement_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_4()); 
    }
    this_ForStatement_4=ruleForStatement
    {
        $current = $this_ForStatement_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_5()); 
    }
    this_BreakStatement_5=ruleBreakStatement
    {
        $current = $this_BreakStatement_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getThrowStatementParserRuleCall_6()); 
    }
    this_ThrowStatement_6=ruleThrowStatement
    {
        $current = $this_ThrowStatement_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getTryStatementParserRuleCall_7()); 
    }
    this_TryStatement_7=ruleTryStatement
    {
        $current = $this_TryStatement_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_8()); 
    }
    this_ExpressionStatement_8=ruleExpressionStatement
    {
        $current = $this_ExpressionStatement_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getEmptyStatementParserRuleCall_9()); 
    }
    this_EmptyStatement_9=ruleEmptyStatement
    {
        $current = $this_EmptyStatement_9.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_10()); 
    }
    this_Block_10=ruleBlock
    {
        $current = $this_Block_10.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLocalVariableDeclarationStatement
entryRuleLocalVariableDeclarationStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLocalVariableDeclarationStatementRule()); }
	 iv_ruleLocalVariableDeclarationStatement=ruleLocalVariableDeclarationStatement 
	 { $current=$iv_ruleLocalVariableDeclarationStatement.current; } 
	 EOF 
;

// Rule LocalVariableDeclarationStatement
ruleLocalVariableDeclarationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationStatementAccess().getLocalVariableDeclarationLocalVariableDeclarationParserRuleCall_0_0()); 
	    }
		lv_localVariableDeclaration_0_0=ruleLocalVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableDeclarationStatementRule());
	        }
       		set(
       			$current, 
       			"localVariableDeclaration",
        		lv_localVariableDeclaration_0_0, 
        		"LocalVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_13
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocalVariableDeclarationStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleLocalVariableDeclaration
entryRuleLocalVariableDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLocalVariableDeclarationRule()); }
	 iv_ruleLocalVariableDeclaration=ruleLocalVariableDeclaration 
	 { $current=$iv_ruleLocalVariableDeclaration.current; } 
	 EOF 
;

// Rule LocalVariableDeclaration
ruleLocalVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getVardeclTypedVarDeclarationParserRuleCall_0_0()); 
	    }
		lv_vardecl_0_0=ruleTypedVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"vardecl",
        		lv_vardecl_0_0, 
        		"TypedVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocalVariableDeclarationAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getExpressionExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	 iv_ruleVarDeclaration=ruleVarDeclaration 
	 { $current=$iv_ruleVarDeclaration.current; } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVarDeclarationAccess().getTypedVarDeclarationParserRuleCall_0()); 
    }
    this_TypedVarDeclaration_0=ruleTypedVarDeclaration
    {
        $current = $this_TypedVarDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVarDeclarationAccess().getInferredVarDeclarationParserRuleCall_1()); 
    }
    this_InferredVarDeclaration_1=ruleInferredVarDeclaration
    {
        $current = $this_InferredVarDeclaration_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypedVarDeclaration
entryRuleTypedVarDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTypedVarDeclarationRule()); }
	 iv_ruleTypedVarDeclaration=ruleTypedVarDeclaration 
	 { $current=$iv_ruleTypedVarDeclaration.current; } 
	 EOF 
;

// Rule TypedVarDeclaration
ruleTypedVarDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypedVarDeclarationAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedVarDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypedVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypedVarDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleInferredVarDeclaration
entryRuleInferredVarDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInferredVarDeclarationRule()); }
	 iv_ruleInferredVarDeclaration=ruleInferredVarDeclaration 
	 { $current=$iv_ruleInferredVarDeclaration.current; } 
	 EOF 
;

// Rule InferredVarDeclaration
ruleInferredVarDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInferredVarDeclarationAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInferredVarDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInferredVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInferredVarDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionStatementRule()); }
	 iv_ruleExpressionStatement=ruleExpressionStatement 
	 { $current=$iv_ruleExpressionStatement.current; } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionStatementAccess().getStatementExpressionStatementExpressionParserRuleCall_0_0()); 
	    }
		lv_statementExpression_0_0=ruleStatementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
	        }
       		set(
       			$current, 
       			"statementExpression",
        		lv_statementExpression_0_0, 
        		"StatementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_13
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleStatementExpression
entryRuleStatementExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStatementExpressionRule()); }
	 iv_ruleStatementExpression=ruleStatementExpression 
	 { $current=$iv_ruleStatementExpression.current; } 
	 EOF 
;

// Rule StatementExpression
ruleStatementExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementExpressionAccess().getClassInstanceCreationExpressionParserRuleCall_0()); 
    }
    this_ClassInstanceCreationExpression_0=ruleClassInstanceCreationExpression
    {
        $current = $this_ClassInstanceCreationExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementExpressionAccess().getRuleInvocationParserRuleCall_1()); 
    }
    this_RuleInvocation_1=ruleRuleInvocation
    {
        $current = $this_RuleInvocation_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementExpressionAccess().getRuleInvocationSuperParserRuleCall_2()); 
    }
    this_RuleInvocationSuper_2=ruleRuleInvocationSuper
    {
        $current = $this_RuleInvocationSuper_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementExpressionAccess().getStaticAccessParserRuleCall_3()); 
    }
    this_StaticAccess_3=ruleStaticAccess
    {
        $current = $this_StaticAccess_3.current;
        afterParserOrEnumRuleCall();
    }

    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementExpressionAccess().getVariableAccessParserRuleCall_4_0()); 
    }
    this_VariableAccess_4=ruleVariableAccess
    {
        $current = $this_VariableAccess_4.current;
        afterParserOrEnumRuleCall();
    }
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getStatementExpressionAccess().getAssignmentLhsAction_4_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementExpressionAccess().getOperatorAssignmentOperatorEnumRuleCall_4_1_0_1_0()); 
	    }
		lv_operator_6_0=ruleAssignmentOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_6_0, 
        		"AssignmentOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementExpressionAccess().getExpressionExpressionParserRuleCall_4_1_0_2_0()); 
	    }
		lv_expression_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getStatementExpressionAccess().getAssignmentLhsAction_4_1_1_0(),
            $current);
    }
)(
	otherlv_9=KEYWORD_8
    {
    	newLeafNode(otherlv_9, grammarAccess.getStatementExpressionAccess().getCommaKeyword_4_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementExpressionAccess().getLhsVariableAccessParserRuleCall_4_1_1_1_1_0()); 
	    }
		lv_lhs_10_0=ruleVariableAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementExpressionRule());
	        }
       		add(
       			$current, 
       			"lhs",
        		lv_lhs_10_0, 
        		"VariableAccess");
	        afterParserOrEnumRuleCall();
	    }

)
))+(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementExpressionAccess().getOperatorAssignmentOperatorEnumRuleCall_4_1_1_2_0()); 
	    }
		lv_operator_11_0=ruleAssignmentOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_11_0, 
        		"AssignmentOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementExpressionAccess().getExpressionExpressionParserRuleCall_4_1_1_3_0()); 
	    }
		lv_expression_12_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_12_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))?))
;





// Entry rule entryRuleEmptyStatement
entryRuleEmptyStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEmptyStatementRule()); }
	 iv_ruleEmptyStatement=ruleEmptyStatement 
	 { $current=$iv_ruleEmptyStatement.current; } 
	 EOF 
;

// Rule EmptyStatement
ruleEmptyStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_13
    {
    	newLeafNode(otherlv_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_73
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_3=KEYWORD_13
    {
    	newLeafNode(otherlv_3, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_35
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }

	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_5
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getTrueStatementStatementParserRuleCall_4_0()); 
	    }
		lv_trueStatement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"trueStatement",
        		lv_trueStatement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=KEYWORD_47
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseStatementStatementParserRuleCall_5_1_0()); 
	    }
		lv_elseStatement_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseStatement",
        		lv_elseStatement_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_65
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
    }

	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_5
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0()); 
	    }
		lv_statement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDoStatement
entryRuleDoStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDoStatementRule()); }
	 iv_ruleDoStatement=ruleDoStatement 
	 { $current=$iv_ruleDoStatement.current; } 
	 EOF 
;

// Rule DoStatement
ruleDoStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_34
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0()); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_65
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
    }

	otherlv_3=KEYWORD_4
    {
    	newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=KEYWORD_5
    {
    	newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
    }

	otherlv_6=KEYWORD_13
    {
    	newLeafNode(otherlv_6, grammarAccess.getDoStatementAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleForInit
entryRuleForInit returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getForInitRule()); }
	 iv_ruleForInit=ruleForInit 
	 { $current=$iv_ruleForInit.current; } 
	 EOF 
;

// Rule ForInit
ruleForInit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getForInitAccess().getForInitAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getForInitAccess().getStatementExpressionsStatementExpressionParserRuleCall_1_0_0()); 
	    }
		lv_statementExpressions_1_0=ruleStatementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInitRule());
	        }
       		add(
       			$current, 
       			"statementExpressions",
        		lv_statementExpressions_1_0, 
        		"StatementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getForInitAccess().getVarDeclarationsLocalVariableDeclarationParserRuleCall_1_1_0_0()); 
	    }
		lv_varDeclarations_2_0=ruleLocalVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInitRule());
	        }
       		add(
       			$current, 
       			"varDeclarations",
        		lv_varDeclarations_2_0, 
        		"LocalVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)((
	otherlv_3=KEYWORD_8
    {
    	newLeafNode(otherlv_3, grammarAccess.getForInitAccess().getCommaKeyword_1_1_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForInitAccess().getStatementExpressionsStatementExpressionParserRuleCall_1_1_1_0_1_0()); 
	    }
		lv_statementExpressions_4_0=ruleStatementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInitRule());
	        }
       		add(
       			$current, 
       			"statementExpressions",
        		lv_statementExpressions_4_0, 
        		"StatementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getForInitAccess().getVarDeclarationsLocalVariableDeclarationParserRuleCall_1_1_1_1_0()); 
	    }
		lv_varDeclarations_5_0=ruleLocalVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInitRule());
	        }
       		add(
       			$current, 
       			"varDeclarations",
        		lv_varDeclarations_5_0, 
        		"LocalVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?)
;





// Entry rule entryRuleForUpdate
entryRuleForUpdate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getForUpdateRule()); }
	 iv_ruleForUpdate=ruleForUpdate 
	 { $current=$iv_ruleForUpdate.current; } 
	 EOF 
;

// Rule ForUpdate
ruleForUpdate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getForUpdateAccess().getStatementExpressionStatementExpressionParserRuleCall_0_0()); 
	    }
		lv_statementExpression_0_0=ruleStatementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForUpdateRule());
	        }
       		add(
       			$current, 
       			"statementExpression",
        		lv_statementExpression_0_0, 
        		"StatementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=KEYWORD_8
    {
    	newLeafNode(otherlv_1, grammarAccess.getForUpdateAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForUpdateAccess().getStatementExpressionStatementExpressionParserRuleCall_1_1_0()); 
	    }
		lv_statementExpression_2_0=ruleStatementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForUpdateRule());
	        }
       		add(
       			$current, 
       			"statementExpression",
        		lv_statementExpression_2_0, 
        		"StatementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	 iv_ruleForStatement=ruleForStatement 
	 { $current=$iv_ruleForStatement.current; } 
	 EOF 
;

// Rule ForStatement
ruleForStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_40
    {
    	newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
    }

	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getLoopVariableLoopVariableParserRuleCall_2_0_0_0()); 
	    }
		lv_loopVariable_2_0=ruleLoopVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"loopVariable",
        		lv_loopVariable_2_0, 
        		"LoopVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_12
    {
    	newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getColonKeyword_2_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_2_0_2_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getForInitForInitParserRuleCall_2_1_0_0()); 
	    }
		lv_forInit_5_0=ruleForInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"forInit",
        		lv_forInit_5_0, 
        		"ForInit");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_6=KEYWORD_13
    {
    	newLeafNode(otherlv_6, grammarAccess.getForStatementAccess().getSemicolonKeyword_2_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_2_1_2_0()); 
	    }
		lv_expression_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_8=KEYWORD_13
    {
    	newLeafNode(otherlv_8, grammarAccess.getForStatementAccess().getSemicolonKeyword_2_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getForUpdateForUpdateParserRuleCall_2_1_4_0()); 
	    }
		lv_forUpdate_9_0=ruleForUpdate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"forUpdate",
        		lv_forUpdate_9_0, 
        		"ForUpdate");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
	otherlv_10=KEYWORD_5
    {
    	newLeafNode(otherlv_10, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_4_0()); 
	    }
		lv_statement_11_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_11_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLoopVariable
entryRuleLoopVariable returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLoopVariableRule()); }
	 iv_ruleLoopVariable=ruleLoopVariable 
	 { $current=$iv_ruleLoopVariable.current; } 
	 EOF 
;

// Rule LoopVariable
ruleLoopVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopVariableAccess().getVardeclVarDeclarationParserRuleCall_0()); 
	    }
		lv_vardecl_0_0=ruleVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopVariableRule());
	        }
       		set(
       			$current, 
       			"vardecl",
        		lv_vardecl_0_0, 
        		"VarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBreakStatementRule()); }
	 iv_ruleBreakStatement=ruleBreakStatement 
	 { $current=$iv_ruleBreakStatement.current; } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_59
    {
    	newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
    }

	otherlv_2=KEYWORD_13
    {
    	newLeafNode(otherlv_2, grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleThrowStatement
entryRuleThrowStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getThrowStatementRule()); }
	 iv_ruleThrowStatement=ruleThrowStatement 
	 { $current=$iv_ruleThrowStatement.current; } 
	 EOF 
;

// Rule ThrowStatement
ruleThrowStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_64
    {
    	newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getThrowStatementAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThrowStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_13
    {
    	newLeafNode(otherlv_2, grammarAccess.getThrowStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleTryStatement
entryRuleTryStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTryStatementRule()); }
	 iv_ruleTryStatement=ruleTryStatement 
	 { $current=$iv_ruleTryStatement.current; } 
	 EOF 
;

// Rule TryStatement
ruleTryStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_43
    {
    	newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getTryBlockBlockParserRuleCall_1_0()); 
	    }
		lv_tryBlock_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		set(
       			$current, 
       			"tryBlock",
        		lv_tryBlock_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getCatchesCatchParserRuleCall_2_0()); 
	    }
		lv_catches_2_0=ruleCatch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		add(
       			$current, 
       			"catches",
        		lv_catches_2_0, 
        		"Catch");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
	otherlv_3=KEYWORD_78
    {
    	newLeafNode(otherlv_3, grammarAccess.getTryStatementAccess().getFinallyKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyBlockBlockParserRuleCall_3_1_0()); 
	    }
		lv_finallyBlock_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		set(
       			$current, 
       			"finallyBlock",
        		lv_finallyBlock_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCatch
entryRuleCatch returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCatchRule()); }
	 iv_ruleCatch=ruleCatch 
	 { $current=$iv_ruleCatch.current; } 
	 EOF 
;

// Rule Catch
ruleCatch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_60
    {
    	newLeafNode(otherlv_0, grammarAccess.getCatchAccess().getCatchKeyword_0());
    }

	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getCatchAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCatchAccess().getFormalParameterFormalParameterParserRuleCall_2_0()); 
	    }
		lv_formalParameter_2_0=ruleFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCatchRule());
	        }
       		set(
       			$current, 
       			"formalParameter",
        		lv_formalParameter_2_0, 
        		"FormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_5
    {
    	newLeafNode(otherlv_3, grammarAccess.getCatchAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCatchAccess().getBlockBlockParserRuleCall_4_0()); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCatchRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression_10ParserRuleCall()); 
    }
    this_Expression_10_0=ruleExpression_10
    {
        $current = $this_Expression_10_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleExpression_10
entryRuleExpression_10 returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpression_10Rule()); }
	 iv_ruleExpression_10=ruleExpression_10 
	 { $current=$iv_ruleExpression_10.current; } 
	 EOF 
;

// Rule Expression_10
ruleExpression_10 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_10Access().getIteratorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_10Access().getVariableLoopVariableParserRuleCall_0_1_0()); 
	    }
		lv_variable_1_0=ruleLoopVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_10Rule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"LoopVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_19
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpression_10Access().getVerticalLineKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_10Access().getExpressionExpression_1ParserRuleCall_0_3_0()); 
	    }
		lv_expression_3_0=ruleExpression_1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_10Rule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression_1");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_10Access().getExpression_1ParserRuleCall_1()); 
    }
    this_Expression_1_4=ruleExpression_1
    {
        $current = $this_Expression_1_4.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpression_1
entryRuleExpression_1 returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpression_1Rule()); }
	 iv_ruleExpression_1=ruleExpression_1 
	 { $current=$iv_ruleExpression_1.current; } 
	 EOF 
;

// Rule Expression_1
ruleExpression_1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_1Access().getExpression_2ParserRuleCall_0()); 
    }
    this_Expression_2_0=ruleExpression_2
    {
        $current = $this_Expression_2_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_1Access().getBooleanExpressionLhsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_1Access().getOpBooleanOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleBooleanOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_1Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"BooleanOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_1Access().getRhsExpression_2ParserRuleCall_1_2_0()); 
	    }
		lv_rhs_3_0=ruleExpression_2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_1Rule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_3_0, 
        		"Expression_2");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpression_2
entryRuleExpression_2 returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpression_2Rule()); }
	 iv_ruleExpression_2=ruleExpression_2 
	 { $current=$iv_ruleExpression_2.current; } 
	 EOF 
;

// Rule Expression_2
ruleExpression_2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_2Access().getExpression_3ParserRuleCall_0()); 
    }
    this_Expression_3_0=ruleExpression_3
    {
        $current = $this_Expression_3_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_2Access().getEqualityExpressionLhsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_2Access().getOpEqualityOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleEqualityOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_2Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"EqualityOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_2Access().getRhsExpression_3ParserRuleCall_1_2_0()); 
	    }
		lv_rhs_3_0=ruleExpression_3		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_2Rule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_3_0, 
        		"Expression_3");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpression_3
entryRuleExpression_3 returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpression_3Rule()); }
	 iv_ruleExpression_3=ruleExpression_3 
	 { $current=$iv_ruleExpression_3.current; } 
	 EOF 
;

// Rule Expression_3
ruleExpression_3 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_3Access().getExpression_5ParserRuleCall_0()); 
    }
    this_Expression_5_0=ruleExpression_5
    {
        $current = $this_Expression_5_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_3Access().getRelationalExpressionLhsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_3Access().getOpRelationalOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_3Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_3Access().getRhsExpression_5ParserRuleCall_1_2_0()); 
	    }
		lv_rhs_3_0=ruleExpression_5		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_3Rule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_3_0, 
        		"Expression_5");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpression_5
entryRuleExpression_5 returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpression_5Rule()); }
	 iv_ruleExpression_5=ruleExpression_5 
	 { $current=$iv_ruleExpression_5.current; } 
	 EOF 
;

// Rule Expression_5
ruleExpression_5 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_5Access().getExpression_6ParserRuleCall_0()); 
    }
    this_Expression_6_0=ruleExpression_6
    {
        $current = $this_Expression_6_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_5Access().getMathExpressionLhsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_5Access().getOpMathOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleMathOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_5Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"MathOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_5Access().getRhsExpression_6ParserRuleCall_1_2_0()); 
	    }
		lv_rhs_3_0=ruleExpression_6		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_5Rule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_3_0, 
        		"Expression_6");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpression_6
entryRuleExpression_6 returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpression_6Rule()); }
	 iv_ruleExpression_6=ruleExpression_6 
	 { $current=$iv_ruleExpression_6.current; } 
	 EOF 
;

// Rule Expression_6
ruleExpression_6 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_6Access().getUnaryCastExpressionAction_0_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_6Access().getLeftParenthesisKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_6Access().getTypeTypeParserRuleCall_0_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_6Rule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_5
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpression_6Access().getRightParenthesisKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_6Access().getExpressionExpression_7ParserRuleCall_0_4_0()); 
	    }
		lv_expression_4_0=ruleExpression_7		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_6Rule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression_7");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_6Access().getExpression_7ParserRuleCall_1()); 
    }
    this_Expression_7_5=ruleExpression_7
    {
        $current = $this_Expression_7_5.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpression_7
entryRuleExpression_7 returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpression_7Rule()); }
	 iv_ruleExpression_7=ruleExpression_7 
	 { $current=$iv_ruleExpression_7.current; } 
	 EOF 
;

// Rule Expression_7
ruleExpression_7 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_7Access().getExpression_8ParserRuleCall_0()); 
    }
    this_Expression_8_0=ruleExpression_8
    {
        $current = $this_Expression_8_0.current;
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_7Access().getUnaryBooleanExpressionAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_1
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpression_7Access().getExclamationMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_7Access().getExpressionExpression_8ParserRuleCall_1_2_0()); 
	    }
		lv_expression_3_0=ruleExpression_8		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_7Rule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression_8");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleExpression_8
entryRuleExpression_8 returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpression_8Rule()); }
	 iv_ruleExpression_8=ruleExpression_8 
	 { $current=$iv_ruleExpression_8.current; } 
	 EOF 
;

// Rule Expression_8
ruleExpression_8 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_8Access().getExpression_9ParserRuleCall_0()); 
    }
    this_Expression_9_0=ruleExpression_9
    {
        $current = $this_Expression_9_0.current;
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_8Access().getUnaryMathExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_8Access().getOpUnaryMathOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleUnaryMathOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_8Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"UnaryMathOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_8Access().getExpressionExpression_9ParserRuleCall_1_2_0()); 
	    }
		lv_expression_3_0=ruleExpression_9		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_8Rule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression_9");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleExpression_9
entryRuleExpression_9 returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpression_9Rule()); }
	 iv_ruleExpression_9=ruleExpression_9 
	 { $current=$iv_ruleExpression_9.current; } 
	 EOF 
;

// Rule Expression_9
ruleExpression_9 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_9Access().getExpression_11ParserRuleCall_0()); 
    }
    this_Expression_11_0=ruleExpression_11
    {
        $current = $this_Expression_11_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_9Access().getInstanceOfExpressionExpressionAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_96
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpression_9Access().getInstanceofKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_9Access().getTypeTypeParserRuleCall_1_2_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_9Rule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpression_11
entryRuleExpression_11 returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpression_11Rule()); }
	 iv_ruleExpression_11=ruleExpression_11 
	 { $current=$iv_ruleExpression_11.current; } 
	 EOF 
;

// Rule Expression_11
ruleExpression_11 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_4
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpression_11Access().getLeftParenthesisKeyword_0_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_11Access().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    {
        $current = $this_Expression_1.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_2=KEYWORD_5
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpression_11Access().getRightParenthesisKeyword_0_2());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_11Access().getTerminalExpressionParserRuleCall_1()); 
    }
    this_TerminalExpression_3=ruleTerminalExpression
    {
        $current = $this_TerminalExpression_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getLiteralParserRuleCall_0()); 
    }
    this_Literal_0=ruleLiteral
    {
        $current = $this_Literal_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getClassInstanceCreationExpressionParserRuleCall_1()); 
    }
    this_ClassInstanceCreationExpression_1=ruleClassInstanceCreationExpression
    {
        $current = $this_ClassInstanceCreationExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getRuleInvocationParserRuleCall_2()); 
    }
    this_RuleInvocation_2=ruleRuleInvocation
    {
        $current = $this_RuleInvocation_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getRuleInvocationSuperParserRuleCall_3()); 
    }
    this_RuleInvocationSuper_3=ruleRuleInvocationSuper
    {
        $current = $this_RuleInvocationSuper_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getStaticAccessParserRuleCall_4()); 
    }
    this_StaticAccess_4=ruleStaticAccess
    {
        $current = $this_StaticAccess_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getVariableAccessParserRuleCall_5()); 
    }
    this_VariableAccess_5=ruleVariableAccess
    {
        $current = $this_VariableAccess_5.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_0()); 
    }
    this_IntLiteral_0=ruleIntLiteral
    {
        $current = $this_IntLiteral_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getRealLiteralParserRuleCall_1()); 
    }
    this_RealLiteral_1=ruleRealLiteral
    {
        $current = $this_RealLiteral_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); 
    }
    this_BooleanLiteral_2=ruleBooleanLiteral
    {
        $current = $this_BooleanLiteral_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3()); 
    }
    this_StringLiteral_3=ruleStringLiteral
    {
        $current = $this_StringLiteral_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_4()); 
    }
    this_NullLiteral_4=ruleNullLiteral
    {
        $current = $this_NullLiteral_4.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_stringValue_0_0=RULE_STRING
		{
			newLeafNode(lv_stringValue_0_0, grammarAccess.getStringLiteralAccess().getStringValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringValue",
        		lv_stringValue_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	 iv_ruleIntLiteral=ruleIntLiteral 
	 { $current=$iv_ruleIntLiteral.current; } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_intValue_0_0=RULE_INT
		{
			newLeafNode(lv_intValue_0_0, grammarAccess.getIntLiteralAccess().getIntValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"intValue",
        		lv_intValue_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	 iv_ruleRealLiteral=ruleRealLiteral 
	 { $current=$iv_ruleRealLiteral.current; } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_floatValue_0_0=RULE_FLOAT
		{
			newLeafNode(lv_floatValue_0_0, grammarAccess.getRealLiteralAccess().getFloatValueFLOATTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRealLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"floatValue",
        		lv_floatValue_0_0, 
        		"FLOAT");
	    }

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
            $current);
    }
)((
(
		lv_booleanValue_1_0=
	KEYWORD_55
    {
        newLeafNode(lv_booleanValue_1_0, grammarAccess.getBooleanLiteralAccess().getBooleanValueTrueKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "booleanValue", true, "true");
	    }

)
)
    |
	otherlv_2=KEYWORD_61
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
    }
))
;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_51
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleClassInstanceCreationExpression
entryRuleClassInstanceCreationExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getClassInstanceCreationExpressionRule()); }
	 iv_ruleClassInstanceCreationExpression=ruleClassInstanceCreationExpression 
	 { $current=$iv_ruleClassInstanceCreationExpression.current; } 
	 EOF 
;

// Rule ClassInstanceCreationExpression
ruleClassInstanceCreationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_42
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassInstanceCreationExpressionAccess().getNewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassInstanceCreationExpressionAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassInstanceCreationExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_4
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassInstanceCreationExpressionAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getClassInstanceCreationExpressionAccess().getArgumentsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_arguments_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassInstanceCreationExpressionRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_8
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassInstanceCreationExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassInstanceCreationExpressionAccess().getArgumentsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_arguments_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassInstanceCreationExpressionRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_6=KEYWORD_5
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassInstanceCreationExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleRuleInvocation
entryRuleRuleInvocation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRuleInvocationRule()); }
	 iv_ruleRuleInvocation=ruleRuleInvocation 
	 { $current=$iv_ruleRuleInvocation.current; } 
	 EOF 
;

// Rule RuleInvocation
ruleRuleInvocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleInvocationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRuleInvocationAccess().getRuleDeclarationRuleDeclarationCrossReference_0_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleInvocationAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleInvocationAccess().getArgumentsExpressionParserRuleCall_2_0_0()); 
	    }
		lv_arguments_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleInvocationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_8
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleInvocationAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleInvocationAccess().getArgumentsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_arguments_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleInvocationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_5=KEYWORD_5
    {
    	newLeafNode(otherlv_5, grammarAccess.getRuleInvocationAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleRuleInvocationSuper
entryRuleRuleInvocationSuper returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRuleInvocationSuperRule()); }
	 iv_ruleRuleInvocationSuper=ruleRuleInvocationSuper 
	 { $current=$iv_ruleRuleInvocationSuper.current; } 
	 EOF 
;

// Rule RuleInvocationSuper
ruleRuleInvocationSuper returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleInvocationSuperAccess().getRuleInvocationSuperAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_63
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleInvocationSuperAccess().getSuperKeyword_1());
    }
)
;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getMethodInvocationParserRuleCall_0()); 
    }
    this_MethodInvocation_0=ruleMethodInvocation
    {
        $current = $this_MethodInvocation_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getFeatureFieldParserRuleCall_1()); 
    }
    this_FeatureField_1=ruleFeatureField
    {
        $current = $this_FeatureField_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMethodInvocation
entryRuleMethodInvocation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMethodInvocationRule()); }
	 iv_ruleMethodInvocation=ruleMethodInvocation 
	 { $current=$iv_ruleMethodInvocation.current; } 
	 EOF 
;

// Rule MethodInvocation
ruleMethodInvocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMethodInvocationAccess().getFeatureMethodInvocationParserRuleCall_0()); 
    }
    this_FeatureMethodInvocation_0=ruleFeatureMethodInvocation
    {
        $current = $this_FeatureMethodInvocation_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMethodInvocationAccess().getNativeOperationInvocationParserRuleCall_1()); 
    }
    this_NativeOperationInvocation_1=ruleNativeOperationInvocation
    {
        $current = $this_NativeOperationInvocation_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFeatureMethodInvocation
entryRuleFeatureMethodInvocation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFeatureMethodInvocationRule()); }
	 iv_ruleFeatureMethodInvocation=ruleFeatureMethodInvocation 
	 { $current=$iv_ruleFeatureMethodInvocation.current; } 
	 EOF 
;

// Rule FeatureMethodInvocation
ruleFeatureMethodInvocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_10
    {
    	newLeafNode(otherlv_0, grammarAccess.getFeatureMethodInvocationAccess().getFullStopKeyword_0());
    }
((
	otherlv_1=KEYWORD_29
    {
    	newLeafNode(otherlv_1, grammarAccess.getFeatureMethodInvocationAccess().getLessThanSignLessThanSignKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureMethodInvocationAccess().getExpressionExpressionParserRuleCall_1_0_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureMethodInvocationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_33
    {
    	newLeafNode(otherlv_3, grammarAccess.getFeatureMethodInvocationAccess().getGreaterThanSignGreaterThanSignKeyword_1_0_2());
    }
)
    |(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getFeatureMethodInvocationAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureMethodInvocationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
))
	otherlv_5=KEYWORD_4
    {
    	newLeafNode(otherlv_5, grammarAccess.getFeatureMethodInvocationAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureMethodInvocationAccess().getArgumentsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_arguments_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureMethodInvocationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_7=KEYWORD_8
    {
    	newLeafNode(otherlv_7, grammarAccess.getFeatureMethodInvocationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureMethodInvocationAccess().getArgumentsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_arguments_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureMethodInvocationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_9=KEYWORD_5
    {
    	newLeafNode(otherlv_9, grammarAccess.getFeatureMethodInvocationAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleNativeOperationInvocation
entryRuleNativeOperationInvocation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNativeOperationInvocationRule()); }
	 iv_ruleNativeOperationInvocation=ruleNativeOperationInvocation 
	 { $current=$iv_ruleNativeOperationInvocation.current; } 
	 EOF 
;

// Rule NativeOperationInvocation
ruleNativeOperationInvocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_27
    {
    	newLeafNode(otherlv_0, grammarAccess.getNativeOperationInvocationAccess().getHyphenMinusGreaterThanSignKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNativeOperationInvocationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNativeOperationInvocationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
	otherlv_2=KEYWORD_4
    {
    	newLeafNode(otherlv_2, grammarAccess.getNativeOperationInvocationAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNativeOperationInvocationAccess().getArgumentsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_arguments_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNativeOperationInvocationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_8
    {
    	newLeafNode(otherlv_4, grammarAccess.getNativeOperationInvocationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNativeOperationInvocationAccess().getArgumentsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_arguments_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNativeOperationInvocationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_6=KEYWORD_5
    {
    	newLeafNode(otherlv_6, grammarAccess.getNativeOperationInvocationAccess().getRightParenthesisKeyword_4());
    }
)
;







// Entry rule entryRuleFeatureField
entryRuleFeatureField returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFeatureFieldRule()); }
	 iv_ruleFeatureField=ruleFeatureField 
	 { $current=$iv_ruleFeatureField.current; } 
	 EOF 
;

// Rule FeatureField
ruleFeatureField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_10
    {
    	newLeafNode(otherlv_0, grammarAccess.getFeatureFieldAccess().getFullStopKeyword_0());
    }
((
	otherlv_1=KEYWORD_29
    {
    	newLeafNode(otherlv_1, grammarAccess.getFeatureFieldAccess().getLessThanSignLessThanSignKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureFieldAccess().getExpressionExpressionParserRuleCall_1_0_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureFieldRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_33
    {
    	newLeafNode(otherlv_3, grammarAccess.getFeatureFieldAccess().getGreaterThanSignGreaterThanSignKeyword_1_0_2());
    }
)
    |(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getFeatureFieldAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRuleVariableAccess
entryRuleVariableAccess returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getVariableAccessRule()); }
	 iv_ruleVariableAccess=ruleVariableAccess 
	 { $current=$iv_ruleVariableAccess.current; } 
	 EOF 
;

// Rule VariableAccess
ruleVariableAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccessAccess().getPrefixOperatorPPOperatorEnumRuleCall_0_0_0()); 
	    }
		lv_prefixOperator_0_0=rulePPOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAccessRule());
	        }
       		set(
       			$current, 
       			"prefixOperator",
        		lv_prefixOperator_0_0, 
        		"PPOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableAccessRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getVariableAccessAccess().getVariableVarDeclarationCrossReference_0_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccessAccess().getFeaturesFeatureParserRuleCall_0_2_0()); 
	    }
		lv_features_2_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAccessRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_2_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableAccessRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getVariableAccessAccess().getVariableVarDeclarationCrossReference_1_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccessAccess().getFeaturesFeatureParserRuleCall_1_1_0()); 
	    }
		lv_features_4_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAccessRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_4_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
	otherlv_5=KEYWORD_77
    {
    	newLeafNode(otherlv_5, grammarAccess.getVariableAccessAccess().getDefaultKeyword_1_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccessAccess().getDefaultExpressionParserRuleCall_1_2_0_1_0()); 
	    }
		lv_default_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAccessRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccessAccess().getPostfixOperatorPPOperatorEnumRuleCall_1_2_1_0()); 
	    }
		lv_postfixOperator_7_0=rulePPOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAccessRule());
	        }
       		set(
       			$current, 
       			"postfixOperator",
        		lv_postfixOperator_7_0, 
        		"PPOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;





// Entry rule entryRuleStaticAccess
entryRuleStaticAccess returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStaticAccessRule()); }
	 iv_ruleStaticAccess=ruleStaticAccess 
	 { $current=$iv_ruleStaticAccess.current; } 
	 EOF 
;

// Rule StaticAccess
ruleStaticAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_2
    {
    	newLeafNode(otherlv_0, grammarAccess.getStaticAccessAccess().getDollarSignKeyword_0());
    }
((
	otherlv_1=KEYWORD_29
    {
    	newLeafNode(otherlv_1, grammarAccess.getStaticAccessAccess().getLessThanSignLessThanSignKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStaticAccessAccess().getExpressionExpressionParserRuleCall_1_0_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticAccessRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_33
    {
    	newLeafNode(otherlv_3, grammarAccess.getStaticAccessAccess().getGreaterThanSignGreaterThanSignKeyword_1_0_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStaticAccessAccess().getTypeTypeParserRuleCall_1_1_0()); 
	    }
		lv_type_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticAccessRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getStaticAccessAccess().getFeaturesFeatureParserRuleCall_2_0()); 
	    }
		lv_features_5_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticAccessRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_5_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=KEYWORD_12 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getColonKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleAnnotationsDefinition
entryRuleAnnotationsDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAnnotationsDefinitionRule()); }
	 iv_ruleAnnotationsDefinition=ruleAnnotationsDefinition 
	 { $current=$iv_ruleAnnotationsDefinition.current; } 
	 EOF 
;

// Rule AnnotationsDefinition
ruleAnnotationsDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationsDefinitionAccess().getAnnotationDeclsAnnotationDeclParserRuleCall_0()); 
	    }
		lv_annotationDecls_0_0=ruleAnnotationDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationsDefinitionRule());
	        }
       		add(
       			$current, 
       			"annotationDecls",
        		lv_annotationDecls_0_0, 
        		"AnnotationDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleAnnotationDecl
entryRuleAnnotationDecl returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAnnotationDeclRule()); }
	 iv_ruleAnnotationDecl=ruleAnnotationDecl 
	 { $current=$iv_ruleAnnotationDecl.current; } 
	 EOF 
;

// Rule AnnotationDecl
ruleAnnotationDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_93
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationDeclAccess().getAnnotationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAnnotationDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
	otherlv_2=KEYWORD_4
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnnotationDeclAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationDeclAccess().getTargetsAnnotationTargetSpecEnumRuleCall_2_1_0()); 
	    }
		lv_targets_3_0=ruleAnnotationTargetSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationDeclRule());
	        }
       		add(
       			$current, 
       			"targets",
        		lv_targets_3_0, 
        		"AnnotationTargetSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_8
    {
    	newLeafNode(otherlv_4, grammarAccess.getAnnotationDeclAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationDeclAccess().getTargetsAnnotationTargetSpecEnumRuleCall_2_2_1_0()); 
	    }
		lv_targets_5_0=ruleAnnotationTargetSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationDeclRule());
	        }
       		add(
       			$current, 
       			"targets",
        		lv_targets_5_0, 
        		"AnnotationTargetSpec");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_6=KEYWORD_5
    {
    	newLeafNode(otherlv_6, grammarAccess.getAnnotationDeclAccess().getRightParenthesisKeyword_2_3());
    }
)?
	otherlv_7=KEYWORD_18
    {
    	newLeafNode(otherlv_7, grammarAccess.getAnnotationDeclAccess().getLeftCurlyBracketKeyword_3());
    }
(((
	otherlv_8=KEYWORD_54
    {
    	newLeafNode(otherlv_8, grammarAccess.getAnnotationDeclAccess().getSelfKeyword_4_0_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationDeclAccess().getValuetypePrimitiveTypeParserRuleCall_4_0_0_1_0()); 
	    }
		lv_valuetype_9_0=rulePrimitiveType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationDeclRule());
	        }
       		set(
       			$current, 
       			"valuetype",
        		lv_valuetype_9_0, 
        		"PrimitiveType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_many_10_0=
	KEYWORD_6
    {
        newLeafNode(lv_many_10_0, grammarAccess.getAnnotationDeclAccess().getManyAsteriskKeyword_4_0_0_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationDeclRule());
	        }
       		setWithLastConsumed($current, "many", true, "*");
	    }

)
)?((
(
		lv_required_11_0=
	KEYWORD_87
    {
        newLeafNode(lv_required_11_0, grammarAccess.getAnnotationDeclAccess().getRequiredRequiredKeyword_4_0_0_3_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationDeclRule());
	        }
       		setWithLastConsumed($current, "required", true, "required");
	    }

)
)
    |(
	otherlv_12=KEYWORD_15
    {
    	newLeafNode(otherlv_12, grammarAccess.getAnnotationDeclAccess().getEqualsSignKeyword_4_0_0_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationDeclAccess().getDefaultLiteralParserRuleCall_4_0_0_3_1_1_0()); 
	    }
		lv_default_13_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationDeclRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_13_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationDeclAccess().getPropertyDeclsAnnotationPropertyDeclParserRuleCall_4_0_1_0()); 
	    }
		lv_propertyDecls_14_0=ruleAnnotationPropertyDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationDeclRule());
	        }
       		add(
       			$current, 
       			"propertyDecls",
        		lv_propertyDecls_14_0, 
        		"AnnotationPropertyDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))(
	otherlv_15=KEYWORD_8
    {
    	newLeafNode(otherlv_15, grammarAccess.getAnnotationDeclAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationDeclAccess().getPropertyDeclsAnnotationPropertyDeclParserRuleCall_4_1_1_0()); 
	    }
		lv_propertyDecls_16_0=ruleAnnotationPropertyDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationDeclRule());
	        }
       		add(
       			$current, 
       			"propertyDecls",
        		lv_propertyDecls_16_0, 
        		"AnnotationPropertyDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_17=KEYWORD_20
    {
    	newLeafNode(otherlv_17, grammarAccess.getAnnotationDeclAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleAnnotationPropertyDecl
entryRuleAnnotationPropertyDecl returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAnnotationPropertyDeclRule()); }
	 iv_ruleAnnotationPropertyDecl=ruleAnnotationPropertyDecl 
	 { $current=$iv_ruleAnnotationPropertyDecl.current; } 
	 EOF 
;

// Rule AnnotationPropertyDecl
ruleAnnotationPropertyDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationPropertyDeclAccess().getTypePrimitiveTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=rulePrimitiveType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationPropertyDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"PrimitiveType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAnnotationPropertyDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationPropertyDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
		lv_required_2_0=
	KEYWORD_87
    {
        newLeafNode(lv_required_2_0, grammarAccess.getAnnotationPropertyDeclAccess().getRequiredRequiredKeyword_2_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationPropertyDeclRule());
	        }
       		setWithLastConsumed($current, "required", true, "required");
	    }

)
)
    |(
	otherlv_3=KEYWORD_15
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnnotationPropertyDeclAccess().getEqualsSignKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationPropertyDeclAccess().getDefaultLiteralParserRuleCall_2_1_1_0()); 
	    }
		lv_default_4_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationPropertyDeclRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_4_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_17
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getAnnotationAccess().getDeclAnnotationDeclCrossReference_1_0()); 
	}

)
)(
	otherlv_2=KEYWORD_4
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getValuesLiteralParserRuleCall_2_1_0_0()); 
	    }
		lv_values_3_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getPropertiesAnnotationPropertyParserRuleCall_2_1_1_0()); 
	    }
		lv_properties_4_0=ruleAnnotationProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_4_0, 
        		"AnnotationProperty");
	        afterParserOrEnumRuleCall();
	    }

)
))(
	otherlv_5=KEYWORD_8
    {
    	newLeafNode(otherlv_5, grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getValuesLiteralParserRuleCall_2_2_1_0_0()); 
	    }
		lv_values_6_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_6_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getPropertiesAnnotationPropertyParserRuleCall_2_2_1_1_0()); 
	    }
		lv_properties_7_0=ruleAnnotationProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_7_0, 
        		"AnnotationProperty");
	        afterParserOrEnumRuleCall();
	    }

)
)))*
	otherlv_8=KEYWORD_5
    {
    	newLeafNode(otherlv_8, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3());
    }
)?)
;





// Entry rule entryRuleAnnotationProperty
entryRuleAnnotationProperty returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAnnotationPropertyRule()); }
	 iv_ruleAnnotationProperty=ruleAnnotationProperty 
	 { $current=$iv_ruleAnnotationProperty.current; } 
	 EOF 
;

// Rule AnnotationProperty
ruleAnnotationProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationPropertyRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAnnotationPropertyAccess().getDeclAnnotationPropertyDeclCrossReference_0_0()); 
	}

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationPropertyAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationPropertyAccess().getValueLiteralParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationPropertyRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Rule VisibilityModifier
ruleVisibilityModifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_72
    {
        $current = grammarAccess.getVisibilityModifierAccess().getPublicEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getVisibilityModifierAccess().getPublicEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_80
    {
        $current = grammarAccess.getVisibilityModifierAccess().getPrivateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getVisibilityModifierAccess().getPrivateEnumLiteralDeclaration_1()); 
    }
));



// Rule ExecutionModifier
ruleExecutionModifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_67
    {
        $current = grammarAccess.getExecutionModifierAccess().getCalledEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getExecutionModifierAccess().getCalledEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_85
    {
        $current = grammarAccess.getExecutionModifierAccess().getAbstractEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getExecutionModifierAccess().getAbstractEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_70
    {
        $current = grammarAccess.getExecutionModifierAccess().getManualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getExecutionModifierAccess().getManualEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=KEYWORD_46
    {
        $current = grammarAccess.getExecutionModifierAccess().getAutoEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getExecutionModifierAccess().getAutoEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=KEYWORD_76
    {
        $current = grammarAccess.getExecutionModifierAccess().getConfirmEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getExecutionModifierAccess().getConfirmEnumLiteralDeclaration_4()); 
    }
));



// Rule FormalParameterModifier
ruleFormalParameterModifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_44
    {
        $current = grammarAccess.getFormalParameterModifierAccess().getUseEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFormalParameterModifierAccess().getUseEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_48
    {
        $current = grammarAccess.getFormalParameterModifierAccess().getFromEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFormalParameterModifierAccess().getFromEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_49
    {
        $current = grammarAccess.getFormalParameterModifierAccess().getIntoEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFormalParameterModifierAccess().getIntoEnumLiteralDeclaration_2()); 
    }
));



// Rule ReturnParameterModifier
ruleReturnParameterModifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_73
    {
        $current = grammarAccess.getReturnParameterModifierAccess().getReturnEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getReturnParameterModifierAccess().getReturnEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_68
    {
        $current = grammarAccess.getReturnParameterModifierAccess().getCreateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getReturnParameterModifierAccess().getCreateEnumLiteralDeclaration_1()); 
    }
));



// Rule PrimitiveTypeSpec
rulePrimitiveTypeSpec returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_56
    {
        $current = grammarAccess.getPrimitiveTypeSpecAccess().getVoidEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPrimitiveTypeSpecAccess().getVoidEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_39
    {
        $current = grammarAccess.getPrimitiveTypeSpecAccess().getAnyEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPrimitiveTypeSpecAccess().getAnyEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_66
    {
        $current = grammarAccess.getPrimitiveTypeSpecAccess().getStringEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPrimitiveTypeSpecAccess().getStringEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=KEYWORD_41
    {
        $current = grammarAccess.getPrimitiveTypeSpecAccess().getIntEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getPrimitiveTypeSpecAccess().getIntEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=KEYWORD_75
    {
        $current = grammarAccess.getPrimitiveTypeSpecAccess().getBooleanEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getPrimitiveTypeSpecAccess().getBooleanEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=KEYWORD_52
    {
        $current = grammarAccess.getPrimitiveTypeSpecAccess().getRealEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getPrimitiveTypeSpecAccess().getRealEnumLiteralDeclaration_5()); 
    }
)
    |(    enumLiteral_6=KEYWORD_45
    {
        $current = grammarAccess.getPrimitiveTypeSpecAccess().getTypeEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getPrimitiveTypeSpecAccess().getTypeEnumLiteralDeclaration_6()); 
    }
));



// Rule CollectionTypeSpec
ruleCollectionTypeSpec returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_91
    {
        $current = grammarAccess.getCollectionTypeSpecAccess().getCollectionEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCollectionTypeSpecAccess().getCollectionEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_38
    {
        $current = grammarAccess.getCollectionTypeSpecAccess().getSetEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCollectionTypeSpecAccess().getSetEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_92
    {
        $current = grammarAccess.getCollectionTypeSpecAccess().getOrderedSetEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCollectionTypeSpecAccess().getOrderedSetEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=KEYWORD_37
    {
        $current = grammarAccess.getCollectionTypeSpecAccess().getBagEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCollectionTypeSpecAccess().getBagEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=KEYWORD_84
    {
        $current = grammarAccess.getCollectionTypeSpecAccess().getSequenceEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCollectionTypeSpecAccess().getSequenceEnumLiteralDeclaration_4()); 
    }
));



// Rule BooleanOperator
ruleBooleanOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_3
    {
        $current = grammarAccess.getBooleanOperatorAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBooleanOperatorAccess().getAndEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_19
    {
        $current = grammarAccess.getBooleanOperatorAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBooleanOperatorAccess().getOrEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_22
    {
        $current = grammarAccess.getBooleanOperatorAccess().getAndscEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBooleanOperatorAccess().getAndscEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=KEYWORD_36
    {
        $current = grammarAccess.getBooleanOperatorAccess().getOrscEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getBooleanOperatorAccess().getOrscEnumLiteralDeclaration_3()); 
    }
));



// Rule EqualityOperator
ruleEqualityOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_31
    {
        $current = grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_21
    {
        $current = grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_1()); 
    }
));



// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_14
    {
        $current = grammarAccess.getRelationalOperatorAccess().getLtEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRelationalOperatorAccess().getLtEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_16
    {
        $current = grammarAccess.getRelationalOperatorAccess().getGtEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRelationalOperatorAccess().getGtEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_30
    {
        $current = grammarAccess.getRelationalOperatorAccess().getLeqEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRelationalOperatorAccess().getLeqEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=KEYWORD_32
    {
        $current = grammarAccess.getRelationalOperatorAccess().getGeqEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getRelationalOperatorAccess().getGeqEnumLiteralDeclaration_3()); 
    }
));



// Rule MathOperator
ruleMathOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_7
    {
        $current = grammarAccess.getMathOperatorAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMathOperatorAccess().getAddEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_9
    {
        $current = grammarAccess.getMathOperatorAccess().getSubEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMathOperatorAccess().getSubEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_6
    {
        $current = grammarAccess.getMathOperatorAccess().getMulEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMathOperatorAccess().getMulEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=KEYWORD_11
    {
        $current = grammarAccess.getMathOperatorAccess().getDivEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getMathOperatorAccess().getDivEnumLiteralDeclaration_3()); 
    }
));



// Rule UnaryMathOperator
ruleUnaryMathOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_7
    {
        $current = grammarAccess.getUnaryMathOperatorAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryMathOperatorAccess().getPlusEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_9
    {
        $current = grammarAccess.getUnaryMathOperatorAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryMathOperatorAccess().getMinusEnumLiteralDeclaration_1()); 
    }
));



// Rule AssignmentOperator
ruleAssignmentOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_15
    {
        $current = grammarAccess.getAssignmentOperatorAccess().getSetEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAssignmentOperatorAccess().getSetEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_24
    {
        $current = grammarAccess.getAssignmentOperatorAccess().getAddEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAssignmentOperatorAccess().getAddEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_26
    {
        $current = grammarAccess.getAssignmentOperatorAccess().getSubEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAssignmentOperatorAccess().getSubEnumLiteralDeclaration_2()); 
    }
));



// Rule PPOperator
rulePPOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_23
    {
        $current = grammarAccess.getPPOperatorAccess().getIncEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPPOperatorAccess().getIncEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_25
    {
        $current = grammarAccess.getPPOperatorAccess().getDecEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPPOperatorAccess().getDecEnumLiteralDeclaration_1()); 
    }
));



// Rule AnnotationTargetSpec
ruleAnnotationTargetSpec returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_71
    {
        $current = grammarAccess.getAnnotationTargetSpecAccess().getModuleEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAnnotationTargetSpecAccess().getModuleEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_53
    {
        $current = grammarAccess.getAnnotationTargetSpecAccess().getRuleEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAnnotationTargetSpecAccess().getRuleEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_90
    {
        $current = grammarAccess.getAnnotationTargetSpecAccess().getParameterEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAnnotationTargetSpecAccess().getParameterEnumLiteralDeclaration_2()); 
    }
));



